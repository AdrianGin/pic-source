
pfftest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00001fca  0000205e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000087  00800064  00800064  00002062  2**0
                  ALLOC
  3 .stab         00001098  00000000  00000000  00002064  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b0  00000000  00000000  000030fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  000031ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000d8  00000000  00000000  0000320c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001719  00000000  00000000  000032e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005c9  00000000  00000000  000049fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001163  00000000  00000000  00004fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000170  00000000  00000000  0000612c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000039c  00000000  00000000  0000629c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001c89  00000000  00000000  00006638  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d0  00000000  00000000  000082c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a6 c0       	rjmp	.+332    	; 0x14e <__ctors_end>
       2:	c0 c0       	rjmp	.+384    	; 0x184 <__bad_interrupt>
       4:	bf c0       	rjmp	.+382    	; 0x184 <__bad_interrupt>
       6:	be c0       	rjmp	.+380    	; 0x184 <__bad_interrupt>
       8:	bd c0       	rjmp	.+378    	; 0x184 <__bad_interrupt>
       a:	bc c0       	rjmp	.+376    	; 0x184 <__bad_interrupt>
       c:	bb c0       	rjmp	.+374    	; 0x184 <__bad_interrupt>
       e:	ba c0       	rjmp	.+372    	; 0x184 <__bad_interrupt>
      10:	b9 c0       	rjmp	.+370    	; 0x184 <__bad_interrupt>
      12:	b8 c0       	rjmp	.+368    	; 0x184 <__bad_interrupt>
      14:	b7 c0       	rjmp	.+366    	; 0x184 <__bad_interrupt>
      16:	b6 c0       	rjmp	.+364    	; 0x184 <__bad_interrupt>
      18:	b5 c0       	rjmp	.+362    	; 0x184 <__bad_interrupt>
      1a:	b4 c0       	rjmp	.+360    	; 0x184 <__bad_interrupt>
      1c:	b3 c0       	rjmp	.+358    	; 0x184 <__bad_interrupt>
      1e:	0d c2       	rjmp	.+1050   	; 0x43a <main+0x174>
      20:	ef c2       	rjmp	.+1502   	; 0x600 <main+0x33a>
      22:	7a c1       	rjmp	.+756    	; 0x318 <main+0x52>
      24:	79 c1       	rjmp	.+754    	; 0x318 <main+0x52>
      26:	78 c1       	rjmp	.+752    	; 0x318 <main+0x52>
      28:	f9 c1       	rjmp	.+1010   	; 0x41c <main+0x156>
      2a:	76 c1       	rjmp	.+748    	; 0x318 <main+0x52>
      2c:	75 c1       	rjmp	.+746    	; 0x318 <main+0x52>
      2e:	26 c3       	rjmp	.+1612   	; 0x67c <main+0x3b6>
      30:	73 c1       	rjmp	.+742    	; 0x318 <main+0x52>
      32:	72 c1       	rjmp	.+740    	; 0x318 <main+0x52>
      34:	fa c1       	rjmp	.+1012   	; 0x42a <main+0x164>
      36:	bf c2       	rjmp	.+1406   	; 0x5b6 <main+0x2f0>
      38:	6f c1       	rjmp	.+734    	; 0x318 <main+0x52>
      3a:	6e c1       	rjmp	.+732    	; 0x318 <main+0x52>
      3c:	6d c1       	rjmp	.+730    	; 0x318 <main+0x52>
      3e:	2e c2       	rjmp	.+1116   	; 0x49c <main+0x1d6>
      40:	6b c1       	rjmp	.+726    	; 0x318 <main+0x52>
      42:	6a c1       	rjmp	.+724    	; 0x318 <main+0x52>
      44:	3c c2       	rjmp	.+1144   	; 0x4be <main+0x1f8>

00000046 <__c.1689>:
      46:	25 75 20 69 74 65 6d 28 73 29 0a 00                 %u item(s)..

00000052 <__c.1686>:
      52:	25 39 6c 75 20 20 25 73 0a 00                       %9lu  %s..

0000005c <__c.1684>:
      5c:	20 20 20 3c 44 49 52 3e 20 20 20 25 73 0a 00           <DIR>   %s..

0000006b <__c.1677>:
      6b:	66 70 74 72 20 3d 20 25 6c 75 28 30 78 25 6c 58     fptr = %lu(0x%lX
      7b:	29 0a 00                                            )..

0000007e <__c.1672>:
      7e:	54 79 70 65 20 61 6e 79 20 6c 69 6e 65 20 74 6f     Type any line to
      8e:	20 77 72 69 74 65 2e 20 41 20 62 6c 61 6e 6b 20      write. A blank 
      9e:	6c 69 6e 65 20 66 69 6e 61 6c 69 7a 65 20 74 68     line finalize th
      ae:	65 20 77 72 69 74 65 20 6f 70 65 72 61 74 69 6f     e write operatio
      be:	6e 2e 0a 00                                         n...

000000c2 <__c.1669>:
      c2:	25 6c 75 20 62 79 74 65 73 20 77 72 69 74 74 65     %lu bytes writte
      d2:	6e 2e 0a 00                                         n...

000000d6 <__c.1638>:
      d6:	0a 50 46 46 20 74 65 73 74 20 6d 6f 6e 69 74 6f     .PFF test monito
      e6:	72 0a 00                                            r..

000000e9 <__c.1582>:
      e9:	72 63 3d 25 64 0a 00                                rc=%d..

000000f0 <__c.1609>:
      f0:	20 20 00                                              .

000000f3 <__c.1577>:
      f3:	72 63 3d 25 75 20 46 52 5f 25 53 0a 00              rc=%u FR_%S..

00000100 <str.1563>:
     100:	4f 4b 00 44 49 53 4b 5f 45 52 52 00 4e 4f 54 5f     OK.DISK_ERR.NOT_
     110:	52 45 41 44 59 00 4e 4f 5f 46 49 4c 45 00 4e 4f     READY.NO_FILE.NO
     120:	5f 50 41 54 48 00 4e 4f 54 5f 4f 50 45 4e 45 44     _PATH.NOT_OPENED
     130:	00 4e 4f 54 5f 45 4e 41 42 4c 45 44 00 4e 4f 5f     .NOT_ENABLED.NO_
     140:	46 49 4c 45 5f 53 59 53 54 45 4d 00 00 00           FILE_SYSTEM...

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d2 e0       	ldi	r29, 0x02	; 2
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	10 e0       	ldi	r17, 0x00	; 0
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ea ec       	ldi	r30, 0xCA	; 202
     162:	ff e1       	ldi	r31, 0x1F	; 31
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a4 36       	cpi	r26, 0x64	; 100
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	10 e0       	ldi	r17, 0x00	; 0
     172:	a4 e6       	ldi	r26, 0x64	; 100
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ab 3e       	cpi	r26, 0xEB	; 235
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	a2 d0       	rcall	.+324    	; 0x2c6 <main>
     182:	21 cf       	rjmp	.-446    	; 0xffffffc6 <__eeprom_end+0xff7effc6>

00000184 <__bad_interrupt>:
     184:	3d cf       	rjmp	.-390    	; 0x0 <__vectors>

00000186 <put_rc>:



static
void put_rc (FRESULT rc)
{
     186:	bc 01       	movw	r22, r24
     188:	40 e0       	ldi	r20, 0x00	; 0
     18a:	51 e0       	ldi	r21, 0x01	; 1
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	08 c0       	rjmp	.+16     	; 0x1a2 <put_rc+0x1c>
	static const prog_char str[] =
		"OK\0" "DISK_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
		"NOT_OPENED\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0";
	FRESULT i;

	for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
     192:	fa 01       	movw	r30, r20
		while(pgm_read_byte_near(p++));
     194:	4f 5f       	subi	r20, 0xFF	; 255
     196:	5f 4f       	sbci	r21, 0xFF	; 255
     198:	e4 91       	lpm	r30, Z+
     19a:	ee 23       	and	r30, r30
     19c:	d1 f7       	brne	.-12     	; 0x192 <put_rc+0xc>
	static const prog_char str[] =
		"OK\0" "DISK_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
		"NOT_OPENED\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0";
	FRESULT i;

	for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
     19e:	2f 5f       	subi	r18, 0xFF	; 255
     1a0:	3f 4f       	sbci	r19, 0xFF	; 255
     1a2:	26 17       	cp	r18, r22
     1a4:	37 07       	cpc	r19, r23
     1a6:	21 f0       	breq	.+8      	; 0x1b0 <put_rc+0x2a>
     1a8:	fa 01       	movw	r30, r20
     1aa:	84 91       	lpm	r24, Z+
     1ac:	88 23       	and	r24, r24
     1ae:	89 f7       	brne	.-30     	; 0x192 <put_rc+0xc>
		while(pgm_read_byte_near(p++));
	}
	xprintf(PSTR("rc=%u FR_%S\n"), (WORD)rc, p);
     1b0:	00 d0       	rcall	.+0      	; 0x1b2 <put_rc+0x2c>
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <put_rc+0x2e>
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <put_rc+0x30>
     1b6:	ed b7       	in	r30, 0x3d	; 61
     1b8:	fe b7       	in	r31, 0x3e	; 62
     1ba:	31 96       	adiw	r30, 0x01	; 1
     1bc:	83 ef       	ldi	r24, 0xF3	; 243
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	ad b7       	in	r26, 0x3d	; 61
     1c2:	be b7       	in	r27, 0x3e	; 62
     1c4:	12 96       	adiw	r26, 0x02	; 2
     1c6:	9c 93       	st	X, r25
     1c8:	8e 93       	st	-X, r24
     1ca:	11 97       	sbiw	r26, 0x01	; 1
     1cc:	73 83       	std	Z+3, r23	; 0x03
     1ce:	62 83       	std	Z+2, r22	; 0x02
     1d0:	55 83       	std	Z+5, r21	; 0x05
     1d2:	44 83       	std	Z+4, r20	; 0x04
     1d4:	ac dd       	rcall	.-1192   	; 0xfffffd2e <__eeprom_end+0xff7efd2e>
     1d6:	ed b7       	in	r30, 0x3d	; 61
     1d8:	fe b7       	in	r31, 0x3e	; 62
     1da:	36 96       	adiw	r30, 0x06	; 6
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	fe bf       	out	0x3e, r31	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	ed bf       	out	0x3d, r30	; 61
}
     1e6:	08 95       	ret

000001e8 <put_dump>:



static
void put_dump (const BYTE *buff, DWORD ofs, int cnt)
{
     1e8:	cf 92       	push	r12
     1ea:	df 92       	push	r13
     1ec:	ef 92       	push	r14
     1ee:	ff 92       	push	r15
     1f0:	1f 93       	push	r17
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	6c 01       	movw	r12, r24
     1f8:	79 01       	movw	r14, r18
	BYTE n;


	xitoa(ofs, 16, -8); xputc(' ');
     1fa:	cb 01       	movw	r24, r22
     1fc:	ba 01       	movw	r22, r20
     1fe:	40 e1       	ldi	r20, 0x10	; 16
     200:	28 ef       	ldi	r18, 0xF8	; 248
     202:	5a dd       	rcall	.-1356   	; 0xfffffcb8 <__eeprom_end+0xff7efcb8>
     204:	80 e2       	ldi	r24, 0x20	; 32
     206:	40 dd       	rcall	.-1408   	; 0xfffffc88 <__eeprom_end+0xff7efc88>
     208:	10 e0       	ldi	r17, 0x00	; 0
     20a:	0c c0       	rjmp	.+24     	; 0x224 <put_dump+0x3c>
	for(n = 0; n < cnt; n++) {
		xputc(' ');	xitoa(buff[n], 16, -2); 
     20c:	80 e2       	ldi	r24, 0x20	; 32
     20e:	3c dd       	rcall	.-1416   	; 0xfffffc88 <__eeprom_end+0xff7efc88>
     210:	cc 0d       	add	r28, r12
     212:	dd 1d       	adc	r29, r13
     214:	68 81       	ld	r22, Y
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	40 e1       	ldi	r20, 0x10	; 16
     21e:	2e ef       	ldi	r18, 0xFE	; 254
     220:	4b dd       	rcall	.-1386   	; 0xfffffcb8 <__eeprom_end+0xff7efcb8>
{
	BYTE n;


	xitoa(ofs, 16, -8); xputc(' ');
	for(n = 0; n < cnt; n++) {
     222:	1f 5f       	subi	r17, 0xFF	; 255
     224:	c1 2f       	mov	r28, r17
     226:	d0 e0       	ldi	r29, 0x00	; 0
     228:	ce 15       	cp	r28, r14
     22a:	df 05       	cpc	r29, r15
     22c:	7c f3       	brlt	.-34     	; 0x20c <put_dump+0x24>
		xputc(' ');	xitoa(buff[n], 16, -2); 
	}
	xputs(PSTR("  "));
     22e:	80 ef       	ldi	r24, 0xF0	; 240
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	3b dd       	rcall	.-1418   	; 0xfffffcaa <__eeprom_end+0xff7efcaa>
     234:	10 e0       	ldi	r17, 0x00	; 0
     236:	0c c0       	rjmp	.+24     	; 0x250 <put_dump+0x68>
	for(n = 0; n < cnt; n++)
		xputc(((buff[n] < 0x20)||(buff[n] >= 0x7F)) ? '.' : buff[n]);
     238:	ec 0d       	add	r30, r12
     23a:	fd 1d       	adc	r31, r13
     23c:	90 81       	ld	r25, Z
     23e:	89 2f       	mov	r24, r25
     240:	80 52       	subi	r24, 0x20	; 32
     242:	8f 35       	cpi	r24, 0x5F	; 95
     244:	10 f0       	brcs	.+4      	; 0x24a <put_dump+0x62>
     246:	8e e2       	ldi	r24, 0x2E	; 46
     248:	01 c0       	rjmp	.+2      	; 0x24c <put_dump+0x64>
     24a:	89 2f       	mov	r24, r25
     24c:	1d dd       	rcall	.-1478   	; 0xfffffc88 <__eeprom_end+0xff7efc88>
	xitoa(ofs, 16, -8); xputc(' ');
	for(n = 0; n < cnt; n++) {
		xputc(' ');	xitoa(buff[n], 16, -2); 
	}
	xputs(PSTR("  "));
	for(n = 0; n < cnt; n++)
     24e:	1f 5f       	subi	r17, 0xFF	; 255
     250:	e1 2f       	mov	r30, r17
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	ee 15       	cp	r30, r14
     256:	ff 05       	cpc	r31, r15
     258:	7c f3       	brlt	.-34     	; 0x238 <put_dump+0x50>
		xputc(((buff[n] < 0x20)||(buff[n] >= 0x7F)) ? '.' : buff[n]);
	xputc('\n');
     25a:	8a e0       	ldi	r24, 0x0A	; 10
     25c:	15 dd       	rcall	.-1494   	; 0xfffffc88 <__eeprom_end+0xff7efc88>
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	1f 91       	pop	r17
     264:	ff 90       	pop	r15
     266:	ef 90       	pop	r14
     268:	df 90       	pop	r13
     26a:	cf 90       	pop	r12
     26c:	08 95       	ret

0000026e <get_line>:



static
void get_line (char *buff, BYTE len)
{
     26e:	ef 92       	push	r14
     270:	ff 92       	push	r15
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	ec 01       	movw	r28, r24
     27a:	10 e0       	ldi	r17, 0x00	; 0
	i = 0;
	for (;;) {
		c = rcvr();
		if (c == '\r') break;
		if ((c == '\b') && i) i--;
		if ((c >= ' ') && (i < len - 1))
     27c:	e6 2e       	mov	r14, r22
     27e:	ff 24       	eor	r15, r15
     280:	08 94       	sec
     282:	e1 08       	sbc	r14, r1
     284:	f1 08       	sbc	r15, r1
{
	BYTE c, i;

	i = 0;
	for (;;) {
		c = rcvr();
     286:	ed dc       	rcall	.-1574   	; 0xfffffc62 <__eeprom_end+0xff7efc62>
		if (c == '\r') break;
     288:	8d 30       	cpi	r24, 0x0D	; 13
     28a:	91 f0       	breq	.+36     	; 0x2b0 <get_line+0x42>
		if ((c == '\b') && i) i--;
     28c:	88 30       	cpi	r24, 0x08	; 8
     28e:	21 f4       	brne	.+8      	; 0x298 <get_line+0x2a>
     290:	11 23       	and	r17, r17
     292:	c9 f3       	breq	.-14     	; 0x286 <get_line+0x18>
     294:	11 50       	subi	r17, 0x01	; 1
     296:	f7 cf       	rjmp	.-18     	; 0x286 <get_line+0x18>
		if ((c >= ' ') && (i < len - 1))
     298:	80 32       	cpi	r24, 0x20	; 32
     29a:	a8 f3       	brcs	.-22     	; 0x286 <get_line+0x18>
     29c:	e1 2f       	mov	r30, r17
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	ee 15       	cp	r30, r14
     2a2:	ff 05       	cpc	r31, r15
     2a4:	84 f7       	brge	.-32     	; 0x286 <get_line+0x18>
				buff[i++] = c;
     2a6:	ec 0f       	add	r30, r28
     2a8:	fd 1f       	adc	r31, r29
     2aa:	80 83       	st	Z, r24
     2ac:	1f 5f       	subi	r17, 0xFF	; 255
     2ae:	eb cf       	rjmp	.-42     	; 0x286 <get_line+0x18>
	}
	buff[i] = 0;
     2b0:	c1 0f       	add	r28, r17
     2b2:	d1 1d       	adc	r29, r1
     2b4:	18 82       	st	Y, r1
	xmit('\n');
     2b6:	8a e0       	ldi	r24, 0x0A	; 10
     2b8:	c1 dc       	rcall	.-1662   	; 0xfffffc3c <__eeprom_end+0xff7efc3c>
}
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	1f 91       	pop	r17
     2c0:	ff 90       	pop	r15
     2c2:	ef 90       	pop	r14
     2c4:	08 95       	ret

000002c6 <main>:
/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
{
     2c6:	a0 e6       	ldi	r26, 0x60	; 96
     2c8:	b0 e0       	ldi	r27, 0x00	; 0
     2ca:	e8 e6       	ldi	r30, 0x68	; 104
     2cc:	f1 e0       	ldi	r31, 0x01	; 1
     2ce:	39 ce       	rjmp	.-910    	; 0xffffff42 <__eeprom_end+0xff7eff42>
	FATFS fs;			/* File system object */
	DIR dir;			/* Directory object */
	FILINFO fno;		/* File information */


	PORTB = 0b101011;	/* u z H L H u */
     2d0:	8b e2       	ldi	r24, 0x2B	; 43
     2d2:	88 bb       	out	0x18, r24	; 24
	DDRB =  0b001110;
     2d4:	8e e0       	ldi	r24, 0x0E	; 14
     2d6:	87 bb       	out	0x17, r24	; 23


	xfunc_out = xmit;
     2d8:	8e e1       	ldi	r24, 0x1E	; 30
     2da:	9e e0       	ldi	r25, 0x0E	; 14
     2dc:	90 93 6a 00 	sts	0x006A, r25
     2e0:	80 93 69 00 	sts	0x0069, r24
	xputs(PSTR("\nPFF test monitor\n"));
     2e4:	86 ed       	ldi	r24, 0xD6	; 214
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	e0 dc       	rcall	.-1600   	; 0xfffffcaa <__eeprom_end+0xff7efcaa>

	for (;;) {
		xputc('>');
		get_line(Line, sizeof(Line));
     2ea:	4b e6       	ldi	r20, 0x6B	; 107
     2ec:	84 2e       	mov	r8, r20
     2ee:	40 e0       	ldi	r20, 0x00	; 0
     2f0:	94 2e       	mov	r9, r20
				put_rc(res);
				break;
#endif
#if _USE_LSEEK
			case 'e' :	/* fe - Move file pointer of the file */
				if (!xatoi(&ptr, &p1)) break;
     2f2:	37 e0       	ldi	r19, 0x07	; 7
     2f4:	43 2e       	mov	r4, r19
     2f6:	51 2c       	mov	r5, r1
     2f8:	4c 0e       	add	r4, r28
     2fa:	5d 1e       	adc	r5, r29
     2fc:	5e 01       	movw	r10, r28
     2fe:	08 94       	sec
     300:	a1 1c       	adc	r10, r1
     302:	b1 1c       	adc	r11, r1
				xputs(PSTR("Type any line to write. A blank line finalize the write operation.\n"));
				for (;;) {
					get_line(Line, sizeof(Line));
					if (!Line[0]) break;
					strcat(Line, "\r\n");
					res = pf_write(Line, strlen(Line), &w);	/* Write a line to the file */
     304:	25 e0       	ldi	r18, 0x05	; 5
     306:	62 2e       	mov	r6, r18
     308:	71 2c       	mov	r7, r1
     30a:	6c 0e       	add	r6, r28
     30c:	7d 1e       	adc	r7, r29
				} while (s1 == 32768);
				break;
#endif
#if _USE_WRITE
			case 'w' :	/* fw <len> <val> - Write data to the file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
     30e:	9b e0       	ldi	r25, 0x0B	; 11
     310:	29 2e       	mov	r2, r25
     312:	31 2c       	mov	r3, r1
     314:	2c 0e       	add	r2, r28
     316:	3d 1e       	adc	r3, r29

	xfunc_out = xmit;
	xputs(PSTR("\nPFF test monitor\n"));

	for (;;) {
		xputc('>');
     318:	8e e3       	ldi	r24, 0x3E	; 62
     31a:	b6 dc       	rcall	.-1684   	; 0xfffffc88 <__eeprom_end+0xff7efc88>
		get_line(Line, sizeof(Line));
     31c:	8b e6       	ldi	r24, 0x6B	; 107
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	60 e8       	ldi	r22, 0x80	; 128
     322:	a5 df       	rcall	.-182    	; 0x26e <get_line>
		ptr = Line;

		switch (*ptr++) {
     324:	80 91 6b 00 	lds	r24, 0x006B
     328:	2c e6       	ldi	r18, 0x6C	; 108
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	3a 83       	std	Y+2, r19	; 0x02
     32e:	29 83       	std	Y+1, r18	; 0x01
     330:	84 36       	cpi	r24, 0x64	; 100
     332:	19 f0       	breq	.+6      	; 0x33a <main+0x74>
     334:	86 36       	cpi	r24, 0x66	; 102
     336:	81 f7       	brne	.-32     	; 0x318 <main+0x52>
     338:	5c c0       	rjmp	.+184    	; 0x3f2 <main+0x12c>

		case 'd' :
			switch (*ptr++) {
     33a:	80 91 6c 00 	lds	r24, 0x006C
     33e:	ad e6       	ldi	r26, 0x6D	; 109
     340:	b0 e0       	ldi	r27, 0x00	; 0
     342:	ba 83       	std	Y+2, r27	; 0x02
     344:	a9 83       	std	Y+1, r26	; 0x01
     346:	84 36       	cpi	r24, 0x64	; 100
     348:	21 f0       	breq	.+8      	; 0x352 <main+0x8c>
     34a:	89 36       	cpi	r24, 0x69	; 105
     34c:	29 f7       	brne	.-54     	; 0x318 <main+0x52>
			case 'i' :	/* di - Initialize physical drive */
				res = disk_initialize();
     34e:	8e db       	rcall	.-2276   	; 0xfffffa6c <__eeprom_end+0xff7efa6c>
     350:	19 c0       	rjmp	.+50     	; 0x384 <main+0xbe>
				put_drc(res);
				break;

			case 'd' :	/* dd <sector> <ofs> - Dump partial secrtor 128 bytes */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
     352:	c5 01       	movw	r24, r10
     354:	b2 01       	movw	r22, r4
     356:	49 dd       	rcall	.-1390   	; 0xfffffdea <__eeprom_end+0xff7efdea>
     358:	88 23       	and	r24, r24
     35a:	f1 f2       	breq	.-68     	; 0x318 <main+0x52>
     35c:	c5 01       	movw	r24, r10
     35e:	b1 01       	movw	r22, r2
     360:	44 dd       	rcall	.-1400   	; 0xfffffdea <__eeprom_end+0xff7efdea>
     362:	88 23       	and	r24, r24
     364:	c9 f2       	breq	.-78     	; 0x318 <main+0x52>
				s2 = p2;
     366:	eb 84       	ldd	r14, Y+11	; 0x0b
     368:	fc 84       	ldd	r15, Y+12	; 0x0c
				res = disk_readp((BYTE*)Line, p1, s2, 128);
     36a:	4f 81       	ldd	r20, Y+7	; 0x07
     36c:	58 85       	ldd	r21, Y+8	; 0x08
     36e:	69 85       	ldd	r22, Y+9	; 0x09
     370:	7a 85       	ldd	r23, Y+10	; 0x0a
     372:	8c e6       	ldi	r24, 0x6C	; 108
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	97 01       	movw	r18, r14
     37a:	00 e8       	ldi	r16, 0x80	; 128
     37c:	10 e0       	ldi	r17, 0x00	; 0
     37e:	10 dc       	rcall	.-2016   	; 0xfffffba0 <__eeprom_end+0xff7efba0>
				if (res) { put_drc(res); break; }
     380:	88 23       	and	r24, r24
     382:	81 f0       	breq	.+32     	; 0x3a4 <main+0xde>


static
void put_drc (BYTE res)
{
	xprintf(PSTR("rc=%d\n"), res);
     384:	00 d0       	rcall	.+0      	; 0x386 <main+0xc0>
     386:	00 d0       	rcall	.+0      	; 0x388 <main+0xc2>
     388:	ed b7       	in	r30, 0x3d	; 61
     38a:	fe b7       	in	r31, 0x3e	; 62
     38c:	31 96       	adiw	r30, 0x01	; 1
     38e:	29 ee       	ldi	r18, 0xE9	; 233
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	ad b7       	in	r26, 0x3d	; 61
     394:	be b7       	in	r27, 0x3e	; 62
     396:	12 96       	adiw	r26, 0x02	; 2
     398:	3c 93       	st	X, r19
     39a:	2e 93       	st	-X, r18
     39c:	11 97       	sbiw	r26, 0x01	; 1
     39e:	82 83       	std	Z+2, r24	; 0x02
     3a0:	13 82       	std	Z+3, r1	; 0x03
     3a2:	e2 c1       	rjmp	.+964    	; 0x768 <main+0x4a2>
			case 'd' :	/* dd <sector> <ofs> - Dump partial secrtor 128 bytes */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
				s2 = p2;
				res = disk_readp((BYTE*)Line, p1, s2, 128);
				if (res) { put_drc(res); break; }
				s3 = s2 + 128;
     3a4:	80 e8       	ldi	r24, 0x80	; 128
     3a6:	c8 2e       	mov	r12, r24
     3a8:	d1 2c       	mov	r13, r1
     3aa:	ce 0c       	add	r12, r14
     3ac:	df 1c       	adc	r13, r15
				for (ptr = Line; s2 < s3; s2 += 16, ptr += 16, ofs += 16) {
     3ae:	9a 82       	std	Y+2, r9	; 0x02
     3b0:	89 82       	std	Y+1, r8	; 0x01
     3b2:	00 e8       	ldi	r16, 0x80	; 128
     3b4:	10 e0       	ldi	r17, 0x00	; 0
     3b6:	19 c0       	rjmp	.+50     	; 0x3ea <main+0x124>
					s1 = (s3 - s2 >= 16) ? 16 : s3 - s2;
     3b8:	98 01       	movw	r18, r16
     3ba:	01 31       	cpi	r16, 0x11	; 17
     3bc:	11 05       	cpc	r17, r1
     3be:	10 f0       	brcs	.+4      	; 0x3c4 <main+0xfe>
     3c0:	20 e1       	ldi	r18, 0x10	; 16
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	3c 83       	std	Y+4, r19	; 0x04
     3c6:	2b 83       	std	Y+3, r18	; 0x03
					put_dump((BYTE*)ptr, s2, s1);
     3c8:	a7 01       	movw	r20, r14
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	9a 81       	ldd	r25, Y+2	; 0x02
     3d2:	0a df       	rcall	.-492    	; 0x1e8 <put_dump>
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
				s2 = p2;
				res = disk_readp((BYTE*)Line, p1, s2, 128);
				if (res) { put_drc(res); break; }
				s3 = s2 + 128;
				for (ptr = Line; s2 < s3; s2 += 16, ptr += 16, ofs += 16) {
     3d4:	80 e1       	ldi	r24, 0x10	; 16
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	e8 0e       	add	r14, r24
     3da:	f9 1e       	adc	r15, r25
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	9a 81       	ldd	r25, Y+2	; 0x02
     3e0:	40 96       	adiw	r24, 0x10	; 16
     3e2:	9a 83       	std	Y+2, r25	; 0x02
     3e4:	89 83       	std	Y+1, r24	; 0x01
     3e6:	00 51       	subi	r16, 0x10	; 16
     3e8:	10 40       	sbci	r17, 0x00	; 0
     3ea:	ec 14       	cp	r14, r12
     3ec:	fd 04       	cpc	r15, r13
     3ee:	20 f3       	brcs	.-56     	; 0x3b8 <main+0xf2>
     3f0:	93 cf       	rjmp	.-218    	; 0x318 <main+0x52>
				break;
			}
			break;

		case 'f' :
			switch (*ptr++) {
     3f2:	80 91 6c 00 	lds	r24, 0x006C
     3f6:	ad e6       	ldi	r26, 0x6D	; 109
     3f8:	b0 e0       	ldi	r27, 0x00	; 0
     3fa:	ba 83       	std	Y+2, r27	; 0x02
     3fc:	a9 83       	std	Y+1, r26	; 0x01
     3fe:	99 27       	eor	r25, r25
     400:	87 fd       	sbrc	r24, 7
     402:	90 95       	com	r25
     404:	a9 2f       	mov	r26, r25
     406:	b9 2f       	mov	r27, r25
     408:	fc 01       	movw	r30, r24
     40a:	e4 56       	subi	r30, 0x64	; 100
     40c:	f0 40       	sbci	r31, 0x00	; 0
     40e:	e4 31       	cpi	r30, 0x14	; 20
     410:	f1 05       	cpc	r31, r1
     412:	08 f0       	brcs	.+2      	; 0x416 <main+0x150>
     414:	81 cf       	rjmp	.-254    	; 0x318 <main+0x52>
     416:	e1 5f       	subi	r30, 0xF1	; 241
     418:	ff 4f       	sbci	r31, 0xFF	; 255
     41a:	09 94       	ijmp

			case 'i' :	/* fi - Mount the volume */
				put_rc(pf_mount(&fs));
     41c:	ce 01       	movw	r24, r28
     41e:	c5 96       	adiw	r24, 0x35	; 53
     420:	75 d9       	rcall	.-3350   	; 0xfffff70c <__eeprom_end+0xff7ef70c>
     422:	38 c1       	rjmp	.+624    	; 0x694 <main+0x3ce>
				break;

			case 'o' :	/* fo <file> - Open a file */
				while (*ptr == ' ') ptr++;
     424:	31 96       	adiw	r30, 0x01	; 1
     426:	fa 83       	std	Y+2, r31	; 0x02
     428:	e9 83       	std	Y+1, r30	; 0x01
     42a:	e9 81       	ldd	r30, Y+1	; 0x01
     42c:	fa 81       	ldd	r31, Y+2	; 0x02
     42e:	80 81       	ld	r24, Z
     430:	80 32       	cpi	r24, 0x20	; 32
     432:	c1 f3       	breq	.-16     	; 0x424 <main+0x15e>
				put_rc(pf_open(ptr));
     434:	cf 01       	movw	r24, r30
     436:	be d6       	rcall	.+3452   	; 0x11b4 <pf_open>
     438:	2d c1       	rjmp	.+602    	; 0x694 <main+0x3ce>
				break;
#if _USE_READ
			case 'd' :	/* fd - Read the file 128 bytes and dump it */
				ofs = fs.fptr;
     43a:	61 96       	adiw	r28, 0x11	; 17
     43c:	ec ac       	ldd	r14, Y+60	; 0x3c
     43e:	fd ac       	ldd	r15, Y+61	; 0x3d
     440:	0e ad       	ldd	r16, Y+62	; 0x3e
     442:	1f ad       	ldd	r17, Y+63	; 0x3f
     444:	61 97       	sbiw	r28, 0x11	; 17
				res = pf_read(Line, sizeof(Line), &s1);
     446:	8b e6       	ldi	r24, 0x6B	; 107
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	60 e8       	ldi	r22, 0x80	; 128
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	ae 01       	movw	r20, r28
     450:	4d 5f       	subi	r20, 0xFD	; 253
     452:	5f 4f       	sbci	r21, 0xFF	; 255
     454:	04 d7       	rcall	.+3592   	; 0x125e <pf_read>
				if (res != FR_OK) { put_rc(res); break; }
     456:	88 23       	and	r24, r24
     458:	09 f0       	breq	.+2      	; 0x45c <main+0x196>
     45a:	1b c1       	rjmp	.+566    	; 0x692 <main+0x3cc>
				while (*ptr == ' ') ptr++;
				put_rc(pf_open(ptr));
				break;
#if _USE_READ
			case 'd' :	/* fd - Read the file 128 bytes and dump it */
				ofs = fs.fptr;
     45c:	87 01       	movw	r16, r14
				res = pf_read(Line, sizeof(Line), &s1);
				if (res != FR_OK) { put_rc(res); break; }
				ptr = Line;
     45e:	9a 82       	std	Y+2, r9	; 0x02
     460:	89 82       	std	Y+1, r8	; 0x01
     462:	17 c0       	rjmp	.+46     	; 0x492 <main+0x1cc>
				while (s1) {
					s2 = (s1 >= 16) ? 16 : s1;
     464:	9c 01       	movw	r18, r24
     466:	81 31       	cpi	r24, 0x11	; 17
     468:	91 05       	cpc	r25, r1
     46a:	10 f0       	brcs	.+4      	; 0x470 <main+0x1aa>
     46c:	20 e1       	ldi	r18, 0x10	; 16
     46e:	30 e0       	ldi	r19, 0x00	; 0
					s1 -= s2;
     470:	82 1b       	sub	r24, r18
     472:	93 0b       	sbc	r25, r19
     474:	9c 83       	std	Y+4, r25	; 0x04
     476:	8b 83       	std	Y+3, r24	; 0x03
					put_dump((BYTE*)ptr, ofs, s2);
     478:	a8 01       	movw	r20, r16
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	89 81       	ldd	r24, Y+1	; 0x01
     480:	9a 81       	ldd	r25, Y+2	; 0x02
     482:	b2 de       	rcall	.-668    	; 0x1e8 <put_dump>
					ptr += 16; ofs += 16;
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	9a 81       	ldd	r25, Y+2	; 0x02
     488:	40 96       	adiw	r24, 0x10	; 16
     48a:	9a 83       	std	Y+2, r25	; 0x02
     48c:	89 83       	std	Y+1, r24	; 0x01
     48e:	00 5f       	subi	r16, 0xF0	; 240
     490:	1f 4f       	sbci	r17, 0xFF	; 255
			case 'd' :	/* fd - Read the file 128 bytes and dump it */
				ofs = fs.fptr;
				res = pf_read(Line, sizeof(Line), &s1);
				if (res != FR_OK) { put_rc(res); break; }
				ptr = Line;
				while (s1) {
     492:	8b 81       	ldd	r24, Y+3	; 0x03
     494:	9c 81       	ldd	r25, Y+4	; 0x04
     496:	00 97       	sbiw	r24, 0x00	; 0
     498:	29 f7       	brne	.-54     	; 0x464 <main+0x19e>
     49a:	3e cf       	rjmp	.-388    	; 0x318 <main+0x52>
				}
				break;

			case 't' :	/* ft - Type the file data via dreadp function */
				do {
					res = pf_read(0, 32768, &s1);
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	70 e8       	ldi	r23, 0x80	; 128
     4a4:	ae 01       	movw	r20, r28
     4a6:	4d 5f       	subi	r20, 0xFD	; 253
     4a8:	5f 4f       	sbci	r21, 0xFF	; 255
     4aa:	d9 d6       	rcall	.+3506   	; 0x125e <pf_read>
					if (res != FR_OK) { put_rc(res); break; }
     4ac:	88 23       	and	r24, r24
     4ae:	09 f0       	breq	.+2      	; 0x4b2 <main+0x1ec>
     4b0:	f0 c0       	rjmp	.+480    	; 0x692 <main+0x3cc>
				} while (s1 == 32768);
     4b2:	8b 81       	ldd	r24, Y+3	; 0x03
     4b4:	9c 81       	ldd	r25, Y+4	; 0x04
     4b6:	80 50       	subi	r24, 0x00	; 0
     4b8:	90 48       	sbci	r25, 0x80	; 128
     4ba:	81 f3       	breq	.-32     	; 0x49c <main+0x1d6>
     4bc:	2d cf       	rjmp	.-422    	; 0x318 <main+0x52>
				break;
#endif
#if _USE_WRITE
			case 'w' :	/* fw <len> <val> - Write data to the file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
     4be:	c5 01       	movw	r24, r10
     4c0:	b2 01       	movw	r22, r4
     4c2:	93 dc       	rcall	.-1754   	; 0xfffffdea <__eeprom_end+0xff7efdea>
     4c4:	88 23       	and	r24, r24
     4c6:	09 f4       	brne	.+2      	; 0x4ca <main+0x204>
     4c8:	27 cf       	rjmp	.-434    	; 0x318 <main+0x52>
     4ca:	c5 01       	movw	r24, r10
     4cc:	b1 01       	movw	r22, r2
     4ce:	8d dc       	rcall	.-1766   	; 0xfffffdea <__eeprom_end+0xff7efdea>
     4d0:	88 23       	and	r24, r24
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <main+0x210>
     4d4:	21 cf       	rjmp	.-446    	; 0x318 <main+0x52>
				for (s1 = 0; s1 < sizeof(Line); Line[s1++] = (BYTE)p2) ;
     4d6:	2b 85       	ldd	r18, Y+11	; 0x0b
     4d8:	eb e6       	ldi	r30, 0x6B	; 107
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <main+0x220>
     4e2:	21 93       	st	Z+, r18
     4e4:	01 96       	adiw	r24, 0x01	; 1
     4e6:	80 38       	cpi	r24, 0x80	; 128
     4e8:	91 05       	cpc	r25, r1
     4ea:	d8 f3       	brcs	.-10     	; 0x4e2 <main+0x21c>
     4ec:	9c 83       	std	Y+4, r25	; 0x04
     4ee:	8b 83       	std	Y+3, r24	; 0x03
				p2 = 0;
     4f0:	1b 86       	std	Y+11, r1	; 0x0b
     4f2:	1c 86       	std	Y+12, r1	; 0x0c
     4f4:	1d 86       	std	Y+13, r1	; 0x0d
     4f6:	1e 86       	std	Y+14, r1	; 0x0e
     4f8:	33 c0       	rjmp	.+102    	; 0x560 <main+0x29a>
				while (p1) {
					if ((UINT)p1 >= sizeof(Line)) {
     4fa:	8c 01       	movw	r16, r24
     4fc:	80 38       	cpi	r24, 0x80	; 128
     4fe:	91 05       	cpc	r25, r1
     500:	58 f0       	brcs	.+22     	; 0x518 <main+0x252>
						cnt = sizeof(Line); p1 -= sizeof(Line);
     502:	80 58       	subi	r24, 0x80	; 128
     504:	90 40       	sbci	r25, 0x00	; 0
     506:	a0 40       	sbci	r26, 0x00	; 0
     508:	b0 40       	sbci	r27, 0x00	; 0
     50a:	8f 83       	std	Y+7, r24	; 0x07
     50c:	98 87       	std	Y+8, r25	; 0x08
     50e:	a9 87       	std	Y+9, r26	; 0x09
     510:	ba 87       	std	Y+10, r27	; 0x0a
     512:	00 e8       	ldi	r16, 0x80	; 128
     514:	10 e0       	ldi	r17, 0x00	; 0
     516:	04 c0       	rjmp	.+8      	; 0x520 <main+0x25a>
					} else {
						cnt = (WORD)p1; p1 = 0;
     518:	1f 82       	std	Y+7, r1	; 0x07
     51a:	18 86       	std	Y+8, r1	; 0x08
     51c:	19 86       	std	Y+9, r1	; 0x09
     51e:	1a 86       	std	Y+10, r1	; 0x0a
					}
					res = pf_write(Line, cnt, &w);	/* Write data to the file */
     520:	8b e6       	ldi	r24, 0x6B	; 107
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	b8 01       	movw	r22, r16
     526:	a3 01       	movw	r20, r6
     528:	d4 d7       	rcall	.+4008   	; 0x14d2 <pf_write>
     52a:	e8 2f       	mov	r30, r24
					p2 += w;
     52c:	6d 81       	ldd	r22, Y+5	; 0x05
     52e:	7e 81       	ldd	r23, Y+6	; 0x06
     530:	9b 01       	movw	r18, r22
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	8b 85       	ldd	r24, Y+11	; 0x0b
     538:	9c 85       	ldd	r25, Y+12	; 0x0c
     53a:	ad 85       	ldd	r26, Y+13	; 0x0d
     53c:	be 85       	ldd	r27, Y+14	; 0x0e
     53e:	82 0f       	add	r24, r18
     540:	93 1f       	adc	r25, r19
     542:	a4 1f       	adc	r26, r20
     544:	b5 1f       	adc	r27, r21
     546:	8b 87       	std	Y+11, r24	; 0x0b
     548:	9c 87       	std	Y+12, r25	; 0x0c
     54a:	ad 87       	std	Y+13, r26	; 0x0d
     54c:	be 87       	std	Y+14, r27	; 0x0e
					if (res != FR_OK) { put_rc(res); break; }
     54e:	ee 23       	and	r30, r30
     550:	21 f0       	breq	.+8      	; 0x55a <main+0x294>
     552:	8e 2f       	mov	r24, r30
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	17 de       	rcall	.-978    	; 0x186 <put_rc>
     558:	0b c0       	rjmp	.+22     	; 0x570 <main+0x2aa>
					if (cnt != w) break;
     55a:	06 17       	cp	r16, r22
     55c:	17 07       	cpc	r17, r23
     55e:	41 f4       	brne	.+16     	; 0x570 <main+0x2aa>
#if _USE_WRITE
			case 'w' :	/* fw <len> <val> - Write data to the file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
				for (s1 = 0; s1 < sizeof(Line); Line[s1++] = (BYTE)p2) ;
				p2 = 0;
				while (p1) {
     560:	8f 81       	ldd	r24, Y+7	; 0x07
     562:	98 85       	ldd	r25, Y+8	; 0x08
     564:	a9 85       	ldd	r26, Y+9	; 0x09
     566:	ba 85       	ldd	r27, Y+10	; 0x0a
     568:	00 97       	sbiw	r24, 0x00	; 0
     56a:	a1 05       	cpc	r26, r1
     56c:	b1 05       	cpc	r27, r1
     56e:	29 f6       	brne	.-118    	; 0x4fa <main+0x234>
					res = pf_write(Line, cnt, &w);	/* Write data to the file */
					p2 += w;
					if (res != FR_OK) { put_rc(res); break; }
					if (cnt != w) break;
				}
				res = pf_write(0, 0, &w);		/* Finalize the write process */
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	a3 01       	movw	r20, r6
     57a:	ab d7       	rcall	.+3926   	; 0x14d2 <pf_write>
     57c:	18 2f       	mov	r17, r24
				put_rc(res);
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	02 de       	rcall	.-1020   	; 0x186 <put_rc>
				if (res == FR_OK)
     582:	11 23       	and	r17, r17
     584:	09 f0       	breq	.+2      	; 0x588 <main+0x2c2>
     586:	c8 ce       	rjmp	.-624    	; 0x318 <main+0x52>
					xprintf(PSTR("%lu bytes written.\n"), p2);
     588:	00 d0       	rcall	.+0      	; 0x58a <main+0x2c4>
     58a:	00 d0       	rcall	.+0      	; 0x58c <main+0x2c6>
     58c:	00 d0       	rcall	.+0      	; 0x58e <main+0x2c8>
     58e:	22 ec       	ldi	r18, 0xC2	; 194
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	ed b7       	in	r30, 0x3d	; 61
     594:	fe b7       	in	r31, 0x3e	; 62
     596:	32 83       	std	Z+2, r19	; 0x02
     598:	21 83       	std	Z+1, r18	; 0x01
     59a:	8b 85       	ldd	r24, Y+11	; 0x0b
     59c:	9c 85       	ldd	r25, Y+12	; 0x0c
     59e:	ad 85       	ldd	r26, Y+13	; 0x0d
     5a0:	be 85       	ldd	r27, Y+14	; 0x0e
     5a2:	83 83       	std	Z+3, r24	; 0x03
     5a4:	94 83       	std	Z+4, r25	; 0x04
     5a6:	a5 83       	std	Z+5, r26	; 0x05
     5a8:	b6 83       	std	Z+6, r27	; 0x06
     5aa:	c1 db       	rcall	.-2174   	; 0xfffffd2e <__eeprom_end+0xff7efd2e>
     5ac:	2d b7       	in	r18, 0x3d	; 61
     5ae:	3e b7       	in	r19, 0x3e	; 62
     5b0:	2a 5f       	subi	r18, 0xFA	; 250
     5b2:	3f 4f       	sbci	r19, 0xFF	; 255
     5b4:	5a c0       	rjmp	.+180    	; 0x66a <main+0x3a4>
				break;

			case 'p' :	/* fp - Write console input to the file */
				xputs(PSTR("Type any line to write. A blank line finalize the write operation.\n"));
     5b6:	8e e7       	ldi	r24, 0x7E	; 126
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	77 db       	rcall	.-2322   	; 0xfffffcaa <__eeprom_end+0xff7efcaa>
				for (;;) {
					get_line(Line, sizeof(Line));
     5bc:	8b e6       	ldi	r24, 0x6B	; 107
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	60 e8       	ldi	r22, 0x80	; 128
     5c2:	55 de       	rcall	.-854    	; 0x26e <get_line>
					if (!Line[0]) break;
     5c4:	80 91 6b 00 	lds	r24, 0x006B
     5c8:	88 23       	and	r24, r24
     5ca:	99 f0       	breq	.+38     	; 0x5f2 <main+0x32c>
					strcat(Line, "\r\n");
     5cc:	8b e6       	ldi	r24, 0x6B	; 107
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	60 e6       	ldi	r22, 0x60	; 96
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	ed dc       	rcall	.-1574   	; 0xffffffb0 <__eeprom_end+0xff7effb0>
					res = pf_write(Line, strlen(Line), &w);	/* Write a line to the file */
     5d6:	f4 01       	movw	r30, r8
     5d8:	01 90       	ld	r0, Z+
     5da:	00 20       	and	r0, r0
     5dc:	e9 f7       	brne	.-6      	; 0x5d8 <main+0x312>
     5de:	31 97       	sbiw	r30, 0x01	; 1
     5e0:	eb 56       	subi	r30, 0x6B	; 107
     5e2:	f0 40       	sbci	r31, 0x00	; 0
     5e4:	8b e6       	ldi	r24, 0x6B	; 107
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	bf 01       	movw	r22, r30
     5ea:	a3 01       	movw	r20, r6
     5ec:	72 d7       	rcall	.+3812   	; 0x14d2 <pf_write>
					if (res) break;
     5ee:	88 23       	and	r24, r24
     5f0:	29 f3       	breq	.-54     	; 0x5bc <main+0x2f6>
				}
				res = pf_write(0, 0, &w);		/* Finalize the write process */
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	60 e0       	ldi	r22, 0x00	; 0
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	a3 01       	movw	r20, r6
     5fc:	6a d7       	rcall	.+3796   	; 0x14d2 <pf_write>
     5fe:	49 c0       	rjmp	.+146    	; 0x692 <main+0x3cc>
				put_rc(res);
				break;
#endif
#if _USE_LSEEK
			case 'e' :	/* fe - Move file pointer of the file */
				if (!xatoi(&ptr, &p1)) break;
     600:	c5 01       	movw	r24, r10
     602:	b2 01       	movw	r22, r4
     604:	f2 db       	rcall	.-2076   	; 0xfffffdea <__eeprom_end+0xff7efdea>
     606:	88 23       	and	r24, r24
     608:	09 f4       	brne	.+2      	; 0x60c <main+0x346>
     60a:	86 ce       	rjmp	.-756    	; 0x318 <main+0x52>
				res = pf_lseek(p1);
     60c:	6f 81       	ldd	r22, Y+7	; 0x07
     60e:	78 85       	ldd	r23, Y+8	; 0x08
     610:	89 85       	ldd	r24, Y+9	; 0x09
     612:	9a 85       	ldd	r25, Y+10	; 0x0a
     614:	9d d2       	rcall	.+1338   	; 0xb50 <pf_lseek>
     616:	18 2f       	mov	r17, r24
				put_rc(res);
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	b5 dd       	rcall	.-1174   	; 0x186 <put_rc>
				if (res == FR_OK)
     61c:	11 23       	and	r17, r17
     61e:	09 f0       	breq	.+2      	; 0x622 <main+0x35c>
     620:	7b ce       	rjmp	.-778    	; 0x318 <main+0x52>
					xprintf(PSTR("fptr = %lu(0x%lX)\n"), fs.fptr, fs.fptr);
     622:	61 96       	adiw	r28, 0x11	; 17
     624:	8c ad       	ldd	r24, Y+60	; 0x3c
     626:	9d ad       	ldd	r25, Y+61	; 0x3d
     628:	ae ad       	ldd	r26, Y+62	; 0x3e
     62a:	bf ad       	ldd	r27, Y+63	; 0x3f
     62c:	61 97       	sbiw	r28, 0x11	; 17
     62e:	ed b7       	in	r30, 0x3d	; 61
     630:	fe b7       	in	r31, 0x3e	; 62
     632:	3a 97       	sbiw	r30, 0x0a	; 10
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	fe bf       	out	0x3e, r31	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	ed bf       	out	0x3d, r30	; 61
     63e:	4d b7       	in	r20, 0x3d	; 61
     640:	5e b7       	in	r21, 0x3e	; 62
     642:	4f 5f       	subi	r20, 0xFF	; 255
     644:	5f 4f       	sbci	r21, 0xFF	; 255
     646:	2b e6       	ldi	r18, 0x6B	; 107
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	32 83       	std	Z+2, r19	; 0x02
     64c:	21 83       	std	Z+1, r18	; 0x01
     64e:	fa 01       	movw	r30, r20
     650:	82 83       	std	Z+2, r24	; 0x02
     652:	93 83       	std	Z+3, r25	; 0x03
     654:	a4 83       	std	Z+4, r26	; 0x04
     656:	b5 83       	std	Z+5, r27	; 0x05
     658:	86 83       	std	Z+6, r24	; 0x06
     65a:	97 83       	std	Z+7, r25	; 0x07
     65c:	a0 87       	std	Z+8, r26	; 0x08
     65e:	b1 87       	std	Z+9, r27	; 0x09
     660:	66 db       	rcall	.-2356   	; 0xfffffd2e <__eeprom_end+0xff7efd2e>
     662:	2d b7       	in	r18, 0x3d	; 61
     664:	3e b7       	in	r19, 0x3e	; 62
     666:	26 5f       	subi	r18, 0xF6	; 246
     668:	3f 4f       	sbci	r19, 0xFF	; 255
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	3e bf       	out	0x3e, r19	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	2d bf       	out	0x3d, r18	; 61
     674:	51 ce       	rjmp	.-862    	; 0x318 <main+0x52>
				break;
#endif
#if _USE_DIR
			case 'l' :	/* fl [<path>] - Directory listing */
				while (*ptr == ' ') ptr++;
     676:	31 96       	adiw	r30, 0x01	; 1
     678:	fa 83       	std	Y+2, r31	; 0x02
     67a:	e9 83       	std	Y+1, r30	; 0x01
     67c:	e9 81       	ldd	r30, Y+1	; 0x01
     67e:	fa 81       	ldd	r31, Y+2	; 0x02
     680:	80 81       	ld	r24, Z
     682:	80 32       	cpi	r24, 0x20	; 32
     684:	c1 f3       	breq	.-16     	; 0x676 <main+0x3b0>
				res = pf_opendir(&dir, ptr);
     686:	ce 01       	movw	r24, r28
     688:	0f 96       	adiw	r24, 0x0f	; 15
     68a:	bf 01       	movw	r22, r30
     68c:	4c d5       	rcall	.+2712   	; 0x1126 <pf_opendir>
				if (res) { put_rc(res); break; }
     68e:	88 23       	and	r24, r24
     690:	19 f0       	breq	.+6      	; 0x698 <main+0x3d2>
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	78 dd       	rcall	.-1296   	; 0x186 <put_rc>
     696:	40 ce       	rjmp	.-896    	; 0x318 <main+0x52>
				s1 = 0;
     698:	1c 82       	std	Y+4, r1	; 0x04
     69a:	1b 82       	std	Y+3, r1	; 0x03
				for(;;) {
					res = pf_readdir(&dir, &fno);
     69c:	ce 01       	movw	r24, r28
     69e:	0f 96       	adiw	r24, 0x0f	; 15
     6a0:	be 01       	movw	r22, r28
     6a2:	61 5e       	subi	r22, 0xE1	; 225
     6a4:	7f 4f       	sbci	r23, 0xFF	; 255
     6a6:	74 d3       	rcall	.+1768   	; 0xd90 <pf_readdir>
					if (res != FR_OK) { put_rc(res); break; }
     6a8:	88 23       	and	r24, r24
     6aa:	19 f0       	breq	.+6      	; 0x6b2 <main+0x3ec>
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	6b dd       	rcall	.-1322   	; 0x186 <put_rc>
     6b0:	4f c0       	rjmp	.+158    	; 0x750 <main+0x48a>
					if (!fno.fname[0]) break;
     6b2:	88 a5       	ldd	r24, Y+40	; 0x28
     6b4:	88 23       	and	r24, r24
     6b6:	09 f4       	brne	.+2      	; 0x6ba <main+0x3f4>
     6b8:	4b c0       	rjmp	.+150    	; 0x750 <main+0x48a>
					if (fno.fattrib & AM_DIR)
     6ba:	8f a1       	ldd	r24, Y+39	; 0x27
     6bc:	84 ff       	sbrs	r24, 4
     6be:	18 c0       	rjmp	.+48     	; 0x6f0 <main+0x42a>
						xprintf(PSTR("   <DIR>   %s\n"), fno.fname);
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <main+0x3fc>
     6c2:	00 d0       	rcall	.+0      	; 0x6c4 <main+0x3fe>
     6c4:	ec e5       	ldi	r30, 0x5C	; 92
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	ad b7       	in	r26, 0x3d	; 61
     6ca:	be b7       	in	r27, 0x3e	; 62
     6cc:	12 96       	adiw	r26, 0x02	; 2
     6ce:	fc 93       	st	X, r31
     6d0:	ee 93       	st	-X, r30
     6d2:	11 97       	sbiw	r26, 0x01	; 1
     6d4:	28 e2       	ldi	r18, 0x28	; 40
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	2c 0f       	add	r18, r28
     6da:	3d 1f       	adc	r19, r29
     6dc:	14 96       	adiw	r26, 0x04	; 4
     6de:	3c 93       	st	X, r19
     6e0:	2e 93       	st	-X, r18
     6e2:	13 97       	sbiw	r26, 0x03	; 3
     6e4:	24 db       	rcall	.-2488   	; 0xfffffd2e <__eeprom_end+0xff7efd2e>
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	2a c0       	rjmp	.+84     	; 0x744 <main+0x47e>
					else
						xprintf(PSTR("%9lu  %s\n"), fno.fsize, fno.fname);
     6f0:	8d b7       	in	r24, 0x3d	; 61
     6f2:	9e b7       	in	r25, 0x3e	; 62
     6f4:	08 97       	sbiw	r24, 0x08	; 8
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	9e bf       	out	0x3e, r25	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	8d bf       	out	0x3d, r24	; 61
     700:	ed b7       	in	r30, 0x3d	; 61
     702:	fe b7       	in	r31, 0x3e	; 62
     704:	31 96       	adiw	r30, 0x01	; 1
     706:	22 e5       	ldi	r18, 0x52	; 82
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	ad b7       	in	r26, 0x3d	; 61
     70c:	be b7       	in	r27, 0x3e	; 62
     70e:	12 96       	adiw	r26, 0x02	; 2
     710:	3c 93       	st	X, r19
     712:	2e 93       	st	-X, r18
     714:	11 97       	sbiw	r26, 0x01	; 1
     716:	8f 8d       	ldd	r24, Y+31	; 0x1f
     718:	98 a1       	ldd	r25, Y+32	; 0x20
     71a:	a9 a1       	ldd	r26, Y+33	; 0x21
     71c:	ba a1       	ldd	r27, Y+34	; 0x22
     71e:	82 83       	std	Z+2, r24	; 0x02
     720:	93 83       	std	Z+3, r25	; 0x03
     722:	a4 83       	std	Z+4, r26	; 0x04
     724:	b5 83       	std	Z+5, r27	; 0x05
     726:	88 e2       	ldi	r24, 0x28	; 40
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	8c 0f       	add	r24, r28
     72c:	9d 1f       	adc	r25, r29
     72e:	97 83       	std	Z+7, r25	; 0x07
     730:	86 83       	std	Z+6, r24	; 0x06
     732:	fd da       	rcall	.-2566   	; 0xfffffd2e <__eeprom_end+0xff7efd2e>
     734:	ad b7       	in	r26, 0x3d	; 61
     736:	be b7       	in	r27, 0x3e	; 62
     738:	18 96       	adiw	r26, 0x08	; 8
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	be bf       	out	0x3e, r27	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	ad bf       	out	0x3d, r26	; 61
					s1++;
     744:	8b 81       	ldd	r24, Y+3	; 0x03
     746:	9c 81       	ldd	r25, Y+4	; 0x04
     748:	01 96       	adiw	r24, 0x01	; 1
     74a:	9c 83       	std	Y+4, r25	; 0x04
     74c:	8b 83       	std	Y+3, r24	; 0x03
     74e:	a6 cf       	rjmp	.-180    	; 0x69c <main+0x3d6>
				}
				xprintf(PSTR("%u item(s)\n"), s1);
     750:	00 d0       	rcall	.+0      	; 0x752 <main+0x48c>
     752:	00 d0       	rcall	.+0      	; 0x754 <main+0x48e>
     754:	26 e4       	ldi	r18, 0x46	; 70
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	ed b7       	in	r30, 0x3d	; 61
     75a:	fe b7       	in	r31, 0x3e	; 62
     75c:	32 83       	std	Z+2, r19	; 0x02
     75e:	21 83       	std	Z+1, r18	; 0x01
     760:	8b 81       	ldd	r24, Y+3	; 0x03
     762:	9c 81       	ldd	r25, Y+4	; 0x04
     764:	94 83       	std	Z+4, r25	; 0x04
     766:	83 83       	std	Z+3, r24	; 0x03
     768:	e2 da       	rcall	.-2620   	; 0xfffffd2e <__eeprom_end+0xff7efd2e>
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	d2 cd       	rjmp	.-1116   	; 0x318 <main+0x52>

00000774 <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     774:	a0 e0       	ldi	r26, 0x00	; 0
     776:	b0 e0       	ldi	r27, 0x00	; 0
     778:	ef eb       	ldi	r30, 0xBF	; 191
     77a:	f3 e0       	ldi	r31, 0x03	; 3
     77c:	ec cb       	rjmp	.-2088   	; 0xffffff56 <__eeprom_end+0xff7eff56>
     77e:	6c 01       	movw	r12, r24
	CLUST clst;
	FATFS *fs = FatFs;
     780:	c0 91 64 00 	lds	r28, 0x0064
     784:	d0 91 65 00 	lds	r29, 0x0065


	dj->index = 0;
     788:	fc 01       	movw	r30, r24
     78a:	11 82       	std	Z+1, r1	; 0x01
     78c:	10 82       	st	Z, r1
	clst = dj->sclust;
     78e:	24 81       	ldd	r18, Z+4	; 0x04
     790:	35 81       	ldd	r19, Z+5	; 0x05
     792:	46 81       	ldd	r20, Z+6	; 0x06
     794:	57 81       	ldd	r21, Z+7	; 0x07
	if (clst == 1 || clst >= fs->max_clust)	/* Check start cluster range */
     796:	21 30       	cpi	r18, 0x01	; 1
     798:	31 05       	cpc	r19, r1
     79a:	41 05       	cpc	r20, r1
     79c:	51 05       	cpc	r21, r1
     79e:	09 f4       	brne	.+2      	; 0x7a2 <dir_rewind+0x2e>
     7a0:	5b c0       	rjmp	.+182    	; 0x858 <dir_rewind+0xe4>
     7a2:	88 85       	ldd	r24, Y+8	; 0x08
     7a4:	99 85       	ldd	r25, Y+9	; 0x09
     7a6:	aa 85       	ldd	r26, Y+10	; 0x0a
     7a8:	bb 85       	ldd	r27, Y+11	; 0x0b
     7aa:	28 17       	cp	r18, r24
     7ac:	39 07       	cpc	r19, r25
     7ae:	4a 07       	cpc	r20, r26
     7b0:	5b 07       	cpc	r21, r27
     7b2:	08 f0       	brcs	.+2      	; 0x7b6 <dir_rewind+0x42>
     7b4:	51 c0       	rjmp	.+162    	; 0x858 <dir_rewind+0xe4>
		return FR_DISK_ERR;
#if _FS_FAT32
	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     7b6:	21 15       	cp	r18, r1
     7b8:	31 05       	cpc	r19, r1
     7ba:	41 05       	cpc	r20, r1
     7bc:	51 05       	cpc	r21, r1
     7be:	39 f4       	brne	.+14     	; 0x7ce <dir_rewind+0x5a>
     7c0:	88 81       	ld	r24, Y
     7c2:	83 30       	cpi	r24, 0x03	; 3
     7c4:	21 f4       	brne	.+8      	; 0x7ce <dir_rewind+0x5a>
		clst = fs->dirbase;
     7c6:	28 89       	ldd	r18, Y+16	; 0x10
     7c8:	39 89       	ldd	r19, Y+17	; 0x11
     7ca:	4a 89       	ldd	r20, Y+18	; 0x12
     7cc:	5b 89       	ldd	r21, Y+19	; 0x13
#endif
	dj->clust = clst;						/* Current cluster */
     7ce:	f6 01       	movw	r30, r12
     7d0:	20 87       	std	Z+8, r18	; 0x08
     7d2:	31 87       	std	Z+9, r19	; 0x09
     7d4:	42 87       	std	Z+10, r20	; 0x0a
     7d6:	53 87       	std	Z+11, r21	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     7d8:	21 15       	cp	r18, r1
     7da:	31 05       	cpc	r19, r1
     7dc:	41 05       	cpc	r20, r1
     7de:	51 05       	cpc	r21, r1
     7e0:	79 f1       	breq	.+94     	; 0x840 <dir_rewind+0xcc>
)
{
	FATFS *fs = FatFs;


	clst -= 2;
     7e2:	8e ef       	ldi	r24, 0xFE	; 254
     7e4:	e8 2e       	mov	r14, r24
     7e6:	8f ef       	ldi	r24, 0xFF	; 255
     7e8:	f8 2e       	mov	r15, r24
     7ea:	8f ef       	ldi	r24, 0xFF	; 255
     7ec:	08 2f       	mov	r16, r24
     7ee:	8f ef       	ldi	r24, 0xFF	; 255
     7f0:	18 2f       	mov	r17, r24
     7f2:	e2 0e       	add	r14, r18
     7f4:	f3 1e       	adc	r15, r19
     7f6:	04 1f       	adc	r16, r20
     7f8:	15 1f       	adc	r17, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     7fa:	88 85       	ldd	r24, Y+8	; 0x08
     7fc:	99 85       	ldd	r25, Y+9	; 0x09
     7fe:	aa 85       	ldd	r26, Y+10	; 0x0a
     800:	bb 85       	ldd	r27, Y+11	; 0x0b
     802:	02 97       	sbiw	r24, 0x02	; 2
     804:	a1 09       	sbc	r26, r1
     806:	b1 09       	sbc	r27, r1
     808:	e8 16       	cp	r14, r24
     80a:	f9 06       	cpc	r15, r25
     80c:	0a 07       	cpc	r16, r26
     80e:	1b 07       	cpc	r17, r27
     810:	28 f0       	brcs	.+10     	; 0x81c <dir_rewind+0xa8>
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	40 e0       	ldi	r20, 0x00	; 0
     818:	50 e0       	ldi	r21, 0x00	; 0
     81a:	16 c0       	rjmp	.+44     	; 0x848 <dir_rewind+0xd4>
	return (DWORD)clst * fs->csize + fs->database;
     81c:	29 81       	ldd	r18, Y+1	; 0x01
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	c8 01       	movw	r24, r16
     826:	b7 01       	movw	r22, r14
     828:	51 db       	rcall	.-2398   	; 0xfffffecc <__eeprom_end+0xff7efecc>
     82a:	9b 01       	movw	r18, r22
     82c:	ac 01       	movw	r20, r24
     82e:	8c 89       	ldd	r24, Y+20	; 0x14
     830:	9d 89       	ldd	r25, Y+21	; 0x15
     832:	ae 89       	ldd	r26, Y+22	; 0x16
     834:	bf 89       	ldd	r27, Y+23	; 0x17
     836:	28 0f       	add	r18, r24
     838:	39 1f       	adc	r19, r25
     83a:	4a 1f       	adc	r20, r26
     83c:	5b 1f       	adc	r21, r27
     83e:	04 c0       	rjmp	.+8      	; 0x848 <dir_rewind+0xd4>
#if _FS_FAT32
	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = fs->dirbase;
#endif
	dj->clust = clst;						/* Current cluster */
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     840:	28 89       	ldd	r18, Y+16	; 0x10
     842:	39 89       	ldd	r19, Y+17	; 0x11
     844:	4a 89       	ldd	r20, Y+18	; 0x12
     846:	5b 89       	ldd	r21, Y+19	; 0x13
     848:	f6 01       	movw	r30, r12
     84a:	24 87       	std	Z+12, r18	; 0x0c
     84c:	35 87       	std	Z+13, r19	; 0x0d
     84e:	46 87       	std	Z+14, r20	; 0x0e
     850:	57 87       	std	Z+15, r21	; 0x0f
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	02 c0       	rjmp	.+4      	; 0x85c <dir_rewind+0xe8>

	return FR_OK;	/* Seek succeeded */
     858:	21 e0       	ldi	r18, 0x01	; 1
     85a:	30 e0       	ldi	r19, 0x00	; 0
}
     85c:	c9 01       	movw	r24, r18
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
     862:	e8 e0       	ldi	r30, 0x08	; 8
     864:	94 cb       	rjmp	.-2264   	; 0xffffff8e <__eeprom_end+0xff7eff8e>

00000866 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     866:	a4 e0       	ldi	r26, 0x04	; 4
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	e8 e3       	ldi	r30, 0x38	; 56
     86c:	f4 e0       	ldi	r31, 0x04	; 4
     86e:	6d cb       	rjmp	.-2342   	; 0xffffff4a <__eeprom_end+0xff7eff4a>
     870:	4b 01       	movw	r8, r22
     872:	5c 01       	movw	r10, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
     874:	60 90 64 00 	lds	r6, 0x0064
     878:	70 90 65 00 	lds	r7, 0x0065


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
     87c:	82 e0       	ldi	r24, 0x02	; 2
     87e:	88 16       	cp	r8, r24
     880:	91 04       	cpc	r9, r1
     882:	a1 04       	cpc	r10, r1
     884:	b1 04       	cpc	r11, r1
     886:	08 f4       	brcc	.+2      	; 0x88a <get_fat+0x24>
     888:	b0 c0       	rjmp	.+352    	; 0x9ea <get_fat+0x184>
     88a:	f3 01       	movw	r30, r6
     88c:	80 85       	ldd	r24, Z+8	; 0x08
     88e:	91 85       	ldd	r25, Z+9	; 0x09
     890:	a2 85       	ldd	r26, Z+10	; 0x0a
     892:	b3 85       	ldd	r27, Z+11	; 0x0b
     894:	88 16       	cp	r8, r24
     896:	99 06       	cpc	r9, r25
     898:	aa 06       	cpc	r10, r26
     89a:	bb 06       	cpc	r11, r27
     89c:	08 f0       	brcs	.+2      	; 0x8a0 <get_fat+0x3a>
     89e:	a5 c0       	rjmp	.+330    	; 0x9ea <get_fat+0x184>
		return 1;

	switch (fs->fs_type) {
     8a0:	80 81       	ld	r24, Z
     8a2:	82 30       	cpi	r24, 0x02	; 2
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <get_fat+0x42>
     8a6:	5d c0       	rjmp	.+186    	; 0x962 <get_fat+0xfc>
     8a8:	83 30       	cpi	r24, 0x03	; 3
     8aa:	09 f4       	brne	.+2      	; 0x8ae <get_fat+0x48>
     8ac:	78 c0       	rjmp	.+240    	; 0x99e <get_fat+0x138>
     8ae:	81 30       	cpi	r24, 0x01	; 1
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <get_fat+0x4e>
     8b2:	9b c0       	rjmp	.+310    	; 0x9ea <get_fat+0x184>
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
     8b4:	c4 01       	movw	r24, r8
     8b6:	96 95       	lsr	r25
     8b8:	87 95       	ror	r24
     8ba:	88 0d       	add	r24, r8
     8bc:	99 1d       	adc	r25, r9
		ofs = bc % 512; bc /= 512;
     8be:	9c 01       	movw	r18, r24
     8c0:	31 70       	andi	r19, 0x01	; 1
     8c2:	89 2f       	mov	r24, r25
     8c4:	99 27       	eor	r25, r25
     8c6:	86 95       	lsr	r24
     8c8:	6c 01       	movw	r12, r24
     8ca:	ee 24       	eor	r14, r14
     8cc:	ff 24       	eor	r15, r15
     8ce:	f3 01       	movw	r30, r6
     8d0:	44 85       	ldd	r20, Z+12	; 0x0c
     8d2:	55 85       	ldd	r21, Z+13	; 0x0d
     8d4:	66 85       	ldd	r22, Z+14	; 0x0e
     8d6:	77 85       	ldd	r23, Z+15	; 0x0f
     8d8:	ce 01       	movw	r24, r28
     8da:	01 96       	adiw	r24, 0x01	; 1
		if (ofs != 511) {
     8dc:	f1 e0       	ldi	r31, 0x01	; 1
     8de:	2f 3f       	cpi	r18, 0xFF	; 255
     8e0:	3f 07       	cpc	r19, r31
     8e2:	49 f0       	breq	.+18     	; 0x8f6 <get_fat+0x90>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
     8e4:	c4 0e       	add	r12, r20
     8e6:	d5 1e       	adc	r13, r21
     8e8:	e6 1e       	adc	r14, r22
     8ea:	f7 1e       	adc	r15, r23
     8ec:	b7 01       	movw	r22, r14
     8ee:	a6 01       	movw	r20, r12
     8f0:	02 e0       	ldi	r16, 0x02	; 2
     8f2:	10 e0       	ldi	r17, 0x00	; 0
     8f4:	1d c0       	rjmp	.+58     	; 0x930 <get_fat+0xca>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
     8f6:	4c 0d       	add	r20, r12
     8f8:	5d 1d       	adc	r21, r13
     8fa:	6e 1d       	adc	r22, r14
     8fc:	7f 1d       	adc	r23, r15
     8fe:	2f ef       	ldi	r18, 0xFF	; 255
     900:	31 e0       	ldi	r19, 0x01	; 1
     902:	01 e0       	ldi	r16, 0x01	; 1
     904:	10 e0       	ldi	r17, 0x00	; 0
     906:	4c d9       	rcall	.-3432   	; 0xfffffba0 <__eeprom_end+0xff7efba0>
     908:	89 2b       	or	r24, r25
     90a:	09 f0       	breq	.+2      	; 0x90e <get_fat+0xa8>
     90c:	6e c0       	rjmp	.+220    	; 0x9ea <get_fat+0x184>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
     90e:	f3 01       	movw	r30, r6
     910:	44 85       	ldd	r20, Z+12	; 0x0c
     912:	55 85       	ldd	r21, Z+13	; 0x0d
     914:	66 85       	ldd	r22, Z+14	; 0x0e
     916:	77 85       	ldd	r23, Z+15	; 0x0f
     918:	4f 5f       	subi	r20, 0xFF	; 255
     91a:	5f 4f       	sbci	r21, 0xFF	; 255
     91c:	6f 4f       	sbci	r22, 0xFF	; 255
     91e:	7f 4f       	sbci	r23, 0xFF	; 255
     920:	4c 0d       	add	r20, r12
     922:	5d 1d       	adc	r21, r13
     924:	6e 1d       	adc	r22, r14
     926:	7f 1d       	adc	r23, r15
     928:	ce 01       	movw	r24, r28
     92a:	02 96       	adiw	r24, 0x02	; 2
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	37 d9       	rcall	.-3474   	; 0xfffffba0 <__eeprom_end+0xff7efba0>
     932:	89 2b       	or	r24, r25
     934:	09 f0       	breq	.+2      	; 0x938 <get_fat+0xd2>
     936:	59 c0       	rjmp	.+178    	; 0x9ea <get_fat+0x184>
		}
		wc = LD_WORD(buf);
     938:	69 81       	ldd	r22, Y+1	; 0x01
     93a:	7a 81       	ldd	r23, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     93c:	c4 01       	movw	r24, r8
     93e:	81 70       	andi	r24, 0x01	; 1
     940:	90 70       	andi	r25, 0x00	; 0
     942:	89 2b       	or	r24, r25
     944:	39 f0       	breq	.+14     	; 0x954 <get_fat+0xee>
     946:	a4 e0       	ldi	r26, 0x04	; 4
     948:	76 95       	lsr	r23
     94a:	67 95       	ror	r22
     94c:	aa 95       	dec	r26
     94e:	e1 f7       	brne	.-8      	; 0x948 <get_fat+0xe2>
     950:	9b 01       	movw	r18, r22
     952:	22 c0       	rjmp	.+68     	; 0x998 <get_fat+0x132>
     954:	9b 01       	movw	r18, r22
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	3f 70       	andi	r19, 0x0F	; 15
     95c:	40 70       	andi	r20, 0x00	; 0
     95e:	50 70       	andi	r21, 0x00	; 0
     960:	48 c0       	rjmp	.+144    	; 0x9f2 <get_fat+0x18c>

	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
     962:	77 27       	eor	r23, r23
     964:	6b 2d       	mov	r22, r11
     966:	5a 2d       	mov	r21, r10
     968:	49 2d       	mov	r20, r9
     96a:	f3 01       	movw	r30, r6
     96c:	84 85       	ldd	r24, Z+12	; 0x0c
     96e:	95 85       	ldd	r25, Z+13	; 0x0d
     970:	a6 85       	ldd	r26, Z+14	; 0x0e
     972:	b7 85       	ldd	r27, Z+15	; 0x0f
     974:	48 0f       	add	r20, r24
     976:	59 1f       	adc	r21, r25
     978:	6a 1f       	adc	r22, r26
     97a:	7b 1f       	adc	r23, r27
     97c:	94 01       	movw	r18, r8
     97e:	30 70       	andi	r19, 0x00	; 0
     980:	22 0f       	add	r18, r18
     982:	33 1f       	adc	r19, r19
     984:	ce 01       	movw	r24, r28
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	02 e0       	ldi	r16, 0x02	; 2
     98a:	10 e0       	ldi	r17, 0x00	; 0
     98c:	09 d9       	rcall	.-3566   	; 0xfffffba0 <__eeprom_end+0xff7efba0>
     98e:	89 2b       	or	r24, r25
     990:	61 f5       	brne	.+88     	; 0x9ea <get_fat+0x184>
		return LD_WORD(buf);
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	9a 81       	ldd	r25, Y+2	; 0x02
     996:	9c 01       	movw	r18, r24
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	50 e0       	ldi	r21, 0x00	; 0
     99c:	2a c0       	rjmp	.+84     	; 0x9f2 <get_fat+0x18c>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
     99e:	b5 01       	movw	r22, r10
     9a0:	a4 01       	movw	r20, r8
     9a2:	27 e0       	ldi	r18, 0x07	; 7
     9a4:	76 95       	lsr	r23
     9a6:	67 95       	ror	r22
     9a8:	57 95       	ror	r21
     9aa:	47 95       	ror	r20
     9ac:	2a 95       	dec	r18
     9ae:	d1 f7       	brne	.-12     	; 0x9a4 <get_fat+0x13e>
     9b0:	f3 01       	movw	r30, r6
     9b2:	84 85       	ldd	r24, Z+12	; 0x0c
     9b4:	95 85       	ldd	r25, Z+13	; 0x0d
     9b6:	a6 85       	ldd	r26, Z+14	; 0x0e
     9b8:	b7 85       	ldd	r27, Z+15	; 0x0f
     9ba:	48 0f       	add	r20, r24
     9bc:	59 1f       	adc	r21, r25
     9be:	6a 1f       	adc	r22, r26
     9c0:	7b 1f       	adc	r23, r27
     9c2:	94 01       	movw	r18, r8
     9c4:	2f 77       	andi	r18, 0x7F	; 127
     9c6:	30 70       	andi	r19, 0x00	; 0
     9c8:	22 0f       	add	r18, r18
     9ca:	33 1f       	adc	r19, r19
     9cc:	22 0f       	add	r18, r18
     9ce:	33 1f       	adc	r19, r19
     9d0:	ce 01       	movw	r24, r28
     9d2:	01 96       	adiw	r24, 0x01	; 1
     9d4:	04 e0       	ldi	r16, 0x04	; 4
     9d6:	10 e0       	ldi	r17, 0x00	; 0
     9d8:	e3 d8       	rcall	.-3642   	; 0xfffffba0 <__eeprom_end+0xff7efba0>
     9da:	89 2b       	or	r24, r25
     9dc:	31 f4       	brne	.+12     	; 0x9ea <get_fat+0x184>
		return LD_DWORD(buf) & 0x0FFFFFFF;
     9de:	29 81       	ldd	r18, Y+1	; 0x01
     9e0:	3a 81       	ldd	r19, Y+2	; 0x02
     9e2:	4b 81       	ldd	r20, Y+3	; 0x03
     9e4:	5c 81       	ldd	r21, Y+4	; 0x04
     9e6:	5f 70       	andi	r21, 0x0F	; 15
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <get_fat+0x18c>
     9ea:	21 e0       	ldi	r18, 0x01	; 1
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	24 96       	adiw	r28, 0x04	; 4
     9f8:	ee e0       	ldi	r30, 0x0E	; 14
     9fa:	c3 ca       	rjmp	.-2682   	; 0xffffff82 <__eeprom_end+0xff7eff82>

000009fc <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	e3 e0       	ldi	r30, 0x03	; 3
     a02:	f5 e0       	ldi	r31, 0x05	; 5
     a04:	a6 ca       	rjmp	.-2740   	; 0xffffff52 <__eeprom_end+0xff7eff52>
     a06:	5c 01       	movw	r10, r24
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
     a08:	c0 91 64 00 	lds	r28, 0x0064
     a0c:	d0 91 65 00 	lds	r29, 0x0065


	i = dj->index + 1;
     a10:	fc 01       	movw	r30, r24
     a12:	c0 80       	ld	r12, Z
     a14:	d1 80       	ldd	r13, Z+1	; 0x01
     a16:	08 94       	sec
     a18:	c1 1c       	adc	r12, r1
     a1a:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     a1c:	c1 14       	cp	r12, r1
     a1e:	d1 04       	cpc	r13, r1
     a20:	09 f4       	brne	.+2      	; 0xa24 <dir_next+0x28>
     a22:	8f c0       	rjmp	.+286    	; 0xb42 <dir_next+0x146>
     a24:	24 85       	ldd	r18, Z+12	; 0x0c
     a26:	35 85       	ldd	r19, Z+13	; 0x0d
     a28:	46 85       	ldd	r20, Z+14	; 0x0e
     a2a:	57 85       	ldd	r21, Z+15	; 0x0f
     a2c:	21 15       	cp	r18, r1
     a2e:	31 05       	cpc	r19, r1
     a30:	41 05       	cpc	r20, r1
     a32:	51 05       	cpc	r21, r1
     a34:	09 f4       	brne	.+2      	; 0xa38 <dir_next+0x3c>
     a36:	85 c0       	rjmp	.+266    	; 0xb42 <dir_next+0x146>
		return FR_NO_FILE;

	if (!(i & (16-1))) {	/* Sector changed? */
     a38:	c6 01       	movw	r24, r12
     a3a:	8f 70       	andi	r24, 0x0F	; 15
     a3c:	90 70       	andi	r25, 0x00	; 0
     a3e:	89 2b       	or	r24, r25
     a40:	09 f0       	breq	.+2      	; 0xa44 <dir_next+0x48>
     a42:	79 c0       	rjmp	.+242    	; 0xb36 <dir_next+0x13a>
		dj->sect++;			/* Next sector */
     a44:	2f 5f       	subi	r18, 0xFF	; 255
     a46:	3f 4f       	sbci	r19, 0xFF	; 255
     a48:	4f 4f       	sbci	r20, 0xFF	; 255
     a4a:	5f 4f       	sbci	r21, 0xFF	; 255
     a4c:	24 87       	std	Z+12, r18	; 0x0c
     a4e:	35 87       	std	Z+13, r19	; 0x0d
     a50:	46 87       	std	Z+14, r20	; 0x0e
     a52:	57 87       	std	Z+15, r21	; 0x0f

		if (dj->clust == 0) {	/* Static table */
     a54:	40 85       	ldd	r20, Z+8	; 0x08
     a56:	51 85       	ldd	r21, Z+9	; 0x09
     a58:	62 85       	ldd	r22, Z+10	; 0x0a
     a5a:	73 85       	ldd	r23, Z+11	; 0x0b
     a5c:	41 15       	cp	r20, r1
     a5e:	51 05       	cpc	r21, r1
     a60:	61 05       	cpc	r22, r1
     a62:	71 05       	cpc	r23, r1
     a64:	39 f4       	brne	.+14     	; 0xa74 <dir_next+0x78>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
     a66:	8c 81       	ldd	r24, Y+4	; 0x04
     a68:	9d 81       	ldd	r25, Y+5	; 0x05
     a6a:	c8 16       	cp	r12, r24
     a6c:	d9 06       	cpc	r13, r25
     a6e:	08 f4       	brcc	.+2      	; 0xa72 <dir_next+0x76>
     a70:	62 c0       	rjmp	.+196    	; 0xb36 <dir_next+0x13a>
     a72:	67 c0       	rjmp	.+206    	; 0xb42 <dir_next+0x146>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
     a74:	89 81       	ldd	r24, Y+1	; 0x01
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	96 01       	movw	r18, r12
     a7c:	e4 e0       	ldi	r30, 0x04	; 4
     a7e:	36 95       	lsr	r19
     a80:	27 95       	ror	r18
     a82:	ea 95       	dec	r30
     a84:	e1 f7       	brne	.-8      	; 0xa7e <dir_next+0x82>
     a86:	82 23       	and	r24, r18
     a88:	93 23       	and	r25, r19
     a8a:	89 2b       	or	r24, r25
     a8c:	09 f0       	breq	.+2      	; 0xa90 <dir_next+0x94>
     a8e:	53 c0       	rjmp	.+166    	; 0xb36 <dir_next+0x13a>
				clst = get_fat(dj->clust);		/* Get next cluster */
     a90:	cb 01       	movw	r24, r22
     a92:	ba 01       	movw	r22, r20
     a94:	e8 de       	rcall	.-560    	; 0x866 <get_fat>
     a96:	9b 01       	movw	r18, r22
     a98:	ac 01       	movw	r20, r24
				if (clst <= 1) return FR_DISK_ERR;
     a9a:	62 30       	cpi	r22, 0x02	; 2
     a9c:	71 05       	cpc	r23, r1
     a9e:	81 05       	cpc	r24, r1
     aa0:	91 05       	cpc	r25, r1
     aa2:	18 f4       	brcc	.+6      	; 0xaaa <dir_next+0xae>
     aa4:	21 e0       	ldi	r18, 0x01	; 1
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	4e c0       	rjmp	.+156    	; 0xb46 <dir_next+0x14a>
				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
     aaa:	88 85       	ldd	r24, Y+8	; 0x08
     aac:	99 85       	ldd	r25, Y+9	; 0x09
     aae:	aa 85       	ldd	r26, Y+10	; 0x0a
     ab0:	bb 85       	ldd	r27, Y+11	; 0x0b
     ab2:	28 17       	cp	r18, r24
     ab4:	39 07       	cpc	r19, r25
     ab6:	4a 07       	cpc	r20, r26
     ab8:	5b 07       	cpc	r21, r27
     aba:	08 f0       	brcs	.+2      	; 0xabe <dir_next+0xc2>
     abc:	42 c0       	rjmp	.+132    	; 0xb42 <dir_next+0x146>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
     abe:	f5 01       	movw	r30, r10
     ac0:	20 87       	std	Z+8, r18	; 0x08
     ac2:	31 87       	std	Z+9, r19	; 0x09
     ac4:	42 87       	std	Z+10, r20	; 0x0a
     ac6:	53 87       	std	Z+11, r21	; 0x0b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
     ac8:	c0 91 64 00 	lds	r28, 0x0064
     acc:	d0 91 65 00 	lds	r29, 0x0065


	clst -= 2;
     ad0:	8e ef       	ldi	r24, 0xFE	; 254
     ad2:	e8 2e       	mov	r14, r24
     ad4:	8f ef       	ldi	r24, 0xFF	; 255
     ad6:	f8 2e       	mov	r15, r24
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	08 2f       	mov	r16, r24
     adc:	8f ef       	ldi	r24, 0xFF	; 255
     ade:	18 2f       	mov	r17, r24
     ae0:	e2 0e       	add	r14, r18
     ae2:	f3 1e       	adc	r15, r19
     ae4:	04 1f       	adc	r16, r20
     ae6:	15 1f       	adc	r17, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     ae8:	88 85       	ldd	r24, Y+8	; 0x08
     aea:	99 85       	ldd	r25, Y+9	; 0x09
     aec:	aa 85       	ldd	r26, Y+10	; 0x0a
     aee:	bb 85       	ldd	r27, Y+11	; 0x0b
     af0:	02 97       	sbiw	r24, 0x02	; 2
     af2:	a1 09       	sbc	r26, r1
     af4:	b1 09       	sbc	r27, r1
     af6:	e8 16       	cp	r14, r24
     af8:	f9 06       	cpc	r15, r25
     afa:	0a 07       	cpc	r16, r26
     afc:	1b 07       	cpc	r17, r27
     afe:	28 f0       	brcs	.+10     	; 0xb0a <dir_next+0x10e>
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	11 c0       	rjmp	.+34     	; 0xb2c <dir_next+0x130>
	return (DWORD)clst * fs->csize + fs->database;
     b0a:	29 81       	ldd	r18, Y+1	; 0x01
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	c8 01       	movw	r24, r16
     b14:	b7 01       	movw	r22, r14
     b16:	da d9       	rcall	.-3148   	; 0xfffffecc <__eeprom_end+0xff7efecc>
     b18:	9b 01       	movw	r18, r22
     b1a:	ac 01       	movw	r20, r24
     b1c:	8c 89       	ldd	r24, Y+20	; 0x14
     b1e:	9d 89       	ldd	r25, Y+21	; 0x15
     b20:	ae 89       	ldd	r26, Y+22	; 0x16
     b22:	bf 89       	ldd	r27, Y+23	; 0x17
     b24:	28 0f       	add	r18, r24
     b26:	39 1f       	adc	r19, r25
     b28:	4a 1f       	adc	r20, r26
     b2a:	5b 1f       	adc	r21, r27
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(clst);
     b2c:	f5 01       	movw	r30, r10
     b2e:	24 87       	std	Z+12, r18	; 0x0c
     b30:	35 87       	std	Z+13, r19	; 0x0d
     b32:	46 87       	std	Z+14, r20	; 0x0e
     b34:	57 87       	std	Z+15, r21	; 0x0f
			}
		}
	}

	dj->index = i;
     b36:	f5 01       	movw	r30, r10
     b38:	d1 82       	std	Z+1, r13	; 0x01
     b3a:	c0 82       	st	Z, r12
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <dir_next+0x14a>

	return FR_OK;
     b42:	23 e0       	ldi	r18, 0x03	; 3
     b44:	30 e0       	ldi	r19, 0x00	; 0
}
     b46:	c9 01       	movw	r24, r18
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
     b4c:	ea e0       	ldi	r30, 0x0A	; 10
     b4e:	1d ca       	rjmp	.-3014   	; 0xffffff8a <__eeprom_end+0xff7eff8a>

00000b50 <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	ed ea       	ldi	r30, 0xAD	; 173
     b56:	f5 e0       	ldi	r31, 0x05	; 5
     b58:	f4 c9       	rjmp	.-3096   	; 0xffffff42 <__eeprom_end+0xff7eff42>
     b5a:	e8 2f       	mov	r30, r24
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
     b5c:	c0 91 64 00 	lds	r28, 0x0064
     b60:	d0 91 65 00 	lds	r29, 0x0065


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     b64:	20 97       	sbiw	r28, 0x00	; 0
     b66:	19 f4       	brne	.+6      	; 0xb6e <pf_lseek+0x1e>
     b68:	26 e0       	ldi	r18, 0x06	; 6
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	0c c1       	rjmp	.+536    	; 0xd86 <pf_lseek+0x236>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
     b6e:	8a 81       	ldd	r24, Y+2	; 0x02
     b70:	80 fd       	sbrc	r24, 0
     b72:	03 c0       	rjmp	.+6      	; 0xb7a <pf_lseek+0x2a>
     b74:	25 e0       	ldi	r18, 0x05	; 5
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	06 c1       	rjmp	.+524    	; 0xd86 <pf_lseek+0x236>
     b7a:	ac 8c       	ldd	r10, Y+28	; 0x1c
     b7c:	bd 8c       	ldd	r11, Y+29	; 0x1d
     b7e:	ce 8c       	ldd	r12, Y+30	; 0x1e
     b80:	df 8c       	ldd	r13, Y+31	; 0x1f
     b82:	4e 2f       	mov	r20, r30
     b84:	59 2f       	mov	r21, r25
     b86:	cb 01       	movw	r24, r22
     b88:	da 01       	movw	r26, r20
     b8a:	3c 01       	movw	r6, r24
     b8c:	4d 01       	movw	r8, r26
     b8e:	a6 14       	cp	r10, r6
     b90:	b7 04       	cpc	r11, r7
     b92:	c8 04       	cpc	r12, r8
     b94:	d9 04       	cpc	r13, r9
     b96:	10 f4       	brcc	.+4      	; 0xb9c <pf_lseek+0x4c>
     b98:	35 01       	movw	r6, r10
     b9a:	46 01       	movw	r8, r12
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
     b9c:	28 8d       	ldd	r18, Y+24	; 0x18
     b9e:	39 8d       	ldd	r19, Y+25	; 0x19
     ba0:	4a 8d       	ldd	r20, Y+26	; 0x1a
     ba2:	5b 8d       	ldd	r21, Y+27	; 0x1b
	fs->fptr = 0;
     ba4:	18 8e       	std	Y+24, r1	; 0x18
     ba6:	19 8e       	std	Y+25, r1	; 0x19
     ba8:	1a 8e       	std	Y+26, r1	; 0x1a
     baa:	1b 8e       	std	Y+27, r1	; 0x1b
	if (ofs > 0) {
     bac:	61 14       	cp	r6, r1
     bae:	71 04       	cpc	r7, r1
     bb0:	81 04       	cpc	r8, r1
     bb2:	91 04       	cpc	r9, r1
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <pf_lseek+0x68>
     bb6:	e5 c0       	rjmp	.+458    	; 0xd82 <pf_lseek+0x232>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	a8 2e       	mov	r10, r24
     bbc:	bb 24       	eor	r11, r11
     bbe:	cc 24       	eor	r12, r12
     bc0:	dd 24       	eor	r13, r13
     bc2:	99 e0       	ldi	r25, 0x09	; 9
     bc4:	aa 0c       	add	r10, r10
     bc6:	bb 1c       	adc	r11, r11
     bc8:	cc 1c       	adc	r12, r12
     bca:	dd 1c       	adc	r13, r13
     bcc:	9a 95       	dec	r25
     bce:	d1 f7       	brne	.-12     	; 0xbc4 <pf_lseek+0x74>
		if (ifptr > 0 &&
     bd0:	21 15       	cp	r18, r1
     bd2:	31 05       	cpc	r19, r1
     bd4:	41 05       	cpc	r20, r1
     bd6:	51 05       	cpc	r21, r1
     bd8:	a1 f1       	breq	.+104    	; 0xc42 <pf_lseek+0xf2>
     bda:	19 01       	movw	r2, r18
     bdc:	2a 01       	movw	r4, r20
     bde:	08 94       	sec
     be0:	21 08       	sbc	r2, r1
     be2:	31 08       	sbc	r3, r1
     be4:	41 08       	sbc	r4, r1
     be6:	51 08       	sbc	r5, r1
     be8:	c4 01       	movw	r24, r8
     bea:	b3 01       	movw	r22, r6
     bec:	61 50       	subi	r22, 0x01	; 1
     bee:	70 40       	sbci	r23, 0x00	; 0
     bf0:	80 40       	sbci	r24, 0x00	; 0
     bf2:	90 40       	sbci	r25, 0x00	; 0
     bf4:	a6 01       	movw	r20, r12
     bf6:	95 01       	movw	r18, r10
     bf8:	82 d9       	rcall	.-3324   	; 0xfffffefe <__eeprom_end+0xff7efefe>
     bfa:	79 01       	movw	r14, r18
     bfc:	8a 01       	movw	r16, r20
     bfe:	c2 01       	movw	r24, r4
     c00:	b1 01       	movw	r22, r2
     c02:	a6 01       	movw	r20, r12
     c04:	95 01       	movw	r18, r10
     c06:	7b d9       	rcall	.-3338   	; 0xfffffefe <__eeprom_end+0xff7efefe>
     c08:	e2 16       	cp	r14, r18
     c0a:	f3 06       	cpc	r15, r19
     c0c:	04 07       	cpc	r16, r20
     c0e:	15 07       	cpc	r17, r21
     c10:	c0 f0       	brcs	.+48     	; 0xc42 <pf_lseek+0xf2>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
     c12:	88 27       	eor	r24, r24
     c14:	99 27       	eor	r25, r25
     c16:	dc 01       	movw	r26, r24
     c18:	8a 19       	sub	r24, r10
     c1a:	9b 09       	sbc	r25, r11
     c1c:	ac 09       	sbc	r26, r12
     c1e:	bd 09       	sbc	r27, r13
     c20:	82 21       	and	r24, r2
     c22:	93 21       	and	r25, r3
     c24:	a4 21       	and	r26, r4
     c26:	b5 21       	and	r27, r5
     c28:	88 8f       	std	Y+24, r24	; 0x18
     c2a:	99 8f       	std	Y+25, r25	; 0x19
     c2c:	aa 8f       	std	Y+26, r26	; 0x1a
     c2e:	bb 8f       	std	Y+27, r27	; 0x1b
			ofs -= fs->fptr;
     c30:	68 1a       	sub	r6, r24
     c32:	79 0a       	sbc	r7, r25
     c34:	8a 0a       	sbc	r8, r26
     c36:	9b 0a       	sbc	r9, r27
			clst = fs->curr_clust;
     c38:	2c a1       	ldd	r18, Y+36	; 0x24
     c3a:	3d a1       	ldd	r19, Y+37	; 0x25
     c3c:	4e a1       	ldd	r20, Y+38	; 0x26
     c3e:	5f a1       	ldd	r21, Y+39	; 0x27
     c40:	32 c0       	rjmp	.+100    	; 0xca6 <pf_lseek+0x156>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
     c42:	28 a1       	ldd	r18, Y+32	; 0x20
     c44:	39 a1       	ldd	r19, Y+33	; 0x21
     c46:	4a a1       	ldd	r20, Y+34	; 0x22
     c48:	5b a1       	ldd	r21, Y+35	; 0x23
			fs->curr_clust = clst;
     c4a:	2c a3       	std	Y+36, r18	; 0x24
     c4c:	3d a3       	std	Y+37, r19	; 0x25
     c4e:	4e a3       	std	Y+38, r20	; 0x26
     c50:	5f a3       	std	Y+39, r21	; 0x27
     c52:	29 c0       	rjmp	.+82     	; 0xca6 <pf_lseek+0x156>
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
     c54:	ca 01       	movw	r24, r20
     c56:	b9 01       	movw	r22, r18
     c58:	06 de       	rcall	.-1012   	; 0x866 <get_fat>
     c5a:	9b 01       	movw	r18, r22
     c5c:	ac 01       	movw	r20, r24
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
     c5e:	62 30       	cpi	r22, 0x02	; 2
     c60:	71 05       	cpc	r23, r1
     c62:	81 05       	cpc	r24, r1
     c64:	91 05       	cpc	r25, r1
     c66:	08 f4       	brcc	.+2      	; 0xc6a <pf_lseek+0x11a>
     c68:	88 c0       	rjmp	.+272    	; 0xd7a <pf_lseek+0x22a>
     c6a:	88 85       	ldd	r24, Y+8	; 0x08
     c6c:	99 85       	ldd	r25, Y+9	; 0x09
     c6e:	aa 85       	ldd	r26, Y+10	; 0x0a
     c70:	bb 85       	ldd	r27, Y+11	; 0x0b
     c72:	28 17       	cp	r18, r24
     c74:	39 07       	cpc	r19, r25
     c76:	4a 07       	cpc	r20, r26
     c78:	5b 07       	cpc	r21, r27
     c7a:	08 f0       	brcs	.+2      	; 0xc7e <pf_lseek+0x12e>
     c7c:	7e c0       	rjmp	.+252    	; 0xd7a <pf_lseek+0x22a>
			fs->curr_clust = clst;
     c7e:	2c a3       	std	Y+36, r18	; 0x24
     c80:	3d a3       	std	Y+37, r19	; 0x25
     c82:	4e a3       	std	Y+38, r20	; 0x26
     c84:	5f a3       	std	Y+39, r21	; 0x27
			fs->fptr += bcs;
     c86:	88 8d       	ldd	r24, Y+24	; 0x18
     c88:	99 8d       	ldd	r25, Y+25	; 0x19
     c8a:	aa 8d       	ldd	r26, Y+26	; 0x1a
     c8c:	bb 8d       	ldd	r27, Y+27	; 0x1b
     c8e:	8a 0d       	add	r24, r10
     c90:	9b 1d       	adc	r25, r11
     c92:	ac 1d       	adc	r26, r12
     c94:	bd 1d       	adc	r27, r13
     c96:	88 8f       	std	Y+24, r24	; 0x18
     c98:	99 8f       	std	Y+25, r25	; 0x19
     c9a:	aa 8f       	std	Y+26, r26	; 0x1a
     c9c:	bb 8f       	std	Y+27, r27	; 0x1b
			ofs -= bcs;
     c9e:	6a 18       	sub	r6, r10
     ca0:	7b 08       	sbc	r7, r11
     ca2:	8c 08       	sbc	r8, r12
     ca4:	9d 08       	sbc	r9, r13
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
     ca6:	a6 14       	cp	r10, r6
     ca8:	b7 04       	cpc	r11, r7
     caa:	c8 04       	cpc	r12, r8
     cac:	d9 04       	cpc	r13, r9
     cae:	90 f2       	brcs	.-92     	; 0xc54 <pf_lseek+0x104>
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
     cb0:	88 8d       	ldd	r24, Y+24	; 0x18
     cb2:	99 8d       	ldd	r25, Y+25	; 0x19
     cb4:	aa 8d       	ldd	r26, Y+26	; 0x1a
     cb6:	bb 8d       	ldd	r27, Y+27	; 0x1b
     cb8:	86 0d       	add	r24, r6
     cba:	97 1d       	adc	r25, r7
     cbc:	a8 1d       	adc	r26, r8
     cbe:	b9 1d       	adc	r27, r9
     cc0:	88 8f       	std	Y+24, r24	; 0x18
     cc2:	99 8f       	std	Y+25, r25	; 0x19
     cc4:	aa 8f       	std	Y+26, r26	; 0x1a
     cc6:	bb 8f       	std	Y+27, r27	; 0x1b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
     cc8:	00 91 64 00 	lds	r16, 0x0064
     ccc:	10 91 65 00 	lds	r17, 0x0065


	clst -= 2;
     cd0:	8e ef       	ldi	r24, 0xFE	; 254
     cd2:	a8 2e       	mov	r10, r24
     cd4:	8f ef       	ldi	r24, 0xFF	; 255
     cd6:	b8 2e       	mov	r11, r24
     cd8:	8f ef       	ldi	r24, 0xFF	; 255
     cda:	c8 2e       	mov	r12, r24
     cdc:	8f ef       	ldi	r24, 0xFF	; 255
     cde:	d8 2e       	mov	r13, r24
     ce0:	a2 0e       	add	r10, r18
     ce2:	b3 1e       	adc	r11, r19
     ce4:	c4 1e       	adc	r12, r20
     ce6:	d5 1e       	adc	r13, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     ce8:	f8 01       	movw	r30, r16
     cea:	80 85       	ldd	r24, Z+8	; 0x08
     cec:	91 85       	ldd	r25, Z+9	; 0x09
     cee:	a2 85       	ldd	r26, Z+10	; 0x0a
     cf0:	b3 85       	ldd	r27, Z+11	; 0x0b
     cf2:	02 97       	sbiw	r24, 0x02	; 2
     cf4:	a1 09       	sbc	r26, r1
     cf6:	b1 09       	sbc	r27, r1
     cf8:	a8 16       	cp	r10, r24
     cfa:	b9 06       	cpc	r11, r25
     cfc:	ca 06       	cpc	r12, r26
     cfe:	db 06       	cpc	r13, r27
     d00:	e0 f5       	brcc	.+120    	; 0xd7a <pf_lseek+0x22a>
	return (DWORD)clst * fs->csize + fs->database;
     d02:	21 81       	ldd	r18, Z+1	; 0x01
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	c6 01       	movw	r24, r12
     d0c:	b5 01       	movw	r22, r10
     d0e:	de d8       	rcall	.-3652   	; 0xfffffecc <__eeprom_end+0xff7efecc>
     d10:	9b 01       	movw	r18, r22
     d12:	ac 01       	movw	r20, r24
     d14:	f8 01       	movw	r30, r16
     d16:	84 89       	ldd	r24, Z+20	; 0x14
     d18:	95 89       	ldd	r25, Z+21	; 0x15
     d1a:	a6 89       	ldd	r26, Z+22	; 0x16
     d1c:	b7 89       	ldd	r27, Z+23	; 0x17
     d1e:	28 0f       	add	r18, r24
     d20:	39 1f       	adc	r19, r25
     d22:	4a 1f       	adc	r20, r26
     d24:	5b 1f       	adc	r21, r27
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
     d26:	21 15       	cp	r18, r1
     d28:	31 05       	cpc	r19, r1
     d2a:	41 05       	cpc	r20, r1
     d2c:	51 05       	cpc	r21, r1
     d2e:	29 f1       	breq	.+74     	; 0xd7a <pf_lseek+0x22a>
		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
     d30:	d4 01       	movw	r26, r8
     d32:	c3 01       	movw	r24, r6
     d34:	19 e0       	ldi	r17, 0x09	; 9
     d36:	b6 95       	lsr	r27
     d38:	a7 95       	ror	r26
     d3a:	97 95       	ror	r25
     d3c:	87 95       	ror	r24
     d3e:	1a 95       	dec	r17
     d40:	d1 f7       	brne	.-12     	; 0xd36 <pf_lseek+0x1e6>
     d42:	98 2f       	mov	r25, r24
     d44:	8b 83       	std	Y+3, r24	; 0x03
		if (ofs % 512)
     d46:	ff ef       	ldi	r31, 0xFF	; 255
     d48:	ef 2e       	mov	r14, r31
     d4a:	f1 e0       	ldi	r31, 0x01	; 1
     d4c:	ff 2e       	mov	r15, r31
     d4e:	01 2d       	mov	r16, r1
     d50:	11 2d       	mov	r17, r1
     d52:	6e 20       	and	r6, r14
     d54:	7f 20       	and	r7, r15
     d56:	80 22       	and	r8, r16
     d58:	91 22       	and	r9, r17
     d5a:	61 14       	cp	r6, r1
     d5c:	71 04       	cpc	r7, r1
     d5e:	81 04       	cpc	r8, r1
     d60:	91 04       	cpc	r9, r1
     d62:	79 f0       	breq	.+30     	; 0xd82 <pf_lseek+0x232>
			fs->dsect = sect + fs->csect++;
     d64:	28 0f       	add	r18, r24
     d66:	31 1d       	adc	r19, r1
     d68:	41 1d       	adc	r20, r1
     d6a:	51 1d       	adc	r21, r1
     d6c:	28 a7       	std	Y+40, r18	; 0x28
     d6e:	39 a7       	std	Y+41, r19	; 0x29
     d70:	4a a7       	std	Y+42, r20	; 0x2a
     d72:	5b a7       	std	Y+43, r21	; 0x2b
     d74:	9f 5f       	subi	r25, 0xFF	; 255
     d76:	9b 83       	std	Y+3, r25	; 0x03
     d78:	04 c0       	rjmp	.+8      	; 0xd82 <pf_lseek+0x232>
	}

	return FR_OK;

fe_abort:
	fs->flag = 0;
     d7a:	1a 82       	std	Y+2, r1	; 0x02
     d7c:	21 e0       	ldi	r18, 0x01	; 1
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <pf_lseek+0x236>
	return FR_DISK_ERR;
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
}
     d86:	c9 01       	movw	r24, r18
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	e2 e1       	ldi	r30, 0x12	; 18
     d8e:	f5 c8       	rjmp	.-3606   	; 0xffffff7a <__eeprom_end+0xff7eff7a>

00000d90 <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
     d90:	ac e2       	ldi	r26, 0x2C	; 44
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	ed ec       	ldi	r30, 0xCD	; 205
     d96:	f6 e0       	ldi	r31, 0x06	; 6
     d98:	dc c8       	rjmp	.-3656   	; 0xffffff52 <__eeprom_end+0xff7eff52>
     d9a:	7c 01       	movw	r14, r24
     d9c:	5b 01       	movw	r10, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
     d9e:	e0 91 64 00 	lds	r30, 0x0064
     da2:	f0 91 65 00 	lds	r31, 0x0065


	if (!fs) {				/* Check file system */
     da6:	30 97       	sbiw	r30, 0x00	; 0
     da8:	19 f4       	brne	.+6      	; 0xdb0 <pf_readdir+0x20>
     daa:	26 e0       	ldi	r18, 0x06	; 6
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	cc c0       	rjmp	.+408    	; 0xf48 <pf_readdir+0x1b8>
		res = FR_NOT_ENABLED;
	} else {
		fs->buf = dir;
     db0:	ce 01       	movw	r24, r28
     db2:	0d 96       	adiw	r24, 0x0d	; 13
     db4:	97 83       	std	Z+7, r25	; 0x07
     db6:	86 83       	std	Z+6, r24	; 0x06
		dj->fn = sp;
     db8:	ce 01       	movw	r24, r28
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	d7 01       	movw	r26, r14
     dbe:	13 96       	adiw	r26, 0x03	; 3
     dc0:	9c 93       	st	X, r25
     dc2:	8e 93       	st	-X, r24
     dc4:	12 97       	sbiw	r26, 0x02	; 2
		if (!fno) {
     dc6:	61 15       	cp	r22, r1
     dc8:	71 05       	cpc	r23, r1
     dca:	21 f4       	brne	.+8      	; 0xdd4 <pf_readdir+0x44>
			res = dir_rewind(dj);
     dcc:	c7 01       	movw	r24, r14
     dce:	d2 dc       	rcall	.-1628   	; 0x774 <dir_rewind>
     dd0:	9c 01       	movw	r18, r24
     dd2:	ba c0       	rjmp	.+372    	; 0xf48 <pf_readdir+0x1b8>
	FRESULT res;
	BYTE a, c, *dir;


	res = FR_NO_FILE;
	dir = FatFs->buf;
     dd4:	c6 80       	ldd	r12, Z+6	; 0x06
     dd6:	d7 80       	ldd	r13, Z+7	; 0x07
     dd8:	23 e0       	ldi	r18, 0x03	; 3
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	26 c0       	rjmp	.+76     	; 0xe2a <pf_readdir+0x9a>
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     dde:	f7 01       	movw	r30, r14
     de0:	20 81       	ld	r18, Z
     de2:	31 81       	ldd	r19, Z+1	; 0x01
     de4:	2f 70       	andi	r18, 0x0F	; 15
     de6:	30 70       	andi	r19, 0x00	; 0
     de8:	e5 e0       	ldi	r30, 0x05	; 5
     dea:	22 0f       	add	r18, r18
     dec:	33 1f       	adc	r19, r19
     dee:	ea 95       	dec	r30
     df0:	e1 f7       	brne	.-8      	; 0xdea <pf_readdir+0x5a>
     df2:	c6 01       	movw	r24, r12
     df4:	00 e2       	ldi	r16, 0x20	; 32
     df6:	10 e0       	ldi	r17, 0x00	; 0
     df8:	d3 d6       	rcall	.+3494   	; 0x1ba0 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
     dfa:	89 2b       	or	r24, r25
     dfc:	19 f0       	breq	.+6      	; 0xe04 <pf_readdir+0x74>
     dfe:	21 e0       	ldi	r18, 0x01	; 1
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	20 c0       	rjmp	.+64     	; 0xe44 <pf_readdir+0xb4>
		c = dir[DIR_Name];
     e04:	d6 01       	movw	r26, r12
     e06:	9c 91       	ld	r25, X
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     e08:	99 23       	and	r25, r25
     e0a:	09 f4       	brne	.+2      	; 0xe0e <pf_readdir+0x7e>
     e0c:	a1 c0       	rjmp	.+322    	; 0xf50 <pf_readdir+0x1c0>
		a = dir[DIR_Attr] & AM_MASK;
     e0e:	1b 96       	adiw	r26, 0x0b	; 11
     e10:	8c 91       	ld	r24, X
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
     e12:	95 3e       	cpi	r25, 0xE5	; 229
     e14:	29 f0       	breq	.+10     	; 0xe20 <pf_readdir+0x90>
     e16:	9e 32       	cpi	r25, 0x2E	; 46
     e18:	19 f0       	breq	.+6      	; 0xe20 <pf_readdir+0x90>
     e1a:	8f 73       	andi	r24, 0x3F	; 63
     e1c:	83 ff       	sbrs	r24, 3
     e1e:	20 c0       	rjmp	.+64     	; 0xe60 <pf_readdir+0xd0>
			break;
		res = dir_next(dj);				/* Next entry */
     e20:	c7 01       	movw	r24, r14
     e22:	ec dd       	rcall	.-1064   	; 0x9fc <dir_next>
     e24:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	69 f4       	brne	.+26     	; 0xe44 <pf_readdir+0xb4>
	BYTE a, c, *dir;


	res = FR_NO_FILE;
	dir = FatFs->buf;
	while (dj->sect) {
     e2a:	f7 01       	movw	r30, r14
     e2c:	44 85       	ldd	r20, Z+12	; 0x0c
     e2e:	55 85       	ldd	r21, Z+13	; 0x0d
     e30:	66 85       	ldd	r22, Z+14	; 0x0e
     e32:	77 85       	ldd	r23, Z+15	; 0x0f
     e34:	41 15       	cp	r20, r1
     e36:	51 05       	cpc	r21, r1
     e38:	61 05       	cpc	r22, r1
     e3a:	71 05       	cpc	r23, r1
     e3c:	81 f6       	brne	.-96     	; 0xdde <pf_readdir+0x4e>
			break;
		res = dir_next(dj);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
     e3e:	21 15       	cp	r18, r1
     e40:	31 05       	cpc	r19, r1
     e42:	71 f0       	breq	.+28     	; 0xe60 <pf_readdir+0xd0>
     e44:	d7 01       	movw	r26, r14
     e46:	1c 96       	adiw	r26, 0x0c	; 12
     e48:	1d 92       	st	X+, r1
     e4a:	1d 92       	st	X+, r1
     e4c:	1d 92       	st	X+, r1
     e4e:	1c 92       	st	X, r1
     e50:	1f 97       	sbiw	r26, 0x0f	; 15
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
		} else {
			res = dir_read(dj);
			if (res == FR_NO_FILE) {
     e52:	23 30       	cpi	r18, 0x03	; 3
     e54:	31 05       	cpc	r19, r1
     e56:	21 f0       	breq	.+8      	; 0xe60 <pf_readdir+0xd0>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
     e58:	21 15       	cp	r18, r1
     e5a:	31 05       	cpc	r19, r1
     e5c:	09 f0       	breq	.+2      	; 0xe60 <pf_readdir+0xd0>
     e5e:	74 c0       	rjmp	.+232    	; 0xf48 <pf_readdir+0x1b8>
{
	BYTE i, c, *dir;
	char *p;


	p = fno->fname;
     e60:	95 01       	movw	r18, r10
     e62:	27 5f       	subi	r18, 0xF7	; 247
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
     e66:	f7 01       	movw	r30, r14
     e68:	84 85       	ldd	r24, Z+12	; 0x0c
     e6a:	95 85       	ldd	r25, Z+13	; 0x0d
     e6c:	a6 85       	ldd	r26, Z+14	; 0x0e
     e6e:	b7 85       	ldd	r27, Z+15	; 0x0f
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	a1 05       	cpc	r26, r1
     e74:	b1 05       	cpc	r27, r1
     e76:	09 f4       	brne	.+2      	; 0xe7a <pf_readdir+0xea>
     e78:	56 c0       	rjmp	.+172    	; 0xf26 <pf_readdir+0x196>
		dir = FatFs->buf;
     e7a:	e0 91 64 00 	lds	r30, 0x0064
     e7e:	f0 91 65 00 	lds	r31, 0x0065
     e82:	46 81       	ldd	r20, Z+6	; 0x06
     e84:	57 81       	ldd	r21, Z+7	; 0x07
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
		for (i = 0; i < 8; i++) {	/* Copy file name body */
			c = dir[i];
     e8a:	fa 01       	movw	r30, r20
     e8c:	e8 0f       	add	r30, r24
     e8e:	f9 1f       	adc	r31, r25
     e90:	e0 81       	ld	r30, Z
			if (c == ' ') break;
     e92:	e0 32       	cpi	r30, 0x20	; 32
     e94:	51 f0       	breq	.+20     	; 0xeaa <pf_readdir+0x11a>
			if (c == 0x05) c = 0xE5;
     e96:	e5 30       	cpi	r30, 0x05	; 5
     e98:	09 f4       	brne	.+2      	; 0xe9c <pf_readdir+0x10c>
     e9a:	e5 ee       	ldi	r30, 0xE5	; 229
			*p++ = c;
     e9c:	d9 01       	movw	r26, r18
     e9e:	ed 93       	st	X+, r30
     ea0:	9d 01       	movw	r18, r26
     ea2:	01 96       	adiw	r24, 0x01	; 1


	p = fno->fname;
	if (dj->sect) {
		dir = FatFs->buf;
		for (i = 0; i < 8; i++) {	/* Copy file name body */
     ea4:	88 30       	cpi	r24, 0x08	; 8
     ea6:	91 05       	cpc	r25, r1
     ea8:	81 f7       	brne	.-32     	; 0xe8a <pf_readdir+0xfa>
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
     eaa:	fa 01       	movw	r30, r20
     eac:	80 85       	ldd	r24, Z+8	; 0x08
     eae:	80 32       	cpi	r24, 0x20	; 32
     eb0:	11 f4       	brne	.+4      	; 0xeb6 <pf_readdir+0x126>
     eb2:	f9 01       	movw	r30, r18
     eb4:	10 c0       	rjmp	.+32     	; 0xed6 <pf_readdir+0x146>
			*p++ = '.';
     eb6:	f9 01       	movw	r30, r18
     eb8:	8e e2       	ldi	r24, 0x2E	; 46
     eba:	81 93       	st	Z+, r24
     ebc:	da 01       	movw	r26, r20
			for (i = 8; i < 11; i++) {
     ebe:	2c 5f       	subi	r18, 0xFC	; 252
     ec0:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
     ec2:	18 96       	adiw	r26, 0x08	; 8
     ec4:	8c 91       	ld	r24, X
     ec6:	18 97       	sbiw	r26, 0x08	; 8
				if (c == ' ') break;
     ec8:	80 32       	cpi	r24, 0x20	; 32
     eca:	29 f0       	breq	.+10     	; 0xed6 <pf_readdir+0x146>
				*p++ = c;
     ecc:	81 93       	st	Z+, r24
     ece:	11 96       	adiw	r26, 0x01	; 1
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
     ed0:	e2 17       	cp	r30, r18
     ed2:	f3 07       	cpc	r31, r19
     ed4:	b1 f7       	brne	.-20     	; 0xec2 <pf_readdir+0x132>
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     ed6:	da 01       	movw	r26, r20
     ed8:	1b 96       	adiw	r26, 0x0b	; 11
     eda:	8c 91       	ld	r24, X
     edc:	d5 01       	movw	r26, r10
     ede:	18 96       	adiw	r26, 0x08	; 8
     ee0:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     ee2:	da 01       	movw	r26, r20
     ee4:	5c 96       	adiw	r26, 0x1c	; 28
     ee6:	0d 91       	ld	r16, X+
     ee8:	1d 91       	ld	r17, X+
     eea:	2d 91       	ld	r18, X+
     eec:	3c 91       	ld	r19, X
     eee:	5f 97       	sbiw	r26, 0x1f	; 31
     ef0:	d5 01       	movw	r26, r10
     ef2:	0d 93       	st	X+, r16
     ef4:	1d 93       	st	X+, r17
     ef6:	2d 93       	st	X+, r18
     ef8:	3c 93       	st	X, r19
     efa:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     efc:	da 01       	movw	r26, r20
     efe:	58 96       	adiw	r26, 0x18	; 24
     f00:	8d 91       	ld	r24, X+
     f02:	9c 91       	ld	r25, X
     f04:	59 97       	sbiw	r26, 0x19	; 25
     f06:	d5 01       	movw	r26, r10
     f08:	15 96       	adiw	r26, 0x05	; 5
     f0a:	9c 93       	st	X, r25
     f0c:	8e 93       	st	-X, r24
     f0e:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     f10:	da 01       	movw	r26, r20
     f12:	56 96       	adiw	r26, 0x16	; 22
     f14:	8d 91       	ld	r24, X+
     f16:	9c 91       	ld	r25, X
     f18:	57 97       	sbiw	r26, 0x17	; 23
     f1a:	d5 01       	movw	r26, r10
     f1c:	17 96       	adiw	r26, 0x07	; 7
     f1e:	9c 93       	st	X, r25
     f20:	8e 93       	st	-X, r24
     f22:	16 97       	sbiw	r26, 0x06	; 6
     f24:	9f 01       	movw	r18, r30
	}
	*p = 0;
     f26:	f9 01       	movw	r30, r18
     f28:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
     f2a:	c7 01       	movw	r24, r14
     f2c:	67 dd       	rcall	.-1330   	; 0x9fc <dir_next>
     f2e:	9c 01       	movw	r18, r24
				if (res == FR_NO_FILE) {
     f30:	83 30       	cpi	r24, 0x03	; 3
     f32:	91 05       	cpc	r25, r1
     f34:	49 f4       	brne	.+18     	; 0xf48 <pf_readdir+0x1b8>
					dj->sect = 0;
     f36:	d7 01       	movw	r26, r14
     f38:	1c 96       	adiw	r26, 0x0c	; 12
     f3a:	1d 92       	st	X+, r1
     f3c:	1d 92       	st	X+, r1
     f3e:	1d 92       	st	X+, r1
     f40:	1c 92       	st	X, r1
     f42:	1f 97       	sbiw	r26, 0x0f	; 15
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	return res;
}
     f48:	c9 01       	movw	r24, r18
     f4a:	ac 96       	adiw	r28, 0x2c	; 44
     f4c:	ea e0       	ldi	r30, 0x0A	; 10
     f4e:	1d c8       	rjmp	.-4038   	; 0xffffff8a <__eeprom_end+0xff7eff8a>
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
				if (res == FR_NO_FILE) {
					dj->sect = 0;
     f50:	23 e0       	ldi	r18, 0x03	; 3
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	77 cf       	rjmp	.-274    	; 0xe44 <pf_readdir+0xb4>

00000f56 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const char *path	/* Full-path string to find a file or directory */
)
{
     f56:	a0 e0       	ldi	r26, 0x00	; 0
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e0 eb       	ldi	r30, 0xB0	; 176
     f5c:	f7 e0       	ldi	r31, 0x07	; 7
     f5e:	f4 c7       	rjmp	.+4072   	; 0x1f48 <__prologue_saves__+0x6>
     f60:	6c 01       	movw	r12, r24
     f62:	5b 01       	movw	r10, r22
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <follow_path+0x16>
	FRESULT res;
	BYTE *dir;


	while (*path == ' ') path++;		/* Skip leading spaces */
     f66:	08 94       	sec
     f68:	a1 1c       	adc	r10, r1
     f6a:	b1 1c       	adc	r11, r1
     f6c:	d5 01       	movw	r26, r10
     f6e:	8c 91       	ld	r24, X
     f70:	80 32       	cpi	r24, 0x20	; 32
     f72:	c9 f3       	breq	.-14     	; 0xf66 <follow_path+0x10>
	if (*path == '/') path++;			/* Strip heading separator */
     f74:	8f 32       	cpi	r24, 0x2F	; 47
     f76:	19 f4       	brne	.+6      	; 0xf7e <follow_path+0x28>
     f78:	08 94       	sec
     f7a:	a1 1c       	adc	r10, r1
     f7c:	b1 1c       	adc	r11, r1
	dj->sclust = 0;						/* Set start directory (always root dir) */
     f7e:	f6 01       	movw	r30, r12
     f80:	14 82       	std	Z+4, r1	; 0x04
     f82:	15 82       	std	Z+5, r1	; 0x05
     f84:	16 82       	std	Z+6, r1	; 0x06
     f86:	17 82       	std	Z+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
     f88:	d5 01       	movw	r26, r10
     f8a:	8c 91       	ld	r24, X
     f8c:	81 32       	cpi	r24, 0x21	; 33
     f8e:	60 f4       	brcc	.+24     	; 0xfa8 <follow_path+0x52>
		res = dir_rewind(dj);
     f90:	c6 01       	movw	r24, r12
     f92:	f0 db       	rcall	.-2080   	; 0x774 <dir_rewind>
     f94:	ec 01       	movw	r28, r24
		FatFs->buf[0] = 0;
     f96:	e0 91 64 00 	lds	r30, 0x0064
     f9a:	f0 91 65 00 	lds	r31, 0x0065
     f9e:	06 80       	ldd	r0, Z+6	; 0x06
     fa0:	f7 81       	ldd	r31, Z+7	; 0x07
     fa2:	e0 2d       	mov	r30, r0
     fa4:	10 82       	st	Z, r1
     fa6:	ae c0       	rjmp	.+348    	; 0x1104 <follow_path+0x1ae>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     fa8:	a0 e2       	ldi	r26, 0x20	; 32
     faa:	5a 2e       	mov	r5, r26
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     fac:	66 24       	eor	r6, r6
     fae:	63 94       	inc	r6
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
     fb0:	f6 01       	movw	r30, r12
     fb2:	a2 81       	ldd	r26, Z+2	; 0x02
     fb4:	b3 81       	ldd	r27, Z+3	; 0x03
/*-----------------------------------------------------------------------*/

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
     fb6:	fd 01       	movw	r30, r26
	while (cnt--) *d++ = (char)val;
     fb8:	cd 01       	movw	r24, r26
     fba:	0b 96       	adiw	r24, 0x0b	; 11
     fbc:	01 c0       	rjmp	.+2      	; 0xfc0 <follow_path+0x6a>
     fbe:	51 92       	st	Z+, r5
     fc0:	e8 17       	cp	r30, r24
     fc2:	f9 07       	cpc	r31, r25
     fc4:	e1 f7       	brne	.-8      	; 0xfbe <follow_path+0x68>
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	77 24       	eor	r7, r7
     fca:	38 e0       	ldi	r19, 0x08	; 8
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <follow_path+0x7c>
     fce:	28 e0       	ldi	r18, 0x08	; 8
     fd0:	3b e0       	ldi	r19, 0x0B	; 11
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
     fd2:	f5 01       	movw	r30, r10
     fd4:	e7 0d       	add	r30, r7
     fd6:	f1 1d       	adc	r31, r1
     fd8:	90 81       	ld	r25, Z
     fda:	73 94       	inc	r7
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
     fdc:	91 32       	cpi	r25, 0x21	; 33
     fde:	b0 f0       	brcs	.+44     	; 0x100c <follow_path+0xb6>
     fe0:	9f 32       	cpi	r25, 0x2F	; 47
     fe2:	a1 f0       	breq	.+40     	; 0x100c <follow_path+0xb6>
		if (c == '.' || i >= ni) {
     fe4:	9e 32       	cpi	r25, 0x2E	; 46
     fe6:	11 f0       	breq	.+4      	; 0xfec <follow_path+0x96>
     fe8:	23 17       	cp	r18, r19
     fea:	28 f0       	brcs	.+10     	; 0xff6 <follow_path+0xa0>
			if (ni != 8 || c != '.') break;
     fec:	38 30       	cpi	r19, 0x08	; 8
     fee:	71 f4       	brne	.+28     	; 0x100c <follow_path+0xb6>
     ff0:	9e 32       	cpi	r25, 0x2E	; 46
     ff2:	69 f3       	breq	.-38     	; 0xfce <follow_path+0x78>
     ff4:	0b c0       	rjmp	.+22     	; 0x100c <follow_path+0xb6>
		if (IsDBCS1(c) && i >= ni - 1) {	/* DBC 1st byte? */
			d = p[si++];					/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
     ff6:	89 2f       	mov	r24, r25
     ff8:	81 56       	subi	r24, 0x61	; 97
     ffa:	8a 31       	cpi	r24, 0x1A	; 26
     ffc:	08 f4       	brcc	.+2      	; 0x1000 <follow_path+0xaa>
     ffe:	90 52       	subi	r25, 0x20	; 32
			sfn[i++] = c;
    1000:	fd 01       	movw	r30, r26
    1002:	e2 0f       	add	r30, r18
    1004:	f1 1d       	adc	r31, r1
    1006:	90 83       	st	Z, r25
    1008:	2f 5f       	subi	r18, 0xFF	; 255
    100a:	e3 cf       	rjmp	.-58     	; 0xfd2 <follow_path+0x7c>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    100c:	1b 96       	adiw	r26, 0x0b	; 11
    100e:	1c 92       	st	X, r1
    1010:	1b 97       	sbiw	r26, 0x0b	; 11
    1012:	91 32       	cpi	r25, 0x21	; 33
    1014:	10 f4       	brcc	.+4      	; 0x101a <follow_path+0xc4>
    1016:	1b 96       	adiw	r26, 0x0b	; 11
    1018:	6c 92       	st	X, r6
{
	FRESULT res;
	BYTE c, *dir;


	res = dir_rewind(dj);			/* Rewind directory object */
    101a:	c6 01       	movw	r24, r12
    101c:	ab db       	rcall	.-2218   	; 0x774 <dir_rewind>
    101e:	ec 01       	movw	r28, r24
	if (res != FR_OK) return res;
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	09 f0       	breq	.+2      	; 0x1026 <follow_path+0xd0>
    1024:	40 c0       	rjmp	.+128    	; 0x10a6 <follow_path+0x150>

	dir = FatFs->buf;
    1026:	e0 91 64 00 	lds	r30, 0x0064
    102a:	f0 91 65 00 	lds	r31, 0x0065
    102e:	e6 80       	ldd	r14, Z+6	; 0x06
    1030:	f7 80       	ldd	r15, Z+7	; 0x07
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1032:	fb e0       	ldi	r31, 0x0B	; 11
    1034:	8f 2e       	mov	r8, r31
    1036:	91 2c       	mov	r9, r1
    1038:	8e 0c       	add	r8, r14
    103a:	9f 1c       	adc	r9, r15
	res = dir_rewind(dj);			/* Rewind directory object */
	if (res != FR_OK) return res;

	dir = FatFs->buf;
	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    103c:	d6 01       	movw	r26, r12
    103e:	1c 96       	adiw	r26, 0x0c	; 12
    1040:	4d 91       	ld	r20, X+
    1042:	5d 91       	ld	r21, X+
    1044:	6d 91       	ld	r22, X+
    1046:	7c 91       	ld	r23, X
    1048:	1f 97       	sbiw	r26, 0x0f	; 15
    104a:	2d 91       	ld	r18, X+
    104c:	3c 91       	ld	r19, X
    104e:	2f 70       	andi	r18, 0x0F	; 15
    1050:	30 70       	andi	r19, 0x00	; 0
    1052:	e5 e0       	ldi	r30, 0x05	; 5
    1054:	22 0f       	add	r18, r18
    1056:	33 1f       	adc	r19, r19
    1058:	ea 95       	dec	r30
    105a:	e1 f7       	brne	.-8      	; 0x1054 <follow_path+0xfe>
    105c:	c7 01       	movw	r24, r14
    105e:	00 e2       	ldi	r16, 0x20	; 32
    1060:	10 e0       	ldi	r17, 0x00	; 0
    1062:	9e d5       	rcall	.+2876   	; 0x1ba0 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    1064:	89 2b       	or	r24, r25
    1066:	19 f0       	breq	.+6      	; 0x106e <follow_path+0x118>
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	1b c0       	rjmp	.+54     	; 0x10a4 <follow_path+0x14e>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    106e:	f7 01       	movw	r30, r14
    1070:	80 81       	ld	r24, Z
    1072:	88 23       	and	r24, r24
    1074:	09 f4       	brne	.+2      	; 0x1078 <follow_path+0x122>
    1076:	4b c0       	rjmp	.+150    	; 0x110e <follow_path+0x1b8>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1078:	83 85       	ldd	r24, Z+11	; 0x0b
    107a:	83 fd       	sbrc	r24, 3
    107c:	0f c0       	rjmp	.+30     	; 0x109c <follow_path+0x146>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    107e:	f6 01       	movw	r30, r12
    1080:	a2 81       	ldd	r26, Z+2	; 0x02
    1082:	b3 81       	ldd	r27, Z+3	; 0x03
    1084:	f7 01       	movw	r30, r14
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1086:	e8 15       	cp	r30, r8
    1088:	f9 05       	cpc	r31, r9
    108a:	09 f4       	brne	.+2      	; 0x108e <follow_path+0x138>
    108c:	43 c0       	rjmp	.+134    	; 0x1114 <follow_path+0x1be>
    108e:	90 81       	ld	r25, Z
    1090:	8c 91       	ld	r24, X
    1092:	98 17       	cp	r25, r24
    1094:	19 f4       	brne	.+6      	; 0x109c <follow_path+0x146>
    1096:	31 96       	adiw	r30, 0x01	; 1
    1098:	11 96       	adiw	r26, 0x01	; 1
    109a:	f5 cf       	rjmp	.-22     	; 0x1086 <follow_path+0x130>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);							/* Next entry */
    109c:	c6 01       	movw	r24, r12
    109e:	ae dc       	rcall	.-1700   	; 0x9fc <dir_next>
	} while (res == FR_OK);
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	61 f2       	breq	.-104    	; 0x103c <follow_path+0xe6>
    10a4:	ec 01       	movw	r28, r24
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
    10a6:	c3 30       	cpi	r28, 0x03	; 3
    10a8:	d1 05       	cpc	r29, r1
    10aa:	61 f5       	brne	.+88     	; 0x1104 <follow_path+0x1ae>
    10ac:	d6 01       	movw	r26, r12
    10ae:	12 96       	adiw	r26, 0x02	; 2
    10b0:	ed 91       	ld	r30, X+
    10b2:	fc 91       	ld	r31, X
    10b4:	13 97       	sbiw	r26, 0x03	; 3
    10b6:	83 85       	ldd	r24, Z+11	; 0x0b
    10b8:	88 23       	and	r24, r24
    10ba:	11 f1       	breq	.+68     	; 0x1100 <follow_path+0x1aa>
    10bc:	23 c0       	rjmp	.+70     	; 0x1104 <follow_path+0x1ae>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
    10be:	e0 91 64 00 	lds	r30, 0x0064
    10c2:	f0 91 65 00 	lds	r31, 0x0065
    10c6:	06 80       	ldd	r0, Z+6	; 0x06
    10c8:	f7 81       	ldd	r31, Z+7	; 0x07
    10ca:	e0 2d       	mov	r30, r0
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    10cc:	83 85       	ldd	r24, Z+11	; 0x0b
    10ce:	84 ff       	sbrs	r24, 4
    10d0:	17 c0       	rjmp	.+46     	; 0x1100 <follow_path+0x1aa>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    10d2:	a7 0c       	add	r10, r7
    10d4:	b1 1c       	adc	r11, r1
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust =
    10d6:	84 89       	ldd	r24, Z+20	; 0x14
    10d8:	95 89       	ldd	r25, Z+21	; 0x15
    10da:	a0 e0       	ldi	r26, 0x00	; 0
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	dc 01       	movw	r26, r24
    10e0:	99 27       	eor	r25, r25
    10e2:	88 27       	eor	r24, r24
    10e4:	22 8d       	ldd	r18, Z+26	; 0x1a
    10e6:	33 8d       	ldd	r19, Z+27	; 0x1b
    10e8:	40 e0       	ldi	r20, 0x00	; 0
    10ea:	50 e0       	ldi	r21, 0x00	; 0
    10ec:	82 2b       	or	r24, r18
    10ee:	93 2b       	or	r25, r19
    10f0:	a4 2b       	or	r26, r20
    10f2:	b5 2b       	or	r27, r21
    10f4:	f6 01       	movw	r30, r12
    10f6:	84 83       	std	Z+4, r24	; 0x04
    10f8:	95 83       	std	Z+5, r25	; 0x05
    10fa:	a6 83       	std	Z+6, r26	; 0x06
    10fc:	b7 83       	std	Z+7, r27	; 0x07
    10fe:	58 cf       	rjmp	.-336    	; 0xfb0 <follow_path+0x5a>
#if _FS_FAT32
				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | 
#endif
				LD_WORD(dir+DIR_FstClusLO);
		}
    1100:	c4 e0       	ldi	r28, 0x04	; 4
    1102:	d0 e0       	ldi	r29, 0x00	; 0
	}

	return res;
}
    1104:	ce 01       	movw	r24, r28
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	ef e0       	ldi	r30, 0x0F	; 15
    110c:	39 c7       	rjmp	.+3698   	; 0x1f80 <__epilogue_restores__+0x6>
			dj->sclust =
#if _FS_FAT32
				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | 
#endif
				LD_WORD(dir+DIR_FstClusLO);
		}
    110e:	c3 e0       	ldi	r28, 0x03	; 3
    1110:	d0 e0       	ldi	r29, 0x00	; 0
    1112:	c9 cf       	rjmp	.-110    	; 0x10a6 <follow_path+0x150>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
    1114:	d6 01       	movw	r26, r12
    1116:	12 96       	adiw	r26, 0x02	; 2
    1118:	ed 91       	ld	r30, X+
    111a:	fc 91       	ld	r31, X
    111c:	13 97       	sbiw	r26, 0x03	; 3
    111e:	83 85       	ldd	r24, Z+11	; 0x0b
    1120:	88 23       	and	r24, r24
    1122:	69 f2       	breq	.-102    	; 0x10be <follow_path+0x168>
    1124:	ef cf       	rjmp	.-34     	; 0x1104 <follow_path+0x1ae>

00001126 <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
    1126:	ac e2       	ldi	r26, 0x2C	; 44
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e8 e9       	ldi	r30, 0x98	; 152
    112c:	f8 e0       	ldi	r31, 0x08	; 8
    112e:	15 c7       	rjmp	.+3626   	; 0x1f5a <__prologue_saves__+0x18>
    1130:	8c 01       	movw	r16, r24
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    1132:	e0 91 64 00 	lds	r30, 0x0064
    1136:	f0 91 65 00 	lds	r31, 0x0065


	if (!fs) {				/* Check file system */
    113a:	30 97       	sbiw	r30, 0x00	; 0
    113c:	19 f4       	brne	.+6      	; 0x1144 <pf_opendir+0x1e>
    113e:	26 e0       	ldi	r18, 0x06	; 6
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	34 c0       	rjmp	.+104    	; 0x11ac <pf_opendir+0x86>
		res = FR_NOT_ENABLED;
	} else {
		fs->buf = dir;
    1144:	3d e0       	ldi	r19, 0x0D	; 13
    1146:	e3 2e       	mov	r14, r19
    1148:	f1 2c       	mov	r15, r1
    114a:	ec 0e       	add	r14, r28
    114c:	fd 1e       	adc	r15, r29
    114e:	f7 82       	std	Z+7, r15	; 0x07
    1150:	e6 82       	std	Z+6, r14	; 0x06
		dj->fn = sp;
    1152:	ce 01       	movw	r24, r28
    1154:	01 96       	adiw	r24, 0x01	; 1
    1156:	f8 01       	movw	r30, r16
    1158:	93 83       	std	Z+3, r25	; 0x03
    115a:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, path);			/* Follow the path to the directory */
    115c:	c8 01       	movw	r24, r16
    115e:	fb de       	rcall	.-522    	; 0xf56 <follow_path>
    1160:	9c 01       	movw	r18, r24
		if (res == FR_OK) {						/* Follow completed */
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	f1 f4       	brne	.+60     	; 0x11a2 <pf_opendir+0x7c>
			if (dir[0]) {						/* It is not the root dir */
    1166:	8d 85       	ldd	r24, Y+13	; 0x0d
    1168:	88 23       	and	r24, r24
    116a:	c1 f0       	breq	.+48     	; 0x119c <pf_opendir+0x76>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    116c:	88 8d       	ldd	r24, Y+24	; 0x18
    116e:	84 ff       	sbrs	r24, 4
    1170:	1b c0       	rjmp	.+54     	; 0x11a8 <pf_opendir+0x82>
					dj->sclust =
    1172:	f7 01       	movw	r30, r14
    1174:	84 89       	ldd	r24, Z+20	; 0x14
    1176:	95 89       	ldd	r25, Z+21	; 0x15
    1178:	a0 e0       	ldi	r26, 0x00	; 0
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	dc 01       	movw	r26, r24
    117e:	99 27       	eor	r25, r25
    1180:	88 27       	eor	r24, r24
    1182:	22 8d       	ldd	r18, Z+26	; 0x1a
    1184:	33 8d       	ldd	r19, Z+27	; 0x1b
    1186:	40 e0       	ldi	r20, 0x00	; 0
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	82 2b       	or	r24, r18
    118c:	93 2b       	or	r25, r19
    118e:	a4 2b       	or	r26, r20
    1190:	b5 2b       	or	r27, r21
    1192:	f8 01       	movw	r30, r16
    1194:	84 83       	std	Z+4, r24	; 0x04
    1196:	95 83       	std	Z+5, r25	; 0x05
    1198:	a6 83       	std	Z+6, r26	; 0x06
    119a:	b7 83       	std	Z+7, r27	; 0x07
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
    119c:	c8 01       	movw	r24, r16
    119e:	ea da       	rcall	.-2604   	; 0x774 <dir_rewind>
    11a0:	9c 01       	movw	r18, r24
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    11a2:	23 30       	cpi	r18, 0x03	; 3
    11a4:	31 05       	cpc	r19, r1
    11a6:	11 f4       	brne	.+4      	; 0x11ac <pf_opendir+0x86>
    11a8:	24 e0       	ldi	r18, 0x04	; 4
    11aa:	30 e0       	ldi	r19, 0x00	; 0
	}

	return res;
}
    11ac:	c9 01       	movw	r24, r18
    11ae:	ac 96       	adiw	r28, 0x2c	; 44
    11b0:	e6 e0       	ldi	r30, 0x06	; 6
    11b2:	ef c6       	rjmp	.+3550   	; 0x1f92 <__epilogue_restores__+0x18>

000011b4 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    11b4:	ac e3       	ldi	r26, 0x3C	; 60
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	ef ed       	ldi	r30, 0xDF	; 223
    11ba:	f8 e0       	ldi	r31, 0x08	; 8
    11bc:	ce c6       	rjmp	.+3484   	; 0x1f5a <__prologue_saves__+0x18>
    11be:	bc 01       	movw	r22, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    11c0:	00 91 64 00 	lds	r16, 0x0064
    11c4:	10 91 65 00 	lds	r17, 0x0065


	if (!fs)						/* Check file system */
    11c8:	01 15       	cp	r16, r1
    11ca:	11 05       	cpc	r17, r1
    11cc:	19 f4       	brne	.+6      	; 0x11d4 <pf_open+0x20>
    11ce:	66 e0       	ldi	r22, 0x06	; 6
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	41 c0       	rjmp	.+130    	; 0x1256 <pf_open+0xa2>
		return FR_NOT_ENABLED;

	fs->flag = 0;
    11d4:	f8 01       	movw	r30, r16
    11d6:	12 82       	std	Z+2, r1	; 0x02
	fs->buf = dir;
    11d8:	5d e1       	ldi	r21, 0x1D	; 29
    11da:	e5 2e       	mov	r14, r21
    11dc:	f1 2c       	mov	r15, r1
    11de:	ec 0e       	add	r14, r28
    11e0:	fd 1e       	adc	r15, r29
    11e2:	f7 82       	std	Z+7, r15	; 0x07
    11e4:	e6 82       	std	Z+6, r14	; 0x06
	dj.fn = sp;
    11e6:	ce 01       	movw	r24, r28
    11e8:	01 96       	adiw	r24, 0x01	; 1
    11ea:	98 8b       	std	Y+16, r25	; 0x10
    11ec:	8f 87       	std	Y+15, r24	; 0x0f
	res = follow_path(&dj, path);	/* Follow the file path */
    11ee:	ce 01       	movw	r24, r28
    11f0:	0d 96       	adiw	r24, 0x0d	; 13
    11f2:	b1 de       	rcall	.-670    	; 0xf56 <follow_path>
    11f4:	bc 01       	movw	r22, r24
	if (res != FR_OK) return res;	/* Follow failed */
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	71 f5       	brne	.+92     	; 0x1256 <pf_open+0xa2>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    11fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11fc:	88 23       	and	r24, r24
    11fe:	49 f1       	breq	.+82     	; 0x1252 <pf_open+0x9e>
    1200:	88 a5       	ldd	r24, Y+40	; 0x28
    1202:	84 fd       	sbrc	r24, 4
    1204:	26 c0       	rjmp	.+76     	; 0x1252 <pf_open+0x9e>
		return FR_NO_FILE;

	fs->org_clust =						/* File start cluster */
    1206:	f7 01       	movw	r30, r14
    1208:	84 89       	ldd	r24, Z+20	; 0x14
    120a:	95 89       	ldd	r25, Z+21	; 0x15
    120c:	a0 e0       	ldi	r26, 0x00	; 0
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	dc 01       	movw	r26, r24
    1212:	99 27       	eor	r25, r25
    1214:	88 27       	eor	r24, r24
    1216:	22 8d       	ldd	r18, Z+26	; 0x1a
    1218:	33 8d       	ldd	r19, Z+27	; 0x1b
    121a:	40 e0       	ldi	r20, 0x00	; 0
    121c:	50 e0       	ldi	r21, 0x00	; 0
    121e:	82 2b       	or	r24, r18
    1220:	93 2b       	or	r25, r19
    1222:	a4 2b       	or	r26, r20
    1224:	b5 2b       	or	r27, r21
    1226:	f8 01       	movw	r30, r16
    1228:	80 a3       	std	Z+32, r24	; 0x20
    122a:	91 a3       	std	Z+33, r25	; 0x21
    122c:	a2 a3       	std	Z+34, r26	; 0x22
    122e:	b3 a3       	std	Z+35, r27	; 0x23
#if _FS_FAT32
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
#endif
		LD_WORD(dir+DIR_FstClusLO);
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    1230:	f7 01       	movw	r30, r14
    1232:	84 8d       	ldd	r24, Z+28	; 0x1c
    1234:	95 8d       	ldd	r25, Z+29	; 0x1d
    1236:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1238:	b7 8d       	ldd	r27, Z+31	; 0x1f
    123a:	f8 01       	movw	r30, r16
    123c:	84 8f       	std	Z+28, r24	; 0x1c
    123e:	95 8f       	std	Z+29, r25	; 0x1d
    1240:	a6 8f       	std	Z+30, r26	; 0x1e
    1242:	b7 8f       	std	Z+31, r27	; 0x1f
	fs->fptr = 0;						/* File pointer */
    1244:	10 8e       	std	Z+24, r1	; 0x18
    1246:	11 8e       	std	Z+25, r1	; 0x19
    1248:	12 8e       	std	Z+26, r1	; 0x1a
    124a:	13 8e       	std	Z+27, r1	; 0x1b
	fs->flag = FA_OPENED;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	82 83       	std	Z+2, r24	; 0x02
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <pf_open+0xa2>

	return FR_OK;
    1252:	63 e0       	ldi	r22, 0x03	; 3
    1254:	70 e0       	ldi	r23, 0x00	; 0
}
    1256:	cb 01       	movw	r24, r22
    1258:	ec 96       	adiw	r28, 0x3c	; 60
    125a:	e6 e0       	ldi	r30, 0x06	; 6
    125c:	9a c6       	rjmp	.+3380   	; 0x1f92 <__epilogue_restores__+0x18>

0000125e <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
    125e:	a0 e0       	ldi	r26, 0x00	; 0
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e4 e3       	ldi	r30, 0x34	; 52
    1264:	f9 e0       	ldi	r31, 0x09	; 9
    1266:	6f c6       	rjmp	.+3294   	; 0x1f46 <__prologue_saves__+0x4>
    1268:	3c 01       	movw	r6, r24
    126a:	6b 01       	movw	r12, r22
    126c:	4a 01       	movw	r8, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	BYTE *rbuff = buff;
	WORD rcnt;
	FATFS *fs = FatFs;
    126e:	c0 91 64 00 	lds	r28, 0x0064
    1272:	d0 91 65 00 	lds	r29, 0x0065


	*br = 0;
    1276:	fa 01       	movw	r30, r20
    1278:	11 82       	std	Z+1, r1	; 0x01
    127a:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    127c:	20 97       	sbiw	r28, 0x00	; 0
    127e:	19 f4       	brne	.+6      	; 0x1286 <pf_read+0x28>
    1280:	26 e0       	ldi	r18, 0x06	; 6
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	d9 c0       	rjmp	.+434    	; 0x1438 <pf_read+0x1da>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	80 fd       	sbrc	r24, 0
    128a:	03 c0       	rjmp	.+6      	; 0x1292 <pf_read+0x34>
    128c:	25 e0       	ldi	r18, 0x05	; 5
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	d3 c0       	rjmp	.+422    	; 0x1438 <pf_read+0x1da>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    1292:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1294:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1296:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1298:	5f 8d       	ldd	r21, Y+31	; 0x1f
    129a:	88 8d       	ldd	r24, Y+24	; 0x18
    129c:	99 8d       	ldd	r25, Y+25	; 0x19
    129e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    12a0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    12a2:	28 1b       	sub	r18, r24
    12a4:	39 0b       	sbc	r19, r25
    12a6:	4a 0b       	sbc	r20, r26
    12a8:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
    12aa:	cb 01       	movw	r24, r22
    12ac:	a0 e0       	ldi	r26, 0x00	; 0
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	28 17       	cp	r18, r24
    12b2:	39 07       	cpc	r19, r25
    12b4:	4a 07       	cpc	r20, r26
    12b6:	5b 07       	cpc	r21, r27
    12b8:	08 f4       	brcc	.+2      	; 0x12bc <pf_read+0x5e>
    12ba:	69 01       	movw	r12, r18
)
{
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	BYTE *rbuff = buff;
    12bc:	53 01       	movw	r10, r6
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + fs->csect++;
		}
		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
    12be:	41 2c       	mov	r4, r1
    12c0:	f2 e0       	ldi	r31, 0x02	; 2
    12c2:	5f 2e       	mov	r5, r31
    12c4:	af c0       	rjmp	.+350    	; 0x1424 <pf_read+0x1c6>

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    12c6:	e8 8c       	ldd	r14, Y+24	; 0x18
    12c8:	f9 8c       	ldd	r15, Y+25	; 0x19
    12ca:	0a 8d       	ldd	r16, Y+26	; 0x1a
    12cc:	1b 8d       	ldd	r17, Y+27	; 0x1b
    12ce:	d8 01       	movw	r26, r16
    12d0:	c7 01       	movw	r24, r14
    12d2:	91 70       	andi	r25, 0x01	; 1
    12d4:	a0 70       	andi	r26, 0x00	; 0
    12d6:	b0 70       	andi	r27, 0x00	; 0
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	a1 05       	cpc	r26, r1
    12dc:	b1 05       	cpc	r27, r1
    12de:	09 f0       	breq	.+2      	; 0x12e2 <pf_read+0x84>
    12e0:	68 c0       	rjmp	.+208    	; 0x13b2 <pf_read+0x154>
			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
    12e2:	c8 01       	movw	r24, r16
    12e4:	b7 01       	movw	r22, r14
    12e6:	e9 e0       	ldi	r30, 0x09	; 9
    12e8:	96 95       	lsr	r25
    12ea:	87 95       	ror	r24
    12ec:	77 95       	ror	r23
    12ee:	67 95       	ror	r22
    12f0:	ea 95       	dec	r30
    12f2:	d1 f7       	brne	.-12     	; 0x12e8 <pf_read+0x8a>
    12f4:	29 81       	ldd	r18, Y+1	; 0x01
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	40 e0       	ldi	r20, 0x00	; 0
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	00 d6       	rcall	.+3072   	; 0x1efe <__udivmodsi4>
    12fe:	61 15       	cp	r22, r1
    1300:	71 05       	cpc	r23, r1
    1302:	81 05       	cpc	r24, r1
    1304:	91 05       	cpc	r25, r1
    1306:	d1 f4       	brne	.+52     	; 0x133c <pf_read+0xde>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    1308:	e1 14       	cp	r14, r1
    130a:	f1 04       	cpc	r15, r1
    130c:	01 05       	cpc	r16, r1
    130e:	11 05       	cpc	r17, r1
    1310:	29 f4       	brne	.+10     	; 0x131c <pf_read+0xbe>
    1312:	68 a1       	ldd	r22, Y+32	; 0x20
    1314:	79 a1       	ldd	r23, Y+33	; 0x21
    1316:	8a a1       	ldd	r24, Y+34	; 0x22
    1318:	9b a1       	ldd	r25, Y+35	; 0x23
    131a:	05 c0       	rjmp	.+10     	; 0x1326 <pf_read+0xc8>
    131c:	6c a1       	ldd	r22, Y+36	; 0x24
    131e:	7d a1       	ldd	r23, Y+37	; 0x25
    1320:	8e a1       	ldd	r24, Y+38	; 0x26
    1322:	9f a1       	ldd	r25, Y+39	; 0x27
    1324:	a0 da       	rcall	.-2752   	; 0x866 <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
    1326:	62 30       	cpi	r22, 0x02	; 2
    1328:	71 05       	cpc	r23, r1
    132a:	81 05       	cpc	r24, r1
    132c:	91 05       	cpc	r25, r1
    132e:	08 f4       	brcc	.+2      	; 0x1332 <pf_read+0xd4>
    1330:	80 c0       	rjmp	.+256    	; 0x1432 <pf_read+0x1d4>
				fs->curr_clust = clst;				/* Update current cluster */
    1332:	6c a3       	std	Y+36, r22	; 0x24
    1334:	7d a3       	std	Y+37, r23	; 0x25
    1336:	8e a3       	std	Y+38, r24	; 0x26
    1338:	9f a3       	std	Y+39, r25	; 0x27
				fs->csect = 0;						/* Reset sector offset in the cluster */
    133a:	1b 82       	std	Y+3, r1	; 0x03
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    133c:	00 91 64 00 	lds	r16, 0x0064
    1340:	10 91 65 00 	lds	r17, 0x0065


	clst -= 2;
    1344:	2c a1       	ldd	r18, Y+36	; 0x24
    1346:	3d a1       	ldd	r19, Y+37	; 0x25
    1348:	4e a1       	ldd	r20, Y+38	; 0x26
    134a:	5f a1       	ldd	r21, Y+39	; 0x27
    134c:	22 50       	subi	r18, 0x02	; 2
    134e:	30 40       	sbci	r19, 0x00	; 0
    1350:	40 40       	sbci	r20, 0x00	; 0
    1352:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1354:	f8 01       	movw	r30, r16
    1356:	80 85       	ldd	r24, Z+8	; 0x08
    1358:	91 85       	ldd	r25, Z+9	; 0x09
    135a:	a2 85       	ldd	r26, Z+10	; 0x0a
    135c:	b3 85       	ldd	r27, Z+11	; 0x0b
    135e:	02 97       	sbiw	r24, 0x02	; 2
    1360:	a1 09       	sbc	r26, r1
    1362:	b1 09       	sbc	r27, r1
    1364:	28 17       	cp	r18, r24
    1366:	39 07       	cpc	r19, r25
    1368:	4a 07       	cpc	r20, r26
    136a:	5b 07       	cpc	r21, r27
    136c:	08 f0       	brcs	.+2      	; 0x1370 <pf_read+0x112>
    136e:	61 c0       	rjmp	.+194    	; 0x1432 <pf_read+0x1d4>
	return (DWORD)clst * fs->csize + fs->database;
    1370:	61 81       	ldd	r22, Z+1	; 0x01
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	a9 d5       	rcall	.+2898   	; 0x1ecc <__mulsi3>
    137a:	9b 01       	movw	r18, r22
    137c:	ac 01       	movw	r20, r24
    137e:	f8 01       	movw	r30, r16
    1380:	84 89       	ldd	r24, Z+20	; 0x14
    1382:	95 89       	ldd	r25, Z+21	; 0x15
    1384:	a6 89       	ldd	r26, Z+22	; 0x16
    1386:	b7 89       	ldd	r27, Z+23	; 0x17
    1388:	28 0f       	add	r18, r24
    138a:	39 1f       	adc	r19, r25
    138c:	4a 1f       	adc	r20, r26
    138e:	5b 1f       	adc	r21, r27
				if (clst <= 1) goto fr_abort;
				fs->curr_clust = clst;				/* Update current cluster */
				fs->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
    1390:	21 15       	cp	r18, r1
    1392:	31 05       	cpc	r19, r1
    1394:	41 05       	cpc	r20, r1
    1396:	51 05       	cpc	r21, r1
    1398:	09 f4       	brne	.+2      	; 0x139c <pf_read+0x13e>
    139a:	4b c0       	rjmp	.+150    	; 0x1432 <pf_read+0x1d4>
			fs->dsect = sect + fs->csect++;
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	28 0f       	add	r18, r24
    13a0:	31 1d       	adc	r19, r1
    13a2:	41 1d       	adc	r20, r1
    13a4:	51 1d       	adc	r21, r1
    13a6:	28 a7       	std	Y+40, r18	; 0x28
    13a8:	39 a7       	std	Y+41, r19	; 0x29
    13aa:	4a a7       	std	Y+42, r20	; 0x2a
    13ac:	5b a7       	std	Y+43, r21	; 0x2b
    13ae:	8f 5f       	subi	r24, 0xFF	; 255
    13b0:	8b 83       	std	Y+3, r24	; 0x03
		}
		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
    13b2:	08 8d       	ldd	r16, Y+24	; 0x18
    13b4:	19 8d       	ldd	r17, Y+25	; 0x19
    13b6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    13b8:	3b 8d       	ldd	r19, Y+27	; 0x1b
    13ba:	c8 01       	movw	r24, r16
    13bc:	91 70       	andi	r25, 0x01	; 1
    13be:	a2 01       	movw	r20, r4
    13c0:	48 1b       	sub	r20, r24
    13c2:	59 0b       	sbc	r21, r25
    13c4:	76 01       	movw	r14, r12
    13c6:	4c 15       	cp	r20, r12
    13c8:	5d 05       	cpc	r21, r13
    13ca:	08 f4       	brcc	.+2      	; 0x13ce <pf_read+0x170>
    13cc:	7a 01       	movw	r14, r20
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    13ce:	61 14       	cp	r6, r1
    13d0:	71 04       	cpc	r7, r1
    13d2:	19 f4       	brne	.+6      	; 0x13da <pf_read+0x17c>
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	01 c0       	rjmp	.+2      	; 0x13dc <pf_read+0x17e>
    13da:	c5 01       	movw	r24, r10
    13dc:	48 a5       	ldd	r20, Y+40	; 0x28
    13de:	59 a5       	ldd	r21, Y+41	; 0x29
    13e0:	6a a5       	ldd	r22, Y+42	; 0x2a
    13e2:	7b a5       	ldd	r23, Y+43	; 0x2b
    13e4:	98 01       	movw	r18, r16
    13e6:	31 70       	andi	r19, 0x01	; 1
    13e8:	87 01       	movw	r16, r14
    13ea:	da d3       	rcall	.+1972   	; 0x1ba0 <disk_readp>
		if (dr) goto fr_abort;
    13ec:	89 2b       	or	r24, r25
    13ee:	09 f5       	brne	.+66     	; 0x1432 <pf_read+0x1d4>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    13f0:	c7 01       	movw	r24, r14
    13f2:	a0 e0       	ldi	r26, 0x00	; 0
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	28 8d       	ldd	r18, Y+24	; 0x18
    13f8:	39 8d       	ldd	r19, Y+25	; 0x19
    13fa:	4a 8d       	ldd	r20, Y+26	; 0x1a
    13fc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    13fe:	28 0f       	add	r18, r24
    1400:	39 1f       	adc	r19, r25
    1402:	4a 1f       	adc	r20, r26
    1404:	5b 1f       	adc	r21, r27
    1406:	28 8f       	std	Y+24, r18	; 0x18
    1408:	39 8f       	std	Y+25, r19	; 0x19
    140a:	4a 8f       	std	Y+26, r20	; 0x1a
    140c:	5b 8f       	std	Y+27, r21	; 0x1b
    140e:	ae 0c       	add	r10, r14
    1410:	bf 1c       	adc	r11, r15
		btr -= rcnt; *br += rcnt;
    1412:	ce 18       	sub	r12, r14
    1414:	df 08       	sbc	r13, r15
    1416:	f4 01       	movw	r30, r8
    1418:	80 81       	ld	r24, Z
    141a:	91 81       	ldd	r25, Z+1	; 0x01
    141c:	8e 0d       	add	r24, r14
    141e:	9f 1d       	adc	r25, r15
    1420:	91 83       	std	Z+1, r25	; 0x01
    1422:	80 83       	st	Z, r24
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    1424:	c1 14       	cp	r12, r1
    1426:	d1 04       	cpc	r13, r1
    1428:	09 f0       	breq	.+2      	; 0x142c <pf_read+0x1ce>
    142a:	4d cf       	rjmp	.-358    	; 0x12c6 <pf_read+0x68>
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <pf_read+0x1da>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
    1432:	1a 82       	std	Y+2, r1	; 0x02
    1434:	21 e0       	ldi	r18, 0x01	; 1
    1436:	30 e0       	ldi	r19, 0x00	; 0
	return FR_DISK_ERR;
}
    1438:	c9 01       	movw	r24, r18
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	e0 e1       	ldi	r30, 0x10	; 16
    1440:	9e c5       	rjmp	.+2876   	; 0x1f7e <__epilogue_restores__+0x4>

00001442 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    1442:	a0 e0       	ldi	r26, 0x00	; 0
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e6 e2       	ldi	r30, 0x26	; 38
    1448:	fa e0       	ldi	r31, 0x0A	; 10
    144a:	83 c5       	rjmp	.+2822   	; 0x1f52 <__prologue_saves__+0x10>
    144c:	b8 2e       	mov	r11, r24
    144e:	a9 2e       	mov	r10, r25
    1450:	6a 01       	movw	r12, r20
    1452:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
    1454:	2e ef       	ldi	r18, 0xFE	; 254
    1456:	31 e0       	ldi	r19, 0x01	; 1
    1458:	02 e0       	ldi	r16, 0x02	; 2
    145a:	10 e0       	ldi	r17, 0x00	; 0
    145c:	a1 d3       	rcall	.+1858   	; 0x1ba0 <disk_readp>
    145e:	89 2b       	or	r24, r25
    1460:	11 f0       	breq	.+4      	; 0x1466 <check_fs+0x24>
    1462:	23 e0       	ldi	r18, 0x03	; 3
    1464:	31 c0       	rjmp	.+98     	; 0x14c8 <check_fs+0x86>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    1466:	cb 2d       	mov	r28, r11
    1468:	da 2d       	mov	r29, r10
    146a:	88 81       	ld	r24, Y
    146c:	99 81       	ldd	r25, Y+1	; 0x01
    146e:	85 55       	subi	r24, 0x55	; 85
    1470:	9a 4a       	sbci	r25, 0xAA	; 170
    1472:	11 f0       	breq	.+4      	; 0x1478 <check_fs+0x36>
    1474:	22 e0       	ldi	r18, 0x02	; 2
    1476:	28 c0       	rjmp	.+80     	; 0x14c8 <check_fs+0x86>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
    1478:	8b 2d       	mov	r24, r11
    147a:	9a 2d       	mov	r25, r10
    147c:	b7 01       	movw	r22, r14
    147e:	a6 01       	movw	r20, r12
    1480:	26 e3       	ldi	r18, 0x36	; 54
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	02 e0       	ldi	r16, 0x02	; 2
    1486:	10 e0       	ldi	r17, 0x00	; 0
    1488:	8b d3       	rcall	.+1814   	; 0x1ba0 <disk_readp>
    148a:	89 2b       	or	r24, r25
    148c:	39 f4       	brne	.+14     	; 0x149c <check_fs+0x5a>
    148e:	88 81       	ld	r24, Y
    1490:	99 81       	ldd	r25, Y+1	; 0x01
    1492:	86 54       	subi	r24, 0x46	; 70
    1494:	91 44       	sbci	r25, 0x41	; 65
    1496:	11 f4       	brne	.+4      	; 0x149c <check_fs+0x5a>
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	16 c0       	rjmp	.+44     	; 0x14c8 <check_fs+0x86>
		return 0;
#if _FS_FAT32
	if (!disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    149c:	8b 2d       	mov	r24, r11
    149e:	9a 2d       	mov	r25, r10
    14a0:	b7 01       	movw	r22, r14
    14a2:	a6 01       	movw	r20, r12
    14a4:	22 e5       	ldi	r18, 0x52	; 82
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	02 e0       	ldi	r16, 0x02	; 2
    14aa:	10 e0       	ldi	r17, 0x00	; 0
    14ac:	79 d3       	rcall	.+1778   	; 0x1ba0 <disk_readp>
    14ae:	89 2b       	or	r24, r25
    14b0:	11 f0       	breq	.+4      	; 0x14b6 <check_fs+0x74>
    14b2:	21 e0       	ldi	r18, 0x01	; 1
    14b4:	09 c0       	rjmp	.+18     	; 0x14c8 <check_fs+0x86>
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	88 81       	ld	r24, Y
    14ba:	99 81       	ldd	r25, Y+1	; 0x01
    14bc:	86 54       	subi	r24, 0x46	; 70
    14be:	91 44       	sbci	r25, 0x41	; 65
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <check_fs+0x82>
    14c2:	21 e0       	ldi	r18, 0x01	; 1
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	28 27       	eor	r18, r24
		return 0;
#endif
	return 1;
}
    14c8:	82 2f       	mov	r24, r18
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	ea e0       	ldi	r30, 0x0A	; 10
    14d0:	5c c5       	rjmp	.+2744   	; 0x1f8a <__epilogue_restores__+0x10>

000014d2 <pf_write>:
FRESULT pf_write (
	const void* buff,	/* Pointer to the data to be written */
	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
	WORD* bw			/* Pointer to number of bytes written */
)
{
    14d2:	a0 e0       	ldi	r26, 0x00	; 0
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	ee e6       	ldi	r30, 0x6E	; 110
    14d8:	fa e0       	ldi	r31, 0x0A	; 10
    14da:	35 c5       	rjmp	.+2666   	; 0x1f46 <__prologue_saves__+0x4>
    14dc:	fc 01       	movw	r30, r24
    14de:	5b 01       	movw	r10, r22
    14e0:	3a 01       	movw	r6, r20
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
	WORD wcnt;
	FATFS *fs = FatFs;
    14e2:	c0 91 64 00 	lds	r28, 0x0064
    14e6:	d0 91 65 00 	lds	r29, 0x0065


	*bw = 0;
    14ea:	da 01       	movw	r26, r20
    14ec:	1d 92       	st	X+, r1
    14ee:	1c 92       	st	X, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    14f0:	20 97       	sbiw	r28, 0x00	; 0
    14f2:	19 f4       	brne	.+6      	; 0x14fa <pf_write+0x28>
    14f4:	26 e0       	ldi	r18, 0x06	; 6
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	04 c1       	rjmp	.+520    	; 0x1702 <pf_write+0x230>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	80 fd       	sbrc	r24, 0
    1500:	03 c0       	rjmp	.+6      	; 0x1508 <pf_write+0x36>
    1502:	25 e0       	ldi	r18, 0x05	; 5
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	fd c0       	rjmp	.+506    	; 0x1702 <pf_write+0x230>
    1508:	80 74       	andi	r24, 0x40	; 64
    150a:	90 70       	andi	r25, 0x00	; 0
		return FR_NOT_OPENED;

	if (!btw) {		/* Finalize request */
    150c:	61 15       	cp	r22, r1
    150e:	71 05       	cpc	r23, r1
    1510:	81 f4       	brne	.+32     	; 0x1532 <pf_write+0x60>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
    1512:	89 2b       	or	r24, r25
    1514:	51 f0       	breq	.+20     	; 0x152a <pf_write+0x58>
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	36 d2       	rcall	.+1132   	; 0x1990 <disk_writep>
    1524:	89 2b       	or	r24, r25
    1526:	09 f0       	breq	.+2      	; 0x152a <pf_write+0x58>
    1528:	e9 c0       	rjmp	.+466    	; 0x16fc <pf_write+0x22a>
		fs->flag &= ~FA__WIP;
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	8f 7b       	andi	r24, 0xBF	; 191
    152e:	8a 83       	std	Y+2, r24	; 0x02
    1530:	e2 c0       	rjmp	.+452    	; 0x16f6 <pf_write+0x224>
		return FR_OK;
	} else {		/* Write data request */
		if (!(fs->flag & FA__WIP))		/* Round down fptr to the sector boundary */
    1532:	89 2b       	or	r24, r25
    1534:	51 f4       	brne	.+20     	; 0x154a <pf_write+0x78>
			fs->fptr &= 0xFFFFFE00;
    1536:	88 8d       	ldd	r24, Y+24	; 0x18
    1538:	99 8d       	ldd	r25, Y+25	; 0x19
    153a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    153c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    153e:	80 70       	andi	r24, 0x00	; 0
    1540:	9e 7f       	andi	r25, 0xFE	; 254
    1542:	88 8f       	std	Y+24, r24	; 0x18
    1544:	99 8f       	std	Y+25, r25	; 0x19
    1546:	aa 8f       	std	Y+26, r26	; 0x1a
    1548:	bb 8f       	std	Y+27, r27	; 0x1b
	}
	remain = fs->fsize - fs->fptr;
    154a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    154c:	3d 8d       	ldd	r19, Y+29	; 0x1d
    154e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1550:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1552:	88 8d       	ldd	r24, Y+24	; 0x18
    1554:	99 8d       	ldd	r25, Y+25	; 0x19
    1556:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1558:	bb 8d       	ldd	r27, Y+27	; 0x1b
    155a:	28 1b       	sub	r18, r24
    155c:	39 0b       	sbc	r19, r25
    155e:	4a 0b       	sbc	r20, r26
    1560:	5b 0b       	sbc	r21, r27
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
    1562:	c5 01       	movw	r24, r10
    1564:	a0 e0       	ldi	r26, 0x00	; 0
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	28 17       	cp	r18, r24
    156a:	39 07       	cpc	r19, r25
    156c:	4a 07       	cpc	r20, r26
    156e:	5b 07       	cpc	r21, r27
    1570:	08 f4       	brcc	.+2      	; 0x1574 <pf_write+0xa2>
    1572:	59 01       	movw	r10, r18
	WORD* bw			/* Pointer to number of bytes written */
)
{
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
    1574:	4f 01       	movw	r8, r30
			if (!sect) goto fw_abort;
			fs->dsect = sect + fs->csect++;
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    1576:	41 2c       	mov	r4, r1
    1578:	b2 e0       	ldi	r27, 0x02	; 2
    157a:	5b 2e       	mov	r5, r27
    157c:	b8 c0       	rjmp	.+368    	; 0x16ee <pf_write+0x21c>
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
		if (((WORD)fs->fptr % 512) == 0) {				/* On the sector boundary? */
    157e:	e8 8c       	ldd	r14, Y+24	; 0x18
    1580:	f9 8c       	ldd	r15, Y+25	; 0x19
    1582:	0a 8d       	ldd	r16, Y+26	; 0x1a
    1584:	1b 8d       	ldd	r17, Y+27	; 0x1b
    1586:	c7 01       	movw	r24, r14
    1588:	91 70       	andi	r25, 0x01	; 1
    158a:	89 2b       	or	r24, r25
    158c:	09 f0       	breq	.+2      	; 0x1590 <pf_write+0xbe>
    158e:	73 c0       	rjmp	.+230    	; 0x1676 <pf_write+0x1a4>
			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
    1590:	c8 01       	movw	r24, r16
    1592:	b7 01       	movw	r22, r14
    1594:	a9 e0       	ldi	r26, 0x09	; 9
    1596:	96 95       	lsr	r25
    1598:	87 95       	ror	r24
    159a:	77 95       	ror	r23
    159c:	67 95       	ror	r22
    159e:	aa 95       	dec	r26
    15a0:	d1 f7       	brne	.-12     	; 0x1596 <pf_write+0xc4>
    15a2:	29 81       	ldd	r18, Y+1	; 0x01
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e0       	ldi	r20, 0x00	; 0
    15a8:	50 e0       	ldi	r21, 0x00	; 0
    15aa:	a9 d4       	rcall	.+2386   	; 0x1efe <__udivmodsi4>
    15ac:	61 15       	cp	r22, r1
    15ae:	71 05       	cpc	r23, r1
    15b0:	81 05       	cpc	r24, r1
    15b2:	91 05       	cpc	r25, r1
    15b4:	d1 f4       	brne	.+52     	; 0x15ea <pf_write+0x118>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    15b6:	e1 14       	cp	r14, r1
    15b8:	f1 04       	cpc	r15, r1
    15ba:	01 05       	cpc	r16, r1
    15bc:	11 05       	cpc	r17, r1
    15be:	29 f4       	brne	.+10     	; 0x15ca <pf_write+0xf8>
    15c0:	68 a1       	ldd	r22, Y+32	; 0x20
    15c2:	79 a1       	ldd	r23, Y+33	; 0x21
    15c4:	8a a1       	ldd	r24, Y+34	; 0x22
    15c6:	9b a1       	ldd	r25, Y+35	; 0x23
    15c8:	05 c0       	rjmp	.+10     	; 0x15d4 <pf_write+0x102>
    15ca:	6c a1       	ldd	r22, Y+36	; 0x24
    15cc:	7d a1       	ldd	r23, Y+37	; 0x25
    15ce:	8e a1       	ldd	r24, Y+38	; 0x26
    15d0:	9f a1       	ldd	r25, Y+39	; 0x27
    15d2:	49 d9       	rcall	.-3438   	; 0x866 <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
    15d4:	62 30       	cpi	r22, 0x02	; 2
    15d6:	71 05       	cpc	r23, r1
    15d8:	81 05       	cpc	r24, r1
    15da:	91 05       	cpc	r25, r1
    15dc:	08 f4       	brcc	.+2      	; 0x15e0 <pf_write+0x10e>
    15de:	8e c0       	rjmp	.+284    	; 0x16fc <pf_write+0x22a>
				fs->curr_clust = clst;				/* Update current cluster */
    15e0:	6c a3       	std	Y+36, r22	; 0x24
    15e2:	7d a3       	std	Y+37, r23	; 0x25
    15e4:	8e a3       	std	Y+38, r24	; 0x26
    15e6:	9f a3       	std	Y+39, r25	; 0x27
				fs->csect = 0;						/* Reset sector offset in the cluster */
    15e8:	1b 82       	std	Y+3, r1	; 0x03
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    15ea:	00 91 64 00 	lds	r16, 0x0064
    15ee:	10 91 65 00 	lds	r17, 0x0065


	clst -= 2;
    15f2:	2c a1       	ldd	r18, Y+36	; 0x24
    15f4:	3d a1       	ldd	r19, Y+37	; 0x25
    15f6:	4e a1       	ldd	r20, Y+38	; 0x26
    15f8:	5f a1       	ldd	r21, Y+39	; 0x27
    15fa:	22 50       	subi	r18, 0x02	; 2
    15fc:	30 40       	sbci	r19, 0x00	; 0
    15fe:	40 40       	sbci	r20, 0x00	; 0
    1600:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1602:	f8 01       	movw	r30, r16
    1604:	80 85       	ldd	r24, Z+8	; 0x08
    1606:	91 85       	ldd	r25, Z+9	; 0x09
    1608:	a2 85       	ldd	r26, Z+10	; 0x0a
    160a:	b3 85       	ldd	r27, Z+11	; 0x0b
    160c:	02 97       	sbiw	r24, 0x02	; 2
    160e:	a1 09       	sbc	r26, r1
    1610:	b1 09       	sbc	r27, r1
    1612:	28 17       	cp	r18, r24
    1614:	39 07       	cpc	r19, r25
    1616:	4a 07       	cpc	r20, r26
    1618:	5b 07       	cpc	r21, r27
    161a:	08 f0       	brcs	.+2      	; 0x161e <pf_write+0x14c>
    161c:	6f c0       	rjmp	.+222    	; 0x16fc <pf_write+0x22a>
	return (DWORD)clst * fs->csize + fs->database;
    161e:	61 81       	ldd	r22, Z+1	; 0x01
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	52 d4       	rcall	.+2212   	; 0x1ecc <__mulsi3>
    1628:	9b 01       	movw	r18, r22
    162a:	ac 01       	movw	r20, r24
    162c:	f8 01       	movw	r30, r16
    162e:	84 89       	ldd	r24, Z+20	; 0x14
    1630:	95 89       	ldd	r25, Z+21	; 0x15
    1632:	a6 89       	ldd	r26, Z+22	; 0x16
    1634:	b7 89       	ldd	r27, Z+23	; 0x17
    1636:	28 0f       	add	r18, r24
    1638:	39 1f       	adc	r19, r25
    163a:	4a 1f       	adc	r20, r26
    163c:	5b 1f       	adc	r21, r27
				if (clst <= 1) goto fw_abort;
				fs->curr_clust = clst;				/* Update current cluster */
				fs->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fw_abort;
    163e:	21 15       	cp	r18, r1
    1640:	31 05       	cpc	r19, r1
    1642:	41 05       	cpc	r20, r1
    1644:	51 05       	cpc	r21, r1
    1646:	09 f4       	brne	.+2      	; 0x164a <pf_write+0x178>
    1648:	59 c0       	rjmp	.+178    	; 0x16fc <pf_write+0x22a>
			fs->dsect = sect + fs->csect++;
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	ba 01       	movw	r22, r20
    164e:	a9 01       	movw	r20, r18
    1650:	48 0f       	add	r20, r24
    1652:	51 1d       	adc	r21, r1
    1654:	61 1d       	adc	r22, r1
    1656:	71 1d       	adc	r23, r1
    1658:	48 a7       	std	Y+40, r20	; 0x28
    165a:	59 a7       	std	Y+41, r21	; 0x29
    165c:	6a a7       	std	Y+42, r22	; 0x2a
    165e:	7b a7       	std	Y+43, r23	; 0x2b
    1660:	8f 5f       	subi	r24, 0xFF	; 255
    1662:	8b 83       	std	Y+3, r24	; 0x03
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	93 d1       	rcall	.+806    	; 0x1990 <disk_writep>
    166a:	89 2b       	or	r24, r25
    166c:	09 f0       	breq	.+2      	; 0x1670 <pf_write+0x19e>
    166e:	46 c0       	rjmp	.+140    	; 0x16fc <pf_write+0x22a>
			fs->flag |= FA__WIP;
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	80 64       	ori	r24, 0x40	; 64
    1674:	8a 83       	std	Y+2, r24	; 0x02
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    1676:	88 8d       	ldd	r24, Y+24	; 0x18
    1678:	99 8d       	ldd	r25, Y+25	; 0x19
    167a:	91 70       	andi	r25, 0x01	; 1
    167c:	92 01       	movw	r18, r4
    167e:	28 1b       	sub	r18, r24
    1680:	39 0b       	sbc	r19, r25
    1682:	65 01       	movw	r12, r10
    1684:	2a 15       	cp	r18, r10
    1686:	3b 05       	cpc	r19, r11
    1688:	08 f4       	brcc	.+2      	; 0x168c <pf_write+0x1ba>
    168a:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
    168c:	76 01       	movw	r14, r12
    168e:	00 e0       	ldi	r16, 0x00	; 0
    1690:	10 e0       	ldi	r17, 0x00	; 0
    1692:	c4 01       	movw	r24, r8
    1694:	b8 01       	movw	r22, r16
    1696:	a7 01       	movw	r20, r14
    1698:	7b d1       	rcall	.+758    	; 0x1990 <disk_writep>
    169a:	89 2b       	or	r24, r25
    169c:	79 f5       	brne	.+94     	; 0x16fc <pf_write+0x22a>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    169e:	88 8d       	ldd	r24, Y+24	; 0x18
    16a0:	99 8d       	ldd	r25, Y+25	; 0x19
    16a2:	aa 8d       	ldd	r26, Y+26	; 0x1a
    16a4:	bb 8d       	ldd	r27, Y+27	; 0x1b
    16a6:	8e 0d       	add	r24, r14
    16a8:	9f 1d       	adc	r25, r15
    16aa:	a0 1f       	adc	r26, r16
    16ac:	b1 1f       	adc	r27, r17
    16ae:	9c 01       	movw	r18, r24
    16b0:	88 8f       	std	Y+24, r24	; 0x18
    16b2:	99 8f       	std	Y+25, r25	; 0x19
    16b4:	aa 8f       	std	Y+26, r26	; 0x1a
    16b6:	bb 8f       	std	Y+27, r27	; 0x1b
		btw -= wcnt; *bw += wcnt;
    16b8:	d3 01       	movw	r26, r6
    16ba:	8d 91       	ld	r24, X+
    16bc:	9c 91       	ld	r25, X
    16be:	11 97       	sbiw	r26, 0x01	; 1
    16c0:	8c 0d       	add	r24, r12
    16c2:	9d 1d       	adc	r25, r13
    16c4:	8d 93       	st	X+, r24
    16c6:	9c 93       	st	X, r25
		if (((WORD)fs->fptr % 512) == 0) {
    16c8:	31 70       	andi	r19, 0x01	; 1
    16ca:	23 2b       	or	r18, r19
    16cc:	61 f4       	brne	.+24     	; 0x16e6 <pf_write+0x214>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	5a d1       	rcall	.+692    	; 0x1990 <disk_writep>
    16dc:	89 2b       	or	r24, r25
    16de:	71 f4       	brne	.+28     	; 0x16fc <pf_write+0x22a>
			fs->flag &= ~FA__WIP;
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	8f 7b       	andi	r24, 0xBF	; 191
    16e4:	8a 83       	std	Y+2, r24	; 0x02
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    16e6:	8c 0c       	add	r8, r12
    16e8:	9d 1c       	adc	r9, r13
		btw -= wcnt; *bw += wcnt;
    16ea:	ac 18       	sub	r10, r12
    16ec:	bd 08       	sbc	r11, r13
			fs->fptr &= 0xFFFFFE00;
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
    16ee:	a1 14       	cp	r10, r1
    16f0:	b1 04       	cpc	r11, r1
    16f2:	09 f0       	breq	.+2      	; 0x16f6 <pf_write+0x224>
    16f4:	44 cf       	rjmp	.-376    	; 0x157e <pf_write+0xac>
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	03 c0       	rjmp	.+6      	; 0x1702 <pf_write+0x230>
	}

	return FR_OK;

fw_abort:
	fs->flag = 0;
    16fc:	1a 82       	std	Y+2, r1	; 0x02
    16fe:	21 e0       	ldi	r18, 0x01	; 1
    1700:	30 e0       	ldi	r19, 0x00	; 0
	return FR_DISK_ERR;
}
    1702:	c9 01       	movw	r24, r18
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	e0 e1       	ldi	r30, 0x10	; 16
    170a:	39 c4       	rjmp	.+2162   	; 0x1f7e <__epilogue_restores__+0x4>

0000170c <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    170c:	a4 e2       	ldi	r26, 0x24	; 36
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	eb e8       	ldi	r30, 0x8B	; 139
    1712:	fb e0       	ldi	r31, 0x0B	; 11
    1714:	1a c4       	rjmp	.+2100   	; 0x1f4a <__prologue_saves__+0x8>
    1716:	5c 01       	movw	r10, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    1718:	10 92 65 00 	sts	0x0065, r1
    171c:	10 92 64 00 	sts	0x0064, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	09 f4       	brne	.+2      	; 0x1726 <pf_mount+0x1a>
    1724:	e7 c0       	rjmp	.+462    	; 0x18f4 <pf_mount+0x1e8>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    1726:	a2 d1       	rcall	.+836    	; 0x1a6c <disk_initialize>
    1728:	80 ff       	sbrs	r24, 0
    172a:	03 c0       	rjmp	.+6      	; 0x1732 <pf_mount+0x26>
    172c:	22 e0       	ldi	r18, 0x02	; 2
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	e9 c0       	rjmp	.+466    	; 0x1904 <pf_mount+0x1f8>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    1732:	4e 01       	movw	r8, r28
    1734:	08 94       	sec
    1736:	81 1c       	adc	r8, r1
    1738:	91 1c       	adc	r9, r1
    173a:	c4 01       	movw	r24, r8
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	50 e0       	ldi	r21, 0x00	; 0
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	7e de       	rcall	.-772    	; 0x1442 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	21 f0       	breq	.+8      	; 0x1752 <pf_mount+0x46>
    174a:	cc 24       	eor	r12, r12
    174c:	dd 24       	eor	r13, r13
    174e:	76 01       	movw	r14, r12
    1750:	19 c0       	rjmp	.+50     	; 0x1784 <pf_mount+0x78>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    1752:	c4 01       	movw	r24, r8
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	50 e0       	ldi	r21, 0x00	; 0
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	2e eb       	ldi	r18, 0xBE	; 190
    175e:	31 e0       	ldi	r19, 0x01	; 1
    1760:	00 e1       	ldi	r16, 0x10	; 16
    1762:	10 e0       	ldi	r17, 0x00	; 0
    1764:	1d d2       	rcall	.+1082   	; 0x1ba0 <disk_readp>
    1766:	89 2b       	or	r24, r25
    1768:	09 f0       	breq	.+2      	; 0x176c <pf_mount+0x60>
    176a:	c7 c0       	rjmp	.+398    	; 0x18fa <pf_mount+0x1ee>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    176c:	8d 81       	ldd	r24, Y+5	; 0x05
    176e:	88 23       	and	r24, r24
    1770:	09 f4       	brne	.+2      	; 0x1774 <pf_mount+0x68>
    1772:	c6 c0       	rjmp	.+396    	; 0x1900 <pf_mount+0x1f4>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    1774:	c9 84       	ldd	r12, Y+9	; 0x09
    1776:	da 84       	ldd	r13, Y+10	; 0x0a
    1778:	eb 84       	ldd	r14, Y+11	; 0x0b
    177a:	fc 84       	ldd	r15, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    177c:	c4 01       	movw	r24, r8
    177e:	b7 01       	movw	r22, r14
    1780:	a6 01       	movw	r20, r12
    1782:	5f de       	rcall	.-834    	; 0x1442 <check_fs>
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1784:	83 30       	cpi	r24, 0x03	; 3
    1786:	09 f4       	brne	.+2      	; 0x178a <pf_mount+0x7e>
    1788:	b8 c0       	rjmp	.+368    	; 0x18fa <pf_mount+0x1ee>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    178a:	88 23       	and	r24, r24
    178c:	09 f0       	breq	.+2      	; 0x1790 <pf_mount+0x84>
    178e:	b8 c0       	rjmp	.+368    	; 0x1900 <pf_mount+0x1f4>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    1790:	ce 01       	movw	r24, r28
    1792:	01 96       	adiw	r24, 0x01	; 1
    1794:	b7 01       	movw	r22, r14
    1796:	a6 01       	movw	r20, r12
    1798:	2d e0       	ldi	r18, 0x0D	; 13
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	04 e2       	ldi	r16, 0x24	; 36
    179e:	10 e0       	ldi	r17, 0x00	; 0
    17a0:	ff d1       	rcall	.+1022   	; 0x1ba0 <disk_readp>
    17a2:	89 2b       	or	r24, r25
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <pf_mount+0x9c>
    17a6:	a9 c0       	rjmp	.+338    	; 0x18fa <pf_mount+0x1ee>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    17a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    17ac:	bc 01       	movw	r22, r24
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    17b2:	61 15       	cp	r22, r1
    17b4:	71 05       	cpc	r23, r1
    17b6:	81 05       	cpc	r24, r1
    17b8:	91 05       	cpc	r25, r1
    17ba:	21 f4       	brne	.+8      	; 0x17c4 <pf_mount+0xb8>
    17bc:	68 8d       	ldd	r22, Y+24	; 0x18
    17be:	79 8d       	ldd	r23, Y+25	; 0x19
    17c0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17c2:	9b 8d       	ldd	r25, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    17c4:	2c 81       	ldd	r18, Y+4	; 0x04
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	50 e0       	ldi	r21, 0x00	; 0
    17cc:	7f d3       	rcall	.+1790   	; 0x1ecc <__mulsi3>
    17ce:	3b 01       	movw	r6, r22
    17d0:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	9b 81       	ldd	r25, Y+3	; 0x03
    17d6:	a0 e0       	ldi	r26, 0x00	; 0
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	c8 0e       	add	r12, r24
    17dc:	d9 1e       	adc	r13, r25
    17de:	ea 1e       	adc	r14, r26
    17e0:	fb 1e       	adc	r15, r27
    17e2:	f5 01       	movw	r30, r10
    17e4:	c4 86       	std	Z+12, r12	; 0x0c
    17e6:	d5 86       	std	Z+13, r13	; 0x0d
    17e8:	e6 86       	std	Z+14, r14	; 0x0e
    17ea:	f7 86       	std	Z+15, r15	; 0x0f
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	81 83       	std	Z+1, r24	; 0x01
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    17f0:	2d 81       	ldd	r18, Y+5	; 0x05
    17f2:	3e 81       	ldd	r19, Y+6	; 0x06
    17f4:	35 83       	std	Z+5, r19	; 0x05
    17f6:	24 83       	std	Z+4, r18	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    17f8:	8f 81       	ldd	r24, Y+7	; 0x07
    17fa:	98 85       	ldd	r25, Y+8	; 0x08
    17fc:	7c 01       	movw	r14, r24
    17fe:	00 e0       	ldi	r16, 0x00	; 0
    1800:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    1802:	e1 14       	cp	r14, r1
    1804:	f1 04       	cpc	r15, r1
    1806:	01 05       	cpc	r16, r1
    1808:	11 05       	cpc	r17, r1
    180a:	21 f4       	brne	.+8      	; 0x1814 <pf_mount+0x108>
    180c:	ec 88       	ldd	r14, Y+20	; 0x14
    180e:	fd 88       	ldd	r15, Y+21	; 0x15
    1810:	0e 89       	ldd	r16, Y+22	; 0x16
    1812:	1f 89       	ldd	r17, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	9b 81       	ldd	r25, Y+3	; 0x03
    1818:	a0 e0       	ldi	r26, 0x00	; 0
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e8 1a       	sub	r14, r24
    181e:	f9 0a       	sbc	r15, r25
    1820:	0a 0b       	sbc	r16, r26
    1822:	1b 0b       	sbc	r17, r27
    1824:	e6 18       	sub	r14, r6
    1826:	f7 08       	sbc	r15, r7
    1828:	08 09       	sbc	r16, r8
    182a:	19 09       	sbc	r17, r9
    182c:	44 e0       	ldi	r20, 0x04	; 4
    182e:	36 95       	lsr	r19
    1830:	27 95       	ror	r18
    1832:	4a 95       	dec	r20
    1834:	e1 f7       	brne	.-8      	; 0x182e <pf_mount+0x122>
    1836:	c9 01       	movw	r24, r18
    1838:	a0 e0       	ldi	r26, 0x00	; 0
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e8 1a       	sub	r14, r24
    183e:	f9 0a       	sbc	r15, r25
    1840:	0a 0b       	sbc	r16, r26
    1842:	1b 0b       	sbc	r17, r27
    1844:	f5 01       	movw	r30, r10
    1846:	21 81       	ldd	r18, Z+1	; 0x01
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e0       	ldi	r20, 0x00	; 0
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	c8 01       	movw	r24, r16
    1850:	b7 01       	movw	r22, r14
    1852:	55 d3       	rcall	.+1706   	; 0x1efe <__udivmodsi4>
    1854:	2e 5f       	subi	r18, 0xFE	; 254
    1856:	3f 4f       	sbci	r19, 0xFF	; 255
    1858:	4f 4f       	sbci	r20, 0xFF	; 255
    185a:	5f 4f       	sbci	r21, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->max_clust = (CLUST)mclst;
    185c:	f5 01       	movw	r30, r10
    185e:	20 87       	std	Z+8, r18	; 0x08
    1860:	31 87       	std	Z+9, r19	; 0x09
    1862:	42 87       	std	Z+10, r20	; 0x0a
    1864:	53 87       	std	Z+11, r21	; 0x0b

	fmt = FS_FAT12;							/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;		/* Number of clusters >= 0xFF5 */
    1866:	27 3f       	cpi	r18, 0xF7	; 247
    1868:	ff e0       	ldi	r31, 0x0F	; 15
    186a:	3f 07       	cpc	r19, r31
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	4f 07       	cpc	r20, r31
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	5f 07       	cpc	r21, r31
    1874:	10 f4       	brcc	.+4      	; 0x187a <pf_mount+0x16e>
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	08 c0       	rjmp	.+16     	; 0x188a <pf_mount+0x17e>
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    187a:	27 5f       	subi	r18, 0xF7	; 247
    187c:	3f 4f       	sbci	r19, 0xFF	; 255
    187e:	40 40       	sbci	r20, 0x00	; 0
    1880:	50 40       	sbci	r21, 0x00	; 0
    1882:	10 f0       	brcs	.+4      	; 0x1888 <pf_mount+0x17c>
    1884:	83 e0       	ldi	r24, 0x03	; 3
    1886:	01 c0       	rjmp	.+2      	; 0x188a <pf_mount+0x17e>
    1888:	82 e0       	ldi	r24, 0x02	; 2
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    188a:	f5 01       	movw	r30, r10
    188c:	80 83       	st	Z, r24
#if _FS_FAT32
	if (fmt == FS_FAT32)
    188e:	83 30       	cpi	r24, 0x03	; 3
    1890:	29 f4       	brne	.+10     	; 0x189c <pf_mount+0x190>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    1892:	88 a1       	ldd	r24, Y+32	; 0x20
    1894:	99 a1       	ldd	r25, Y+33	; 0x21
    1896:	aa a1       	ldd	r26, Y+34	; 0x22
    1898:	bb a1       	ldd	r27, Y+35	; 0x23
    189a:	09 c0       	rjmp	.+18     	; 0x18ae <pf_mount+0x1a2>
	else
#endif
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    189c:	f5 01       	movw	r30, r10
    189e:	84 85       	ldd	r24, Z+12	; 0x0c
    18a0:	95 85       	ldd	r25, Z+13	; 0x0d
    18a2:	a6 85       	ldd	r26, Z+14	; 0x0e
    18a4:	b7 85       	ldd	r27, Z+15	; 0x0f
    18a6:	86 0d       	add	r24, r6
    18a8:	97 1d       	adc	r25, r7
    18aa:	a8 1d       	adc	r26, r8
    18ac:	b9 1d       	adc	r27, r9
    18ae:	80 8b       	std	Z+16, r24	; 0x10
    18b0:	91 8b       	std	Z+17, r25	; 0x11
    18b2:	a2 8b       	std	Z+18, r26	; 0x12
    18b4:	b3 8b       	std	Z+19, r27	; 0x13
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    18b6:	f5 01       	movw	r30, r10
    18b8:	84 81       	ldd	r24, Z+4	; 0x04
    18ba:	95 81       	ldd	r25, Z+5	; 0x05
    18bc:	24 e0       	ldi	r18, 0x04	; 4
    18be:	96 95       	lsr	r25
    18c0:	87 95       	ror	r24
    18c2:	2a 95       	dec	r18
    18c4:	e1 f7       	brne	.-8      	; 0x18be <pf_mount+0x1b2>
    18c6:	a0 e0       	ldi	r26, 0x00	; 0
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	24 85       	ldd	r18, Z+12	; 0x0c
    18cc:	35 85       	ldd	r19, Z+13	; 0x0d
    18ce:	46 85       	ldd	r20, Z+14	; 0x0e
    18d0:	57 85       	ldd	r21, Z+15	; 0x0f
    18d2:	82 0f       	add	r24, r18
    18d4:	93 1f       	adc	r25, r19
    18d6:	a4 1f       	adc	r26, r20
    18d8:	b5 1f       	adc	r27, r21
    18da:	86 0d       	add	r24, r6
    18dc:	97 1d       	adc	r25, r7
    18de:	a8 1d       	adc	r26, r8
    18e0:	b9 1d       	adc	r27, r9
    18e2:	84 8b       	std	Z+20, r24	; 0x14
    18e4:	95 8b       	std	Z+21, r25	; 0x15
    18e6:	a6 8b       	std	Z+22, r26	; 0x16
    18e8:	b7 8b       	std	Z+23, r27	; 0x17

	fs->flag = 0;
    18ea:	12 82       	std	Z+2, r1	; 0x02
	FatFs = fs;
    18ec:	b0 92 65 00 	sts	0x0065, r11
    18f0:	a0 92 64 00 	sts	0x0064, r10
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	05 c0       	rjmp	.+10     	; 0x1904 <pf_mount+0x1f8>

	return FR_OK;
    18fa:	21 e0       	ldi	r18, 0x01	; 1
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <pf_mount+0x1f8>
    1900:	27 e0       	ldi	r18, 0x07	; 7
    1902:	30 e0       	ldi	r19, 0x00	; 0
}
    1904:	c9 01       	movw	r24, r18
    1906:	a4 96       	adiw	r28, 0x24	; 36
    1908:	ee e0       	ldi	r30, 0x0E	; 14
    190a:	3b c3       	rjmp	.+1654   	; 0x1f82 <__epilogue_restores__+0x8>

0000190c <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    190c:	df 92       	push	r13
    190e:	ef 92       	push	r14
    1910:	ff 92       	push	r15
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	d8 2e       	mov	r13, r24
    1918:	7a 01       	movw	r14, r20
    191a:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    191c:	87 ff       	sbrs	r24, 7
    191e:	0a c0       	rjmp	.+20     	; 0x1934 <send_cmd+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    1920:	87 e7       	ldi	r24, 0x77	; 119
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	60 e0       	ldi	r22, 0x00	; 0
    1928:	70 e0       	ldi	r23, 0x00	; 0
    192a:	f0 df       	rcall	.-32     	; 0x190c <send_cmd>
		if (res > 1) return res;
    192c:	82 30       	cpi	r24, 0x02	; 2
    192e:	50 f5       	brcc	.+84     	; 0x1984 <send_cmd+0x78>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    1930:	8f e7       	ldi	r24, 0x7F	; 127
    1932:	d8 22       	and	r13, r24
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	DESELECT();
    1934:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
    1936:	b4 d2       	rcall	.+1384   	; 0x1ea0 <rcv_spi>
	SELECT();
    1938:	c3 98       	cbi	0x18, 3	; 24
	rcv_spi();
    193a:	b2 d2       	rcall	.+1380   	; 0x1ea0 <rcv_spi>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
    193c:	8d 2d       	mov	r24, r13
    193e:	b1 d2       	rcall	.+1378   	; 0x1ea2 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    1940:	81 2f       	mov	r24, r17
    1942:	99 27       	eor	r25, r25
    1944:	aa 27       	eor	r26, r26
    1946:	bb 27       	eor	r27, r27
    1948:	ac d2       	rcall	.+1368   	; 0x1ea2 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    194a:	c8 01       	movw	r24, r16
    194c:	aa 27       	eor	r26, r26
    194e:	bb 27       	eor	r27, r27
    1950:	a8 d2       	rcall	.+1360   	; 0x1ea2 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    1952:	bb 27       	eor	r27, r27
    1954:	a1 2f       	mov	r26, r17
    1956:	90 2f       	mov	r25, r16
    1958:	8f 2d       	mov	r24, r15
    195a:	a3 d2       	rcall	.+1350   	; 0x1ea2 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    195c:	8e 2d       	mov	r24, r14
    195e:	a1 d2       	rcall	.+1346   	; 0x1ea2 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    1960:	80 e4       	ldi	r24, 0x40	; 64
    1962:	d8 16       	cp	r13, r24
    1964:	11 f4       	brne	.+4      	; 0x196a <send_cmd+0x5e>
    1966:	85 e9       	ldi	r24, 0x95	; 149
    1968:	06 c0       	rjmp	.+12     	; 0x1976 <send_cmd+0x6a>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    196a:	88 e4       	ldi	r24, 0x48	; 72
    196c:	d8 16       	cp	r13, r24
    196e:	11 f4       	brne	.+4      	; 0x1974 <send_cmd+0x68>
    1970:	87 e8       	ldi	r24, 0x87	; 135
    1972:	01 c0       	rjmp	.+2      	; 0x1976 <send_cmd+0x6a>
    1974:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
    1976:	95 d2       	rcall	.+1322   	; 0x1ea2 <xmit_spi>
    1978:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
    197a:	92 d2       	rcall	.+1316   	; 0x1ea0 <rcv_spi>
	} while ((res & 0x80) && --n);
    197c:	87 ff       	sbrs	r24, 7
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <send_cmd+0x78>
    1980:	11 50       	subi	r17, 0x01	; 1
    1982:	d9 f7       	brne	.-10     	; 0x197a <send_cmd+0x6e>

	return res;			/* Return with the response value */
}
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	ff 90       	pop	r15
    198a:	ef 90       	pop	r14
    198c:	df 90       	pop	r13
    198e:	08 95       	ret

00001990 <disk_writep>:

DRESULT disk_writep (
	const BYTE *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	DWORD sa			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	8c 01       	movw	r16, r24
	static WORD wc;


	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	d1 f0       	breq	.+52     	; 0x19d2 <disk_writep+0x42>
		bc = (WORD)sa;
    199e:	ea 01       	movw	r28, r20
    19a0:	0e c0       	rjmp	.+28     	; 0x19be <disk_writep+0x2e>
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
    19a2:	f8 01       	movw	r30, r16
    19a4:	81 91       	ld	r24, Z+
    19a6:	8f 01       	movw	r16, r30
    19a8:	7c d2       	rcall	.+1272   	; 0x1ea2 <xmit_spi>
			wc--; bc--;
    19aa:	80 91 66 00 	lds	r24, 0x0066
    19ae:	90 91 67 00 	lds	r25, 0x0067
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	90 93 67 00 	sts	0x0067, r25
    19b8:	80 93 66 00 	sts	0x0066, r24
    19bc:	21 97       	sbiw	r28, 0x01	; 1

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
    19be:	20 97       	sbiw	r28, 0x00	; 0
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <disk_writep+0x34>
    19c2:	4c c0       	rjmp	.+152    	; 0x1a5c <disk_writep+0xcc>
    19c4:	80 91 66 00 	lds	r24, 0x0066
    19c8:	90 91 67 00 	lds	r25, 0x0067
    19cc:	89 2b       	or	r24, r25
    19ce:	49 f7       	brne	.-46     	; 0x19a2 <disk_writep+0x12>
    19d0:	45 c0       	rjmp	.+138    	; 0x1a5c <disk_writep+0xcc>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sa) {	/* Initiate sector write process */
    19d2:	41 15       	cp	r20, r1
    19d4:	51 05       	cpc	r21, r1
    19d6:	61 05       	cpc	r22, r1
    19d8:	71 05       	cpc	r23, r1
    19da:	e9 f0       	breq	.+58     	; 0x1a16 <disk_writep+0x86>
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
    19dc:	80 91 68 00 	lds	r24, 0x0068
    19e0:	83 fd       	sbrc	r24, 3
    19e2:	07 c0       	rjmp	.+14     	; 0x19f2 <disk_writep+0x62>
    19e4:	39 e0       	ldi	r19, 0x09	; 9
    19e6:	44 0f       	add	r20, r20
    19e8:	55 1f       	adc	r21, r21
    19ea:	66 1f       	adc	r22, r22
    19ec:	77 1f       	adc	r23, r23
    19ee:	3a 95       	dec	r19
    19f0:	d1 f7       	brne	.-12     	; 0x19e6 <disk_writep+0x56>
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
    19f2:	88 e5       	ldi	r24, 0x58	; 88
    19f4:	8b df       	rcall	.-234    	; 0x190c <send_cmd>
    19f6:	88 23       	and	r24, r24
    19f8:	19 f0       	breq	.+6      	; 0x1a00 <disk_writep+0x70>
    19fa:	c1 e0       	ldi	r28, 0x01	; 1
    19fc:	d0 e0       	ldi	r29, 0x00	; 0
    19fe:	30 c0       	rjmp	.+96     	; 0x1a60 <disk_writep+0xd0>
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
    1a00:	8f ef       	ldi	r24, 0xFF	; 255
    1a02:	4f d2       	rcall	.+1182   	; 0x1ea2 <xmit_spi>
    1a04:	8e ef       	ldi	r24, 0xFE	; 254
    1a06:	4d d2       	rcall	.+1178   	; 0x1ea2 <xmit_spi>
				wc = 512;							/* Set byte counter */
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	92 e0       	ldi	r25, 0x02	; 2
    1a0c:	90 93 67 00 	sts	0x0067, r25
    1a10:	80 93 66 00 	sts	0x0066, r24
    1a14:	23 c0       	rjmp	.+70     	; 0x1a5c <disk_writep+0xcc>
				res = RES_OK;
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
    1a16:	c0 91 66 00 	lds	r28, 0x0066
    1a1a:	d0 91 67 00 	lds	r29, 0x0067
    1a1e:	22 96       	adiw	r28, 0x02	; 2
    1a20:	03 c0       	rjmp	.+6      	; 0x1a28 <disk_writep+0x98>
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	3e d2       	rcall	.+1148   	; 0x1ea2 <xmit_spi>
    1a26:	21 97       	sbiw	r28, 0x01	; 1
    1a28:	20 97       	sbiw	r28, 0x00	; 0
    1a2a:	d9 f7       	brne	.-10     	; 0x1a22 <disk_writep+0x92>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 300ms */
    1a2c:	39 d2       	rcall	.+1138   	; 0x1ea0 <rcv_spi>
    1a2e:	8f 71       	andi	r24, 0x1F	; 31
    1a30:	85 30       	cpi	r24, 0x05	; 5
    1a32:	79 f4       	brne	.+30     	; 0x1a52 <disk_writep+0xc2>
    1a34:	c8 ee       	ldi	r28, 0xE8	; 232
    1a36:	dd ef       	ldi	r29, 0xFD	; 253
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <disk_writep+0xac>
				for (bc = 65000; rcv_spi() != 0xFF && bc; bc--) ;	/* Wait ready */
    1a3a:	21 97       	sbiw	r28, 0x01	; 1
    1a3c:	31 d2       	rcall	.+1122   	; 0x1ea0 <rcv_spi>
    1a3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a40:	19 f0       	breq	.+6      	; 0x1a48 <disk_writep+0xb8>
    1a42:	20 97       	sbiw	r28, 0x00	; 0
    1a44:	d1 f7       	brne	.-12     	; 0x1a3a <disk_writep+0xaa>
    1a46:	05 c0       	rjmp	.+10     	; 0x1a52 <disk_writep+0xc2>
				if (bc) res = RES_OK;
    1a48:	cd 2b       	or	r28, r29
    1a4a:	19 f0       	breq	.+6      	; 0x1a52 <disk_writep+0xc2>
    1a4c:	c0 e0       	ldi	r28, 0x00	; 0
    1a4e:	d0 e0       	ldi	r29, 0x00	; 0
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <disk_writep+0xc6>
    1a52:	c1 e0       	ldi	r28, 0x01	; 1
    1a54:	d0 e0       	ldi	r29, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    1a56:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
    1a58:	23 d2       	rcall	.+1094   	; 0x1ea0 <rcv_spi>
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <disk_writep+0xd0>
    1a5c:	c0 e0       	ldi	r28, 0x00	; 0
    1a5e:	d0 e0       	ldi	r29, 0x00	; 0
			release_spi();
		}
	}

	return res;
}
    1a60:	ce 01       	movw	r24, r28
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
    1a6a:	08 95       	ret

00001a6c <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
    1a6c:	a4 e0       	ldi	r26, 0x04	; 4
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	eb e3       	ldi	r30, 0x3B	; 59
    1a72:	fd e0       	ldi	r31, 0x0D	; 13
    1a74:	70 c2       	rjmp	.+1248   	; 0x1f56 <__prologue_saves__+0x14>
	BYTE n, cmd, ty, ocr[4];
	WORD tmr;


	INIT_SPI();
    1a76:	88 e1       	ldi	r24, 0x18	; 24
    1a78:	8d b9       	out	0x0d, r24	; 13

#if _WRITE_FUNC
	if (MMC_SEL) disk_writep(0, 0);		/* Finalize write process if it is in progress */
    1a7a:	c3 99       	sbic	0x18, 3	; 24
    1a7c:	07 c0       	rjmp	.+14     	; 0x1a8c <disk_initialize+0x20>
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	40 e0       	ldi	r20, 0x00	; 0
    1a84:	50 e0       	ldi	r21, 0x00	; 0
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	82 df       	rcall	.-252    	; 0x1990 <disk_writep>
    1a8c:	14 e6       	ldi	r17, 0x64	; 100
#endif
	for (n = 100; n; n--) rcv_spi();	/* Dummy clocks */
    1a8e:	08 d2       	rcall	.+1040   	; 0x1ea0 <rcv_spi>
    1a90:	11 50       	subi	r17, 0x01	; 1
    1a92:	e9 f7       	brne	.-6      	; 0x1a8e <disk_initialize+0x22>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    1a94:	80 e4       	ldi	r24, 0x40	; 64
    1a96:	40 e0       	ldi	r20, 0x00	; 0
    1a98:	50 e0       	ldi	r21, 0x00	; 0
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	70 e0       	ldi	r23, 0x00	; 0
    1a9e:	36 df       	rcall	.-404    	; 0x190c <send_cmd>
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	09 f0       	breq	.+2      	; 0x1aa6 <disk_initialize+0x3a>
    1aa4:	5e c0       	rjmp	.+188    	; 0x1b62 <disk_initialize+0xf6>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    1aa6:	88 e4       	ldi	r24, 0x48	; 72
    1aa8:	4a ea       	ldi	r20, 0xAA	; 170
    1aaa:	51 e0       	ldi	r21, 0x01	; 1
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	2d df       	rcall	.-422    	; 0x190c <send_cmd>
    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	b1 f5       	brne	.+108    	; 0x1b22 <disk_initialize+0xb6>
    1ab6:	6e 01       	movw	r12, r28
    1ab8:	08 94       	sec
    1aba:	c1 1c       	adc	r12, r1
    1abc:	d1 1c       	adc	r13, r1
    1abe:	76 01       	movw	r14, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
    1ac0:	8e 01       	movw	r16, r28
    1ac2:	0b 5f       	subi	r16, 0xFB	; 251
    1ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac6:	ec d1       	rcall	.+984    	; 0x1ea0 <rcv_spi>
    1ac8:	f7 01       	movw	r30, r14
    1aca:	81 93       	st	Z+, r24
    1acc:	7f 01       	movw	r14, r30
    1ace:	e0 17       	cp	r30, r16
    1ad0:	f1 07       	cpc	r31, r17
    1ad2:	c9 f7       	brne	.-14     	; 0x1ac6 <disk_initialize+0x5a>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <disk_initialize+0x70>
    1ada:	43 c0       	rjmp	.+134    	; 0x1b62 <disk_initialize+0xf6>
    1adc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ade:	8a 3a       	cpi	r24, 0xAA	; 170
    1ae0:	09 f0       	breq	.+2      	; 0x1ae4 <disk_initialize+0x78>
    1ae2:	3f c0       	rjmp	.+126    	; 0x1b62 <disk_initialize+0xf6>
    1ae4:	00 ee       	ldi	r16, 0xE0	; 224
    1ae6:	1e e2       	ldi	r17, 0x2E	; 46
    1ae8:	03 c0       	rjmp	.+6      	; 0x1af0 <disk_initialize+0x84>
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1aea:	01 50       	subi	r16, 0x01	; 1
    1aec:	10 40       	sbci	r17, 0x00	; 0
    1aee:	c9 f1       	breq	.+114    	; 0x1b62 <disk_initialize+0xf6>
    1af0:	89 ee       	ldi	r24, 0xE9	; 233
    1af2:	40 e0       	ldi	r20, 0x00	; 0
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	70 e4       	ldi	r23, 0x40	; 64
    1afa:	08 df       	rcall	.-496    	; 0x190c <send_cmd>
    1afc:	88 23       	and	r24, r24
    1afe:	a9 f7       	brne	.-22     	; 0x1aea <disk_initialize+0x7e>
    1b00:	3c c0       	rjmp	.+120    	; 0x1b7a <disk_initialize+0x10e>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    1b02:	ce d1       	rcall	.+924    	; 0x1ea0 <rcv_spi>
    1b04:	f6 01       	movw	r30, r12
    1b06:	81 93       	st	Z+, r24
    1b08:	6f 01       	movw	r12, r30
    1b0a:	ee 15       	cp	r30, r14
    1b0c:	ff 05       	cpc	r31, r15
    1b0e:	c9 f7       	brne	.-14     	; 0x1b02 <disk_initialize+0x96>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	86 fd       	sbrc	r24, 6
    1b14:	03 c0       	rjmp	.+6      	; 0x1b1c <disk_initialize+0xb0>
    1b16:	e4 e0       	ldi	r30, 0x04	; 4
    1b18:	fe 2e       	mov	r15, r30
    1b1a:	24 c0       	rjmp	.+72     	; 0x1b64 <disk_initialize+0xf8>
    1b1c:	7c e0       	ldi	r23, 0x0C	; 12
    1b1e:	f7 2e       	mov	r15, r23
    1b20:	21 c0       	rjmp	.+66     	; 0x1b64 <disk_initialize+0xf8>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1b22:	89 ee       	ldi	r24, 0xE9	; 233
    1b24:	40 e0       	ldi	r20, 0x00	; 0
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	ef de       	rcall	.-546    	; 0x190c <send_cmd>
    1b2e:	82 30       	cpi	r24, 0x02	; 2
    1b30:	28 f0       	brcs	.+10     	; 0x1b3c <disk_initialize+0xd0>
    1b32:	61 e4       	ldi	r22, 0x41	; 65
    1b34:	e6 2e       	mov	r14, r22
    1b36:	ff 24       	eor	r15, r15
    1b38:	f3 94       	inc	r15
    1b3a:	04 c0       	rjmp	.+8      	; 0x1b44 <disk_initialize+0xd8>
    1b3c:	59 ee       	ldi	r21, 0xE9	; 233
    1b3e:	e5 2e       	mov	r14, r21
    1b40:	42 e0       	ldi	r20, 0x02	; 2
    1b42:	f4 2e       	mov	r15, r20
    1b44:	08 ea       	ldi	r16, 0xA8	; 168
    1b46:	11 e6       	ldi	r17, 0x61	; 97
    1b48:	03 c0       	rjmp	.+6      	; 0x1b50 <disk_initialize+0xe4>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
    1b4a:	01 50       	subi	r16, 0x01	; 1
    1b4c:	10 40       	sbci	r17, 0x00	; 0
    1b4e:	49 f0       	breq	.+18     	; 0x1b62 <disk_initialize+0xf6>
    1b50:	8e 2d       	mov	r24, r14
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	d8 de       	rcall	.-592    	; 0x190c <send_cmd>
    1b5c:	88 23       	and	r24, r24
    1b5e:	a9 f7       	brne	.-22     	; 0x1b4a <disk_initialize+0xde>
    1b60:	16 c0       	rjmp	.+44     	; 0x1b8e <disk_initialize+0x122>
    1b62:	ff 24       	eor	r15, r15
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    1b64:	f0 92 68 00 	sts	0x0068, r15
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    1b68:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
    1b6a:	9a d1       	rcall	.+820    	; 0x1ea0 <rcv_spi>
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	ff 20       	and	r15, r15
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <disk_initialize+0x108>
    1b72:	81 e0       	ldi	r24, 0x01	; 1
	}
	CardType = ty;
	release_spi();

	return ty ? 0 : STA_NOINIT;
}
    1b74:	24 96       	adiw	r28, 0x04	; 4
    1b76:	e8 e0       	ldi	r30, 0x08	; 8
    1b78:	0a c2       	rjmp	.+1044   	; 0x1f8e <__epilogue_restores__+0x14>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    1b7a:	8a e7       	ldi	r24, 0x7A	; 122
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	50 e0       	ldi	r21, 0x00	; 0
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	c3 de       	rcall	.-634    	; 0x190c <send_cmd>
    1b86:	88 23       	and	r24, r24
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <disk_initialize+0x120>
    1b8a:	bb cf       	rjmp	.-138    	; 0x1b02 <disk_initialize+0x96>
    1b8c:	ea cf       	rjmp	.-44     	; 0x1b62 <disk_initialize+0xf6>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    1b8e:	80 e5       	ldi	r24, 0x50	; 80
    1b90:	40 e0       	ldi	r20, 0x00	; 0
    1b92:	52 e0       	ldi	r21, 0x02	; 2
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	70 e0       	ldi	r23, 0x00	; 0
    1b98:	b9 de       	rcall	.-654    	; 0x190c <send_cmd>
    1b9a:	88 23       	and	r24, r24
    1b9c:	11 f7       	brne	.-60     	; 0x1b62 <disk_initialize+0xf6>
    1b9e:	e2 cf       	rjmp	.-60     	; 0x1b64 <disk_initialize+0xf8>

00001ba0 <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
    1ba0:	a0 e0       	ldi	r26, 0x00	; 0
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e5 ed       	ldi	r30, 0xD5	; 213
    1ba6:	fd e0       	ldi	r31, 0x0D	; 13
    1ba8:	d6 c1       	rjmp	.+940    	; 0x1f56 <__prologue_saves__+0x14>
    1baa:	7c 01       	movw	r14, r24
    1bac:	69 01       	movw	r12, r18
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
    1bae:	80 91 68 00 	lds	r24, 0x0068
    1bb2:	83 fd       	sbrc	r24, 3
    1bb4:	07 c0       	rjmp	.+14     	; 0x1bc4 <disk_readp+0x24>
    1bb6:	f9 e0       	ldi	r31, 0x09	; 9
    1bb8:	44 0f       	add	r20, r20
    1bba:	55 1f       	adc	r21, r21
    1bbc:	66 1f       	adc	r22, r22
    1bbe:	77 1f       	adc	r23, r23
    1bc0:	fa 95       	dec	r31
    1bc2:	d1 f7       	brne	.-12     	; 0x1bb8 <disk_readp+0x18>

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
    1bc4:	81 e5       	ldi	r24, 0x51	; 81
    1bc6:	a2 de       	rcall	.-700    	; 0x190c <send_cmd>
    1bc8:	88 23       	and	r24, r24
    1bca:	79 f5       	brne	.+94     	; 0x1c2a <disk_readp+0x8a>
    1bcc:	c0 e3       	ldi	r28, 0x30	; 48
    1bce:	d5 e7       	ldi	r29, 0x75	; 117

		bc = 30000;
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
    1bd0:	67 d1       	rcall	.+718    	; 0x1ea0 <rcv_spi>
		} while (rc == 0xFF && --bc);
    1bd2:	8f 3f       	cpi	r24, 0xFF	; 255
    1bd4:	19 f4       	brne	.+6      	; 0x1bdc <disk_readp+0x3c>
    1bd6:	21 97       	sbiw	r28, 0x01	; 1
    1bd8:	d9 f7       	brne	.-10     	; 0x1bd0 <disk_readp+0x30>
    1bda:	27 c0       	rjmp	.+78     	; 0x1c2a <disk_readp+0x8a>

		if (rc == 0xFE) {				/* A data packet arrived */
    1bdc:	8e 3f       	cpi	r24, 0xFE	; 254
    1bde:	29 f5       	brne	.+74     	; 0x1c2a <disk_readp+0x8a>
			bc = 514 - ofs - cnt;

			/* Skip leading bytes */
			if (ofs) {
    1be0:	c1 14       	cp	r12, r1
    1be2:	d1 04       	cpc	r13, r1
    1be4:	21 f0       	breq	.+8      	; 0x1bee <disk_readp+0x4e>
    1be6:	e6 01       	movw	r28, r12
				do rcv_spi(); while (--ofs);
    1be8:	5b d1       	rcall	.+694    	; 0x1ea0 <rcv_spi>
    1bea:	21 97       	sbiw	r28, 0x01	; 1
    1bec:	e9 f7       	brne	.-6      	; 0x1be8 <disk_readp+0x48>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
    1bee:	e1 14       	cp	r14, r1
    1bf0:	f1 04       	cpc	r15, r1
    1bf2:	41 f0       	breq	.+16     	; 0x1c04 <disk_readp+0x64>
    1bf4:	e8 01       	movw	r28, r16
				do
					*buff++ = rcv_spi();
    1bf6:	54 d1       	rcall	.+680    	; 0x1ea0 <rcv_spi>
    1bf8:	f7 01       	movw	r30, r14
    1bfa:	81 93       	st	Z+, r24
    1bfc:	7f 01       	movw	r14, r30
				while (--cnt);
    1bfe:	21 97       	sbiw	r28, 0x01	; 1
    1c00:	d1 f7       	brne	.-12     	; 0x1bf6 <disk_readp+0x56>
    1c02:	05 c0       	rjmp	.+10     	; 0x1c0e <disk_readp+0x6e>
    1c04:	e8 01       	movw	r28, r16
			} else {	/* Forward data to the outgoing stream (depends on the project) */
				do
					xmit(rcv_spi());	/* (Console output) */
    1c06:	4c d1       	rcall	.+664    	; 0x1ea0 <rcv_spi>
    1c08:	19 d0       	rcall	.+50     	; 0x1c3c <xmit>
				while (--cnt);
    1c0a:	21 97       	sbiw	r28, 0x01	; 1
    1c0c:	e1 f7       	brne	.-8      	; 0x1c06 <disk_readp+0x66>
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {				/* A data packet arrived */
			bc = 514 - ofs - cnt;
    1c0e:	cc 27       	eor	r28, r28
    1c10:	dd 27       	eor	r29, r29
    1c12:	cc 19       	sub	r28, r12
    1c14:	dd 09       	sbc	r29, r13
    1c16:	ce 5f       	subi	r28, 0xFE	; 254
    1c18:	dd 4f       	sbci	r29, 0xFD	; 253
    1c1a:	c0 1b       	sub	r28, r16
    1c1c:	d1 0b       	sbc	r29, r17
					xmit(rcv_spi());	/* (Console output) */
				while (--cnt);
			}

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
    1c1e:	40 d1       	rcall	.+640    	; 0x1ea0 <rcv_spi>
    1c20:	21 97       	sbiw	r28, 0x01	; 1
    1c22:	e9 f7       	brne	.-6      	; 0x1c1e <disk_readp+0x7e>
    1c24:	c0 e0       	ldi	r28, 0x00	; 0
    1c26:	d0 e0       	ldi	r29, 0x00	; 0
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <disk_readp+0x8e>
    1c2a:	c1 e0       	ldi	r28, 0x01	; 1
    1c2c:	d0 e0       	ldi	r29, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    1c2e:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
    1c30:	37 d1       	rcall	.+622    	; 0x1ea0 <rcv_spi>
	}

	release_spi();

	return res;
}
    1c32:	ce 01       	movw	r24, r28
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	e8 e0       	ldi	r30, 0x08	; 8
    1c3a:	a9 c1       	rjmp	.+850    	; 0x1f8e <__epilogue_restores__+0x14>

00001c3c <xmit>:

.global xmit
.func xmit
xmit:
#if BIDIR
	ldi	r23, BPS-1	;Pre-idle time for bidirectional data line
    1c3c:	73 e4       	ldi	r23, 0x43	; 67
5:	dec	r23     	;
    1c3e:	7a 95       	dec	r23
	brne	5b		;/
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <xmit+0x2>
#endif
	in	r0, _SFR_IO_ADDR(SREG)	;Save flags
    1c42:	0f b6       	in	r0, 0x3f	; 63

	com	r24		;C = start bit
    1c44:	80 95       	com	r24
	ldi	r25, 10		;Bit counter
    1c46:	9a e0       	ldi	r25, 0x0A	; 10
	cli			;Start critical section
    1c48:	f8 94       	cli

1:	ldi	r23, BPS-1	;----- Bit transferring loop 
    1c4a:	73 e4       	ldi	r23, 0x43	; 67
2:	dec	r23     	;Wait for a bit time
    1c4c:	7a 95       	dec	r23
	brne	2b		;/
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <xmit+0x10>
	brcs	3f		;MISO = bit to be sent
    1c50:	08 f0       	brcs	.+2      	; 0x1c54 <xmit+0x18>
	OUT_1			;
    1c52:	bc 98       	cbi	0x17, 4	; 23
3:	brcc	4f		;
    1c54:	08 f4       	brcc	.+2      	; 0x1c58 <xmit+0x1c>
	OUT_0			;/
    1c56:	bc 9a       	sbi	0x17, 4	; 23
4:	lsr	r24     	;Get next bit into C
    1c58:	86 95       	lsr	r24
	dec	r25     	;All bits sent?
    1c5a:	9a 95       	dec	r25
	brne	1b	     	;  no, coutinue
    1c5c:	b1 f7       	brne	.-20     	; 0x1c4a <xmit+0xe>

	out	_SFR_IO_ADDR(SREG), r0	;End of critical section
    1c5e:	0f be       	out	0x3f, r0	; 63
	ret
    1c60:	08 95       	ret

00001c62 <rcvr>:
;Size: 19 words

.global rcvr
.func rcvr
rcvr:
	in	r0, _SFR_IO_ADDR(SREG)	;Save flags
    1c62:	0f b6       	in	r0, 0x3f	; 63

	ldi	r24, 0x80	;Receiving shift reg
    1c64:	80 e8       	ldi	r24, 0x80	; 128
	cli			;Start critical section
    1c66:	f8 94       	cli

1:	SKIP_IN_1		;Wait for idle
    1c68:	b4 9b       	sbis	0x16, 4	; 22
	rjmp	1b
    1c6a:	fe cf       	rjmp	.-4      	; 0x1c68 <rcvr+0x6>
2:	SKIP_IN_0		;Wait for start bit
    1c6c:	b4 99       	sbic	0x16, 4	; 22
	rjmp	2b
    1c6e:	fe cf       	rjmp	.-4      	; 0x1c6c <rcvr+0xa>
	ldi	r25, BPS/2	;Wait for half bit time
    1c70:	92 e2       	ldi	r25, 0x22	; 34
3:	dec	r25
    1c72:	9a 95       	dec	r25
	brne	3b
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <rcvr+0x10>

4:	ldi	r25, BPS	;----- Bit receiving loop
    1c76:	94 e4       	ldi	r25, 0x44	; 68
5:	dec	r25     	;Wait for a bit time
    1c78:	9a 95       	dec	r25
	brne	5b		;/
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <rcvr+0x16>
	lsr	r24     	;Next bit
    1c7c:	86 95       	lsr	r24
	SKIP_IN_0		;Get a data bit into r24.7
    1c7e:	b4 99       	sbic	0x16, 4	; 22
	ori	r24, 0x80
    1c80:	80 68       	ori	r24, 0x80	; 128
	brcc	4b	     	;All bits received?  no, continue
    1c82:	c8 f7       	brcc	.-14     	; 0x1c76 <rcvr+0x14>

	out	_SFR_IO_ADDR(SREG), r0	;End of critical section
    1c84:	0f be       	out	0x3f, r0	; 63
	ret
    1c86:	08 95       	ret

00001c88 <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    1c88:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    1c8a:	19 f4       	brne	.+6      	; 0x1c92 <xputc+0xa>
	ldi	r24, 13		;
    1c8c:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    1c8e:	01 d0       	rcall	.+2      	; 0x1c92 <xputc+0xa>
	ldi	r24, 10		;/
    1c90:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    1c92:	ff 93       	push	r31
	push	ZL
    1c94:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    1c96:	e0 91 69 00 	lds	r30, 0x0069
	lds	ZH, xfunc_out+1	;/
    1c9a:	f0 91 6a 00 	lds	r31, 0x006A
	sbiw	ZL, 0
    1c9e:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f
    1ca0:	09 f0       	breq	.+2      	; 0x1ca4 <xputc+0x1c>
	icall
    1ca2:	09 95       	icall
2:	pop	ZL
    1ca4:	ef 91       	pop	r30
	pop	ZH
    1ca6:	ff 91       	pop	r31
	ret
    1ca8:	08 95       	ret

00001caa <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    1caa:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    1cac:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    1cae:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    1cb0:	11 f0       	breq	.+4      	; 0x1cb6 <xputs+0xc>
	rcall	xputc
    1cb2:	ea df       	rcall	.-44     	; 0x1c88 <xputc>
	rjmp	1b
    1cb4:	fb cf       	rjmp	.-10     	; 0x1cac <xputs+0x2>
2:	ret
    1cb6:	08 95       	ret

00001cb8 <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    1cb8:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    1cba:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    1cbc:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    1cbe:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    1cc0:	0c c0       	rjmp	.+24     	; 0x1cda <xitoa+0x22>
	neg	r20		;
    1cc2:	41 95       	neg	r20
	sbrs	r25, 7		;
    1cc4:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    1cc6:	09 c0       	rjmp	.+18     	; 0x1cda <xitoa+0x22>
	ldi	r30, '-'	;
    1cc8:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    1cca:	60 95       	com	r22
	com	r23		;
    1ccc:	70 95       	com	r23
	com	r24		;
    1cce:	80 95       	com	r24
	com	r25		;
    1cd0:	90 95       	com	r25
	adc	r22, r1		;
    1cd2:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    1cd4:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    1cd6:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    1cd8:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    1cda:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <xitoa+0x2a>
	neg	r18		;
    1cde:	21 95       	neg	r18
	ldi	r19, '0'	;/
    1ce0:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    1ce2:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    1ce4:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    1ce6:	66 0f       	add	r22, r22
	rol	r23		;
    1ce8:	77 1f       	adc	r23, r23
	rol	r24		;
    1cea:	88 1f       	adc	r24, r24
	rol	r25		;
    1cec:	99 1f       	adc	r25, r25
	rol	r26		;
    1cee:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    1cf0:	a4 17       	cp	r26, r20
	brcs	3f		;
    1cf2:	10 f0       	brcs	.+4      	; 0x1cf8 <xitoa+0x40>
	sub	r26, r20	;
    1cf4:	a4 1b       	sub	r26, r20
	inc	r22		;
    1cf6:	63 95       	inc	r22
3:	dec	r21		;
    1cf8:	5a 95       	dec	r21
	brne	2b		;/
    1cfa:	a9 f7       	brne	.-22     	; 0x1ce6 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    1cfc:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    1cfe:	08 f0       	brcs	.+2      	; 0x1d02 <xitoa+0x4a>
	subi	r26, -7		;
    1d00:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    1d02:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    1d04:	af 93       	push	r26
	inc	r31		;/
    1d06:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    1d08:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    1d0a:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    1d0c:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    1d0e:	91 05       	cpc	r25, r1
	brne	1b		;/
    1d10:	41 f7       	brne	.-48     	; 0x1ce2 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    1d12:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    1d14:	11 f4       	brne	.+4      	; 0x1d1a <xitoa+0x62>
	push	r30		;
    1d16:	ef 93       	push	r30
	inc	r31		;/
    1d18:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    1d1a:	f2 17       	cp	r31, r18
	brcc	6f		;
    1d1c:	18 f4       	brcc	.+6      	; 0x1d24 <xitoa+0x6c>
	push	r19		;
    1d1e:	3f 93       	push	r19
	inc	r31		;
    1d20:	f3 95       	inc	r31
	rjmp	5b		;/
    1d22:	fb cf       	rjmp	.-10     	; 0x1d1a <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    1d24:	8f 91       	pop	r24
	rcall	xputc		;
    1d26:	b0 df       	rcall	.-160    	; 0x1c88 <xputc>
	dec	r31		;
    1d28:	fa 95       	dec	r31
	brne	6b		;/
    1d2a:	e1 f7       	brne	.-8      	; 0x1d24 <xitoa+0x6c>

	ret
    1d2c:	08 95       	ret

00001d2e <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    1d2e:	df 93       	push	r29
	push	YL
    1d30:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    1d32:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    1d34:	de b7       	in	r29, 0x3e	; 62
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
#else
	adiw	YL, 5		;Y = pointer to arguments
    1d36:	25 96       	adiw	r28, 0x05	; 5
#endif
	ld	ZL, Y+		;Z = pointer to format string
    1d38:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    1d3a:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    1d3c:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    1d3e:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    1d40:	21 f0       	breq	.+8      	; 0x1d4a <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    1d42:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    1d44:	29 f0       	breq	.+10     	; 0x1d50 <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    1d46:	a0 df       	rcall	.-192    	; 0x1c88 <xputc>
	rjmp	0b		;/
    1d48:	f9 cf       	rjmp	.-14     	; 0x1d3c <xprintf+0xe>
90:	pop	YL
    1d4a:	cf 91       	pop	r28
	pop	YH
    1d4c:	df 91       	pop	r29
	ret
    1d4e:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    1d50:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    1d52:	e8 94       	clt
	_LPMI	r21		;Get flags
    1d54:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    1d56:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    1d58:	b1 f3       	breq	.-20     	; 0x1d46 <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    1d5a:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    1d5c:	11 f4       	brne	.+4      	; 0x1d62 <xprintf+0x34>
	set			;/
    1d5e:	68 94       	set
22:	_LPMI	r21		;Get width
    1d60:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    1d62:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    1d64:	48 f4       	brcc	.+18     	; 0x1d78 <xprintf+0x4a>
	subi	r21, '0'	;
    1d66:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    1d68:	80 f3       	brcs	.-32     	; 0x1d4a <xprintf+0x1c>
	lsl	r18		;
    1d6a:	22 0f       	add	r18, r18
	mov	r0, r18		;
    1d6c:	02 2e       	mov	r0, r18
	lsl	r18		;
    1d6e:	22 0f       	add	r18, r18
	lsl	r18		;
    1d70:	22 0f       	add	r18, r18
	add	r18, r0		;
    1d72:	20 0d       	add	r18, r0
	add	r18, r21	;
    1d74:	25 0f       	add	r18, r21
	rjmp	22b		;/
    1d76:	f4 cf       	rjmp	.-24     	; 0x1d60 <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    1d78:	0e f4       	brtc	.+2      	; 0x1d7c <xprintf+0x4e>
	neg	r18		;
    1d7a:	21 95       	neg	r18
25:	ld	r24, Y+		;
    1d7c:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    1d7e:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    1d80:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    1d82:	09 f3       	breq	.-62     	; 0x1d46 <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    1d84:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    1d86:	29 f1       	breq	.+74     	; 0x1dd2 <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    1d88:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    1d8a:	59 f1       	breq	.+86     	; 0x1de2 <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    1d8c:	bc 01       	movw	r22, r24
	clr	r24		;
    1d8e:	88 27       	eor	r24, r24
	clr	r25		;
    1d90:	99 27       	eor	r25, r25
	clt			;/
    1d92:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    1d94:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    1d96:	21 f4       	brne	.+8      	; 0x1da0 <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    1d98:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    1d9a:	99 91       	ld	r25, Y+
	set			;
    1d9c:	68 94       	set
	_LPMI	r21		;/
    1d9e:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    1da0:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    1da2:	39 f4       	brne	.+14     	; 0x1db2 <xprintf+0x84>
	ldi	r20, -10	;
    1da4:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    1da6:	7e f0       	brts	.+30     	; 0x1dc6 <xprintf+0x98>
	sbrs	r23, 7		;
    1da8:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    1daa:	0d c0       	rjmp	.+26     	; 0x1dc6 <xprintf+0x98>
	ldi	r24, -1		;
    1dac:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    1dae:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    1db0:	0a c0       	rjmp	.+20     	; 0x1dc6 <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    1db2:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    1db4:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    1db6:	39 f0       	breq	.+14     	; 0x1dc6 <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    1db8:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    1dba:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    1dbc:	21 f0       	breq	.+8      	; 0x1dc6 <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    1dbe:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    1dc0:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <xprintf+0x98>
	rjmp	90b		;abort
    1dc4:	c2 cf       	rjmp	.-124    	; 0x1d4a <xprintf+0x1c>
40:	push	ZH		;Output the value
    1dc6:	ff 93       	push	r31
	push	ZL		;
    1dc8:	ef 93       	push	r30
	rcall	xitoa		;
    1dca:	76 df       	rcall	.-276    	; 0x1cb8 <xitoa>
42:	pop	ZL		;
    1dcc:	ef 91       	pop	r30
	pop	ZH		;
    1dce:	ff 91       	pop	r31
	rjmp	0b		;/
    1dd0:	b5 cf       	rjmp	.-150    	; 0x1d3c <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    1dd2:	ff 93       	push	r31
	push	ZL
    1dd4:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    1dd6:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    1dd8:	81 91       	ld	r24, Z+
	cpi	r24, 0
    1dda:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    1ddc:	b9 f3       	breq	.-18     	; 0x1dcc <xprintf+0x9e>
	rcall	xputc
    1dde:	54 df       	rcall	.-344    	; 0x1c88 <xputc>
	rjmp	51b
    1de0:	fb cf       	rjmp	.-10     	; 0x1dd8 <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    1de2:	ff 93       	push	r31
	push	ZL
    1de4:	ef 93       	push	r30
	rcall	xputs
    1de6:	61 df       	rcall	.-318    	; 0x1caa <xputs>
	rjmp	42b
    1de8:	f1 cf       	rjmp	.-30     	; 0x1dcc <xprintf+0x9e>

00001dea <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    1dea:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    1dec:	dc 01       	movw	r26, r24
	ld	ZL, X+
    1dee:	ed 91       	ld	r30, X+
	ld	ZH, X+
    1df0:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    1df2:	22 27       	eor	r18, r18
	clr	r19		;
    1df4:	33 27       	eor	r19, r19
	clr	r20		;
    1df6:	44 27       	eor	r20, r20
	clr	r21		;/
    1df8:	55 27       	eor	r21, r21
	clt			;T = 0;
    1dfa:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    1dfc:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    1dfe:	01 c0       	rjmp	.+2      	; 0x1e02 <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    1e00:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    1e02:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    1e04:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    1e06:	e1 f3       	breq	.-8      	; 0x1e00 <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    1e08:	a8 f1       	brcs	.+106    	; 0x1e74 <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    1e0a:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    1e0c:	11 f4       	brne	.+4      	; 0x1e12 <xatoi+0x28>
	set			; continue;
    1e0e:	68 94       	set
	rjmp	40b		;}
    1e10:	f7 cf       	rjmp	.-18     	; 0x1e00 <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    1e12:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    1e14:	78 f5       	brcc	.+94     	; 0x1e74 <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    1e16:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    1e18:	68 f1       	brcs	.+90     	; 0x1e74 <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    1e1a:	71 f4       	brne	.+28     	; 0x1e38 <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    1e1c:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    1e1e:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    1e20:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    1e22:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    1e24:	48 f1       	brcs	.+82     	; 0x1e78 <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    1e26:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    1e28:	11 f4       	brne	.+4      	; 0x1e2e <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    1e2a:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    1e2c:	03 c0       	rjmp	.+6      	; 0x1e34 <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    1e2e:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    1e30:	19 f4       	brne	.+6      	; 0x1e38 <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    1e32:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    1e34:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    1e36:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    1e38:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    1e3a:	f0 f0       	brcs	.+60     	; 0x1e78 <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    1e3c:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    1e3e:	08 f0       	brcs	.+2      	; 0x1e42 <xatoi+0x58>
	subi	r22, 0x20	;/
    1e40:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    1e42:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    1e44:	b8 f0       	brcs	.+46     	; 0x1e74 <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    1e46:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    1e48:	18 f0       	brcs	.+6      	; 0x1e50 <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    1e4a:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    1e4c:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    1e4e:	90 f0       	brcs	.+36     	; 0x1e74 <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    1e50:	69 17       	cp	r22, r25
	brcc	70f		;/
    1e52:	80 f4       	brcc	.+32     	; 0x1e74 <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    1e54:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    1e56:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    1e58:	08 f4       	brcc	.+2      	; 0x1e5c <xatoi+0x72>
	add	r23, r25	;
    1e5a:	79 0f       	add	r23, r25
62:	lsr	r23		;
    1e5c:	76 95       	lsr	r23
	ror	r21		;
    1e5e:	57 95       	ror	r21
	ror	r20		;
    1e60:	47 95       	ror	r20
	ror	r19		;
    1e62:	37 95       	ror	r19
	ror	r18		;
    1e64:	27 95       	ror	r18
	dec	r24		;
    1e66:	8a 95       	dec	r24
	brne	61b		;/
    1e68:	b9 f7       	brne	.-18     	; 0x1e58 <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    1e6a:	26 0f       	add	r18, r22
	adc	r19, r24	;
    1e6c:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    1e6e:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    1e70:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    1e72:	e0 cf       	rjmp	.-64     	; 0x1e34 <xatoi+0x4a>

70:	ldi	r24, 0
    1e74:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <xatoi+0x90>
80:	ldi	r24, 1
    1e78:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    1e7a:	4e f4       	brtc	.+18     	; 0x1e8e <xatoi+0xa4>
	clr	r22
    1e7c:	66 27       	eor	r22, r22
	com	r18
    1e7e:	20 95       	com	r18
	com	r19
    1e80:	30 95       	com	r19
	com	r20
    1e82:	40 95       	com	r20
	com	r21
    1e84:	50 95       	com	r21
	adc	r18, r22
    1e86:	26 1f       	adc	r18, r22
	adc	r19, r22
    1e88:	36 1f       	adc	r19, r22
	adc	r20, r22
    1e8a:	46 1f       	adc	r20, r22
	adc	r21, r22
    1e8c:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    1e8e:	fe 93       	st	-X, r31
	st	-X, ZL
    1e90:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    1e92:	d0 01       	movw	r26, r0
	st	X+, r18
    1e94:	2d 93       	st	X+, r18
	st	X+, r19
    1e96:	3d 93       	st	X+, r19
	st	X+, r20
    1e98:	4d 93       	st	X+, r20
	st	X+, r21
    1e9a:	5d 93       	st	X+, r21
	clr	r1
    1e9c:	11 24       	eor	r1, r1
	ret
    1e9e:	08 95       	ret

00001ea0 <rcv_spi>:
; BYTE rcv_spi (void);

.global rcv_spi
.func rcv_spi
rcv_spi:
	ldi	r24, 0xFF
    1ea0:	8f ef       	ldi	r24, 0xFF	; 255

00001ea2 <xmit_spi>:
; void xmit_spi (BYTE);

.global xmit_spi
.func xmit_spi
xmit_spi:
	out	_SFR_IO_ADDR(USIDR), r24
    1ea2:	8f b9       	out	0x0f, r24	; 15

	ldi	r24, 0b000100		; PB2(SCK)
    1ea4:	84 e0       	ldi	r24, 0x04	; 4
	out	_SFR_IO_ADDR(PINB), r24	; Toggle SCK 16 times
    1ea6:	86 bb       	out	0x16, r24	; 22
	out	_SFR_IO_ADDR(PINB), r24
    1ea8:	86 bb       	out	0x16, r24	; 22
	out	_SFR_IO_ADDR(PINB), r24
    1eaa:	86 bb       	out	0x16, r24	; 22
	out	_SFR_IO_ADDR(PINB), r24
    1eac:	86 bb       	out	0x16, r24	; 22
	out	_SFR_IO_ADDR(PINB), r24
    1eae:	86 bb       	out	0x16, r24	; 22
	out	_SFR_IO_ADDR(PINB), r24
    1eb0:	86 bb       	out	0x16, r24	; 22
	out	_SFR_IO_ADDR(PINB), r24
    1eb2:	86 bb       	out	0x16, r24	; 22
	out	_SFR_IO_ADDR(PINB), r24
    1eb4:	86 bb       	out	0x16, r24	; 22
	out	_SFR_IO_ADDR(PINB), r24
    1eb6:	86 bb       	out	0x16, r24	; 22
	out	_SFR_IO_ADDR(PINB), r24
    1eb8:	86 bb       	out	0x16, r24	; 22
	out	_SFR_IO_ADDR(PINB), r24
    1eba:	86 bb       	out	0x16, r24	; 22
	out	_SFR_IO_ADDR(PINB), r24
    1ebc:	86 bb       	out	0x16, r24	; 22
	out	_SFR_IO_ADDR(PINB), r24
    1ebe:	86 bb       	out	0x16, r24	; 22
	out	_SFR_IO_ADDR(PINB), r24
    1ec0:	86 bb       	out	0x16, r24	; 22
	out	_SFR_IO_ADDR(PINB), r24
    1ec2:	86 bb       	out	0x16, r24	; 22
	out	_SFR_IO_ADDR(PINB), r24
    1ec4:	86 bb       	out	0x16, r24	; 22
	nop
    1ec6:	00 00       	nop
	in	r24, _SFR_IO_ADDR(USIDR)
    1ec8:	8f b1       	in	r24, 0x0f	; 15
	reti
    1eca:	18 95       	reti

00001ecc <__mulsi3>:
    1ecc:	ff 27       	eor	r31, r31
    1ece:	ee 27       	eor	r30, r30
    1ed0:	bb 27       	eor	r27, r27
    1ed2:	aa 27       	eor	r26, r26

00001ed4 <__mulsi3_loop>:
    1ed4:	60 ff       	sbrs	r22, 0
    1ed6:	04 c0       	rjmp	.+8      	; 0x1ee0 <__mulsi3_skip1>
    1ed8:	a2 0f       	add	r26, r18
    1eda:	b3 1f       	adc	r27, r19
    1edc:	e4 1f       	adc	r30, r20
    1ede:	f5 1f       	adc	r31, r21

00001ee0 <__mulsi3_skip1>:
    1ee0:	22 0f       	add	r18, r18
    1ee2:	33 1f       	adc	r19, r19
    1ee4:	44 1f       	adc	r20, r20
    1ee6:	55 1f       	adc	r21, r21
    1ee8:	96 95       	lsr	r25
    1eea:	87 95       	ror	r24
    1eec:	77 95       	ror	r23
    1eee:	67 95       	ror	r22
    1ef0:	89 f7       	brne	.-30     	; 0x1ed4 <__mulsi3_loop>
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	76 07       	cpc	r23, r22
    1ef6:	71 f7       	brne	.-36     	; 0x1ed4 <__mulsi3_loop>

00001ef8 <__mulsi3_exit>:
    1ef8:	cf 01       	movw	r24, r30
    1efa:	bd 01       	movw	r22, r26
    1efc:	08 95       	ret

00001efe <__udivmodsi4>:
    1efe:	a1 e2       	ldi	r26, 0x21	; 33
    1f00:	1a 2e       	mov	r1, r26
    1f02:	aa 1b       	sub	r26, r26
    1f04:	bb 1b       	sub	r27, r27
    1f06:	fd 01       	movw	r30, r26
    1f08:	0d c0       	rjmp	.+26     	; 0x1f24 <__udivmodsi4_ep>

00001f0a <__udivmodsi4_loop>:
    1f0a:	aa 1f       	adc	r26, r26
    1f0c:	bb 1f       	adc	r27, r27
    1f0e:	ee 1f       	adc	r30, r30
    1f10:	ff 1f       	adc	r31, r31
    1f12:	a2 17       	cp	r26, r18
    1f14:	b3 07       	cpc	r27, r19
    1f16:	e4 07       	cpc	r30, r20
    1f18:	f5 07       	cpc	r31, r21
    1f1a:	20 f0       	brcs	.+8      	; 0x1f24 <__udivmodsi4_ep>
    1f1c:	a2 1b       	sub	r26, r18
    1f1e:	b3 0b       	sbc	r27, r19
    1f20:	e4 0b       	sbc	r30, r20
    1f22:	f5 0b       	sbc	r31, r21

00001f24 <__udivmodsi4_ep>:
    1f24:	66 1f       	adc	r22, r22
    1f26:	77 1f       	adc	r23, r23
    1f28:	88 1f       	adc	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	1a 94       	dec	r1
    1f2e:	69 f7       	brne	.-38     	; 0x1f0a <__udivmodsi4_loop>
    1f30:	60 95       	com	r22
    1f32:	70 95       	com	r23
    1f34:	80 95       	com	r24
    1f36:	90 95       	com	r25
    1f38:	9b 01       	movw	r18, r22
    1f3a:	ac 01       	movw	r20, r24
    1f3c:	bd 01       	movw	r22, r26
    1f3e:	cf 01       	movw	r24, r30
    1f40:	08 95       	ret

00001f42 <__prologue_saves__>:
    1f42:	2f 92       	push	r2
    1f44:	3f 92       	push	r3
    1f46:	4f 92       	push	r4
    1f48:	5f 92       	push	r5
    1f4a:	6f 92       	push	r6
    1f4c:	7f 92       	push	r7
    1f4e:	8f 92       	push	r8
    1f50:	9f 92       	push	r9
    1f52:	af 92       	push	r10
    1f54:	bf 92       	push	r11
    1f56:	cf 92       	push	r12
    1f58:	df 92       	push	r13
    1f5a:	ef 92       	push	r14
    1f5c:	ff 92       	push	r15
    1f5e:	0f 93       	push	r16
    1f60:	1f 93       	push	r17
    1f62:	cf 93       	push	r28
    1f64:	df 93       	push	r29
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	ca 1b       	sub	r28, r26
    1f6c:	db 0b       	sbc	r29, r27
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	09 94       	ijmp

00001f7a <__epilogue_restores__>:
    1f7a:	2a 88       	ldd	r2, Y+18	; 0x12
    1f7c:	39 88       	ldd	r3, Y+17	; 0x11
    1f7e:	48 88       	ldd	r4, Y+16	; 0x10
    1f80:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f82:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f84:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f86:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f88:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f8a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f8c:	b9 84       	ldd	r11, Y+9	; 0x09
    1f8e:	c8 84       	ldd	r12, Y+8	; 0x08
    1f90:	df 80       	ldd	r13, Y+7	; 0x07
    1f92:	ee 80       	ldd	r14, Y+6	; 0x06
    1f94:	fd 80       	ldd	r15, Y+5	; 0x05
    1f96:	0c 81       	ldd	r16, Y+4	; 0x04
    1f98:	1b 81       	ldd	r17, Y+3	; 0x03
    1f9a:	aa 81       	ldd	r26, Y+2	; 0x02
    1f9c:	b9 81       	ldd	r27, Y+1	; 0x01
    1f9e:	ce 0f       	add	r28, r30
    1fa0:	d1 1d       	adc	r29, r1
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	ed 01       	movw	r28, r26
    1fae:	08 95       	ret

00001fb0 <strcat>:
    1fb0:	fb 01       	movw	r30, r22
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	0d 90       	ld	r0, X+
    1fb6:	00 20       	and	r0, r0
    1fb8:	e9 f7       	brne	.-6      	; 0x1fb4 <strcat+0x4>
    1fba:	11 97       	sbiw	r26, 0x01	; 1
    1fbc:	01 90       	ld	r0, Z+
    1fbe:	0d 92       	st	X+, r0
    1fc0:	00 20       	and	r0, r0
    1fc2:	e1 f7       	brne	.-8      	; 0x1fbc <strcat+0xc>
    1fc4:	08 95       	ret

00001fc6 <_exit>:
    1fc6:	f8 94       	cli

00001fc8 <__stop_program>:
    1fc8:	ff cf       	rjmp	.-2      	; 0x1fc8 <__stop_program>
