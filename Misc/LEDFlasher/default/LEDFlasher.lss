
LEDFlasher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  0000087d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  0000089d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000b4  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000071  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000011e  00000000  00000000  000009dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000afc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000087  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000031  00000000  00000000  00000ba3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include <avr/interrupt.h>

int main(void)
{
   UCSR0A |= (1 << U2X0);
  80:	80 91 c0 00 	lds	r24, 0x00C0
  84:	82 60       	ori	r24, 0x02	; 2
  86:	80 93 c0 00 	sts	0x00C0, r24
   UCSR0B |= ((1 <<TXEN0) | (1 << RXEN0));
  8a:	80 91 c1 00 	lds	r24, 0x00C1
  8e:	88 61       	ori	r24, 0x18	; 24
  90:	80 93 c1 00 	sts	0x00C1, r24
   UDR0 = 10;
  94:	8a e0       	ldi	r24, 0x0A	; 10
  96:	80 93 c6 00 	sts	0x00C6, r24

   DDRC |= ((1 << 0) | (1 << 1));
  9a:	87 b1       	in	r24, 0x07	; 7
  9c:	83 60       	ori	r24, 0x03	; 3
  9e:	87 b9       	out	0x07, r24	; 7
   UDR0 = 15;
  a0:	8f e0       	ldi	r24, 0x0F	; 15
  a2:	80 93 c6 00 	sts	0x00C6, r24
   PORTC |= (1<<0);
  a6:	40 9a       	sbi	0x08, 0	; 8

   UDR0 = 25;   
  a8:	89 e1       	ldi	r24, 0x19	; 25
  aa:	80 93 c6 00 	sts	0x00C6, r24

   while(1)
   {
      PORTC ^= (1 << 0);
  ae:	21 e0       	ldi	r18, 0x01	; 1
      for( uint8_t i = 0; i < 10 ; i++ )
      {
         cli();
      }
      PORTC ^= (1 << 1);
  b0:	92 e0       	ldi	r25, 0x02	; 2

   UDR0 = 25;   

   while(1)
   {
      PORTC ^= (1 << 0);
  b2:	88 b1       	in	r24, 0x08	; 8
  b4:	82 27       	eor	r24, r18
  b6:	88 b9       	out	0x08, r24	; 8
  b8:	80 e0       	ldi	r24, 0x00	; 0
      for( uint8_t i = 0; i < 10 ; i++ )
      {
         cli();
  ba:	f8 94       	cli
   UDR0 = 25;   

   while(1)
   {
      PORTC ^= (1 << 0);
      for( uint8_t i = 0; i < 10 ; i++ )
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	8a 30       	cpi	r24, 0x0A	; 10
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x3a>
      {
         cli();
      }
      PORTC ^= (1 << 1);
  c2:	88 b1       	in	r24, 0x08	; 8
  c4:	89 27       	eor	r24, r25
  c6:	88 b9       	out	0x08, r24	; 8
  c8:	80 e0       	ldi	r24, 0x00	; 0
      for( uint8_t i = 0; i < 10 ; i++ )
      {
         cli();
  ca:	f8 94       	cli
      for( uint8_t i = 0; i < 10 ; i++ )
      {
         cli();
      }
      PORTC ^= (1 << 1);
      for( uint8_t i = 0; i < 10 ; i++ )
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	8a 30       	cpi	r24, 0x0A	; 10
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x4a>
  d2:	ef cf       	rjmp	.-34     	; 0xb2 <main+0x32>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
