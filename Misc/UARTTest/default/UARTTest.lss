
UARTTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000009a  00000000  00000000  00000137  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000066  00000000  00000000  000001d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000ff  00000000  00000000  00000237  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000083  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define	UART_DATA_REG	UDR	


int main(void)
{
   MCUCSR = (1 << JTD);
  6c:	80 e8       	ldi	r24, 0x80	; 128
  6e:	84 bf       	out	0x34, r24	; 52
   MCUCSR = (1 << JTD);
  70:	84 bf       	out	0x34, r24	; 52

   SPI_DDR |= ((1 << nSS) | (1 << MOSI) );
  72:	87 b3       	in	r24, 0x17	; 23
  74:	80 63       	ori	r24, 0x30	; 48
  76:	87 bb       	out	0x17, r24	; 23
   /* Initiate as Master and Use CPHA = 1*/
   SPCR |= ((1 << SPE) | (1 << MSTR));
  78:	8d b1       	in	r24, 0x0d	; 13
  7a:	80 65       	ori	r24, 0x50	; 80
  7c:	8d b9       	out	0x0d, r24	; 13
   /* set CLK speed to fclk/32 */

	/*Setup the U2X Bit*/
	UCSRA	=	(UCSRA & (~(1<<U2X)));
  7e:	59 98       	cbi	0x0b, 1	; 11
	
	UCSRB |= ((1<<RXEN) | (1<<TXEN));	/*Enable Rx and Tx modules*/
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	88 61       	ori	r24, 0x18	; 24
  84:	8a b9       	out	0x0a, r24	; 10
	UCSRB &= ~(1<<UCSZ2);				/*Set to 8bit mode*/
  86:	52 98       	cbi	0x0a, 2	; 10
	/* Set to Asynchronous Mode
	 *			 1 Stop-bit
	 *			 No Parity
	 *			 8-bit char mode
	 */
	UCSRC = (UCSRC & ~( UCSRCMASK ))
  88:	80 b5       	in	r24, 0x20	; 32
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
				|  (NOPARITY<<UPM0)
				|	(BIT8 << UCSZ0) 
				|  (1<<URSEL);

   /*Enable the pull up on RXD */
   PORTD |= (1 << PD0);
  8e:	90 9a       	sbi	0x12, 0	; 18

   UBRRL = 39;
  90:	87 e2       	ldi	r24, 0x27	; 39
  92:	89 b9       	out	0x09, r24	; 9
   //sei();

   uint8_t c;
   while(1)
   {
      while(!(UART_STATUS_REG & (1 << RECEIVE_COMPLETE_BIT)));
  94:	5f 9b       	sbis	0x0b, 7	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <main+0x28>
      c = UART_DATA_REG;
  98:	8c b1       	in	r24, 0x0c	; 12

      UART_DATA_REG = c;                                   // prepare transmission
  9a:	8c b9       	out	0x0c, r24	; 12
      while (!(UART_STATUS_REG & (1 << TRANSMIT_COMPLETE_BIT)));// wait until byte sendt
  9c:	5e 9b       	sbis	0x0b, 6	; 11
  9e:	fe cf       	rjmp	.-4      	; 0x9c <main+0x30>
      UART_STATUS_REG |= (1 << TRANSMIT_COMPLETE_BIT);          // delete TXCflag
  a0:	5e 9a       	sbi	0x0b, 6	; 11
  a2:	f8 cf       	rjmp	.-16     	; 0x94 <main+0x28>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
