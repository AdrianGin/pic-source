
MSXConv.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000007a0  00000834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800126  00800126  0000085a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000085c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000108  00000000  00000000  00000fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d0  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000662  00000000  00000000  00002288  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000844  00000000  00000000  000028ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  00003130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046b  00000000  00000000  00003474  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bb9  00000000  00000000  000038df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00004498  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 34       	cpi	r26, 0x4F	; 79
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 75 03 	call	0x6ea	; 0x6ea <main>
  9e:	0c 94 ce 03 	jmp	0x79c	; 0x79c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_20>:




ISR(USART_TX_vect, ISR_NOBLOCK)
{
  a6:	78 94       	sei
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	4f 93       	push	r20
  b8:	5f 93       	push	r21
  ba:	6f 93       	push	r22
  bc:	7f 93       	push	r23
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	af 93       	push	r26
  c4:	bf 93       	push	r27
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
   // Tx the next byte if there are still bytes in the buffer
   if( !ringbuffer_isEmpty((RINGBUFFER_T*)PrimaryUART.TransmitBuffer) )
  ca:	80 91 0f 01 	lds	r24, 0x010F
  ce:	90 91 10 01 	lds	r25, 0x0110
  d2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <ringbuffer_isEmpty>
  d6:	00 97       	sbiw	r24, 0x00	; 0
  d8:	41 f4       	brne	.+16     	; 0xea <__vector_20+0x44>
   {
      UDR0 = ringbuffer_get((RINGBUFFER_T*)PrimaryUART.TransmitBuffer);
  da:	80 91 0f 01 	lds	r24, 0x010F
  de:	90 91 10 01 	lds	r25, 0x0110
  e2:	0e 94 6d 01 	call	0x2da	; 0x2da <ringbuffer_get>
  e6:	80 93 c6 00 	sts	0x00C6, r24
   }
}
  ea:	ff 91       	pop	r31
  ec:	ef 91       	pop	r30
  ee:	bf 91       	pop	r27
  f0:	af 91       	pop	r26
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	7f 91       	pop	r23
  f8:	6f 91       	pop	r22
  fa:	5f 91       	pop	r21
  fc:	4f 91       	pop	r20
  fe:	3f 91       	pop	r19
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <__vector_18>:


ISR(USART_RX_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
   uint8_t buffer = UDR0;
 12e:	80 91 c6 00 	lds	r24, 0x00C6

   PS2_SendByte(buffer);
 132:	0e 94 63 02 	call	0x4c6	; 0x4c6 <PS2_SendByte>
}
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	bf 91       	pop	r27
 13c:	af 91       	pop	r26
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	7f 91       	pop	r23
 144:	6f 91       	pop	r22
 146:	5f 91       	pop	r21
 148:	4f 91       	pop	r20
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <uartInit>:
 *
 * Interrupts are not set by default.
 *
 */
void uartInit(AVR_USART_t* port, uint8_t U2Xvalue)
{
 158:	fc 01       	movw	r30, r24
	/*Setup the U2X Bit*/
	*port->UCSRxA	=	(*port->UCSRxA & (~(1<<U2X))) | (U2Xvalue << U2X);
 15a:	a0 81       	ld	r26, Z
 15c:	b1 81       	ldd	r27, Z+1	; 0x01
 15e:	8c 91       	ld	r24, X
 160:	66 0f       	add	r22, r22
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	68 2b       	or	r22, r24
 166:	6c 93       	st	X, r22
	
	*port->UCSRxB |= ((1<<RXEN) | (1<<TXEN) | (1<<RXCIE) | (1<<TXCIE));	/*Enable Rx and Tx modules*/
 168:	a2 81       	ldd	r26, Z+2	; 0x02
 16a:	b3 81       	ldd	r27, Z+3	; 0x03
 16c:	8c 91       	ld	r24, X
 16e:	88 6d       	ori	r24, 0xD8	; 216
 170:	8c 93       	st	X, r24
	*port->UCSRxB &= ~(1<<UCSZ2);				/*Set to 8bit mode*/
 172:	a2 81       	ldd	r26, Z+2	; 0x02
 174:	b3 81       	ldd	r27, Z+3	; 0x03
 176:	8c 91       	ld	r24, X
 178:	8b 7f       	andi	r24, 0xFB	; 251
 17a:	8c 93       	st	X, r24
	/* Set to Asynchronous Mode
	 *			 1 Stop-bit
	 *			 No Parity
	 *			 8-bit char mode
	 */
	*port->UCSRxC = (NOPARITY<<UPM0)
 17c:	04 80       	ldd	r0, Z+4	; 0x04
 17e:	f5 81       	ldd	r31, Z+5	; 0x05
 180:	e0 2d       	mov	r30, r0
 182:	86 e8       	ldi	r24, 0x86	; 134
 184:	80 83       	st	Z, r24
      				|	(BIT8 << UCSZ0) 
      				|  (1<<URSEL);

   /*Enable the pull up on RXD */
   PORTD |= (1 << PD0);
 186:	58 9a       	sbi	0x0b, 0	; 11

}
 188:	08 95       	ret

0000018a <uartSetBaud>:
 * Changes the baudrate to the specified value.
 * See the datasheet for more details on what the
 * Baudrate generation registers should be.
 */
void uartSetBaud(AVR_USART_t* port, uint8_t baudrateH, uint8_t baudrateL)
{
 18a:	fc 01       	movw	r30, r24
	*port->UBRRxH = 	baudrateH;
 18c:	a6 81       	ldd	r26, Z+6	; 0x06
 18e:	b7 81       	ldd	r27, Z+7	; 0x07
 190:	6c 93       	st	X, r22
	/* The lower 8bits must be written last as the baudrate generator
	 * is updated as soon as UBRRL is written to*/
	*port->UBRRxL	=	baudrateL; 
 192:	00 84       	ldd	r0, Z+8	; 0x08
 194:	f1 85       	ldd	r31, Z+9	; 0x09
 196:	e0 2d       	mov	r30, r0
 198:	40 83       	st	Z, r20

}
 19a:	08 95       	ret

0000019c <uartDisable>:


/* Disables the Receiver and Transmitter modules*/
void uartDisable(AVR_USART_t* port)
{
	*port->UCSRxB &= ~((1<<RXEN) | (1<<TXEN) | (1<<TXCIE) | (1<<RXCIE) | (1<<UDRIE));	/*Disable Rx and Tx modules*/
 19c:	dc 01       	movw	r26, r24
 19e:	12 96       	adiw	r26, 0x02	; 2
 1a0:	ed 91       	ld	r30, X+
 1a2:	fc 91       	ld	r31, X
 1a4:	13 97       	sbiw	r26, 0x03	; 3
 1a6:	80 81       	ld	r24, Z
 1a8:	87 70       	andi	r24, 0x07	; 7
 1aa:	80 83       	st	Z, r24
	
}
 1ac:	08 95       	ret

000001ae <uartTx>:
//}



void uartTx(AVR_USART_t* port, uint8_t byte)
{
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	ec 01       	movw	r28, r24
 1b8:	06 2f       	mov	r16, r22
   /* If the buffer is full, then we have to wait until we have to send the data
    * to prevent data loss */
   while(ringbuffer_put((RINGBUFFER_T*)port->TransmitBuffer, byte) == BUFFER_OVERFLOW)
 1ba:	8e 85       	ldd	r24, Y+14	; 0x0e
 1bc:	9f 85       	ldd	r25, Y+15	; 0x0f
 1be:	60 2f       	mov	r22, r16
 1c0:	0e 94 a8 01 	call	0x350	; 0x350 <ringbuffer_put>
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	8f 3f       	cpi	r24, 0xFF	; 255
 1c8:	92 07       	cpc	r25, r18
 1ca:	b9 f3       	breq	.-18     	; 0x1ba <uartTx+0xc>
   {
   }

   if( (*port->UCSRxA & (1 << UDRE)) && !ringbuffer_isEmpty((RINGBUFFER_T*)port->TransmitBuffer))
 1cc:	e8 81       	ld	r30, Y
 1ce:	f9 81       	ldd	r31, Y+1	; 0x01
 1d0:	80 81       	ld	r24, Z
 1d2:	85 ff       	sbrs	r24, 5
 1d4:	0e c0       	rjmp	.+28     	; 0x1f2 <uartTx+0x44>
 1d6:	8e 85       	ldd	r24, Y+14	; 0x0e
 1d8:	9f 85       	ldd	r25, Y+15	; 0x0f
 1da:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <ringbuffer_isEmpty>
 1de:	00 97       	sbiw	r24, 0x00	; 0
 1e0:	41 f4       	brne	.+16     	; 0x1f2 <uartTx+0x44>
   {
      *port->UDRx = ringbuffer_get((RINGBUFFER_T*)port->TransmitBuffer);
 1e2:	0a 85       	ldd	r16, Y+10	; 0x0a
 1e4:	1b 85       	ldd	r17, Y+11	; 0x0b
 1e6:	8e 85       	ldd	r24, Y+14	; 0x0e
 1e8:	9f 85       	ldd	r25, Y+15	; 0x0f
 1ea:	0e 94 6d 01 	call	0x2da	; 0x2da <ringbuffer_get>
 1ee:	f8 01       	movw	r30, r16
 1f0:	80 83       	st	Z, r24
   }
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	08 95       	ret

000001fc <uartTxDump>:



/** Writes nbytes of buffer to the UART */
void uartTxDump(AVR_USART_t* port, uint8_t* buffer, uint16_t nbytes )
{
 1fc:	ef 92       	push	r14
 1fe:	ff 92       	push	r15
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	7c 01       	movw	r14, r24
 20a:	eb 01       	movw	r28, r22
 20c:	8a 01       	movw	r16, r20




/** Writes nbytes of buffer to the UART */
void uartTxDump(AVR_USART_t* port, uint8_t* buffer, uint16_t nbytes )
 20e:	06 0f       	add	r16, r22
 210:	17 1f       	adc	r17, r23
{
	uint16_t i = 0;
	while( i++ < nbytes )
 212:	04 c0       	rjmp	.+8      	; 0x21c <uartTxDump+0x20>
	{
		uartTx(port, *buffer++);
 214:	69 91       	ld	r22, Y+
 216:	c7 01       	movw	r24, r14
 218:	0e 94 d7 00 	call	0x1ae	; 0x1ae <uartTx>

/** Writes nbytes of buffer to the UART */
void uartTxDump(AVR_USART_t* port, uint8_t* buffer, uint16_t nbytes )
{
	uint16_t i = 0;
	while( i++ < nbytes )
 21c:	c0 17       	cp	r28, r16
 21e:	d1 07       	cpc	r29, r17
 220:	c9 f7       	brne	.-14     	; 0x214 <uartTxDump+0x18>
	{
		uartTx(port, *buffer++);
	}
}
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	ff 90       	pop	r15
 22c:	ef 90       	pop	r14
 22e:	08 95       	ret

00000230 <uartTxDump_P>:

/** Writes nbytes of buffer to the UART */
void uartTxDump_P(AVR_USART_t* port, PGM_P buffer, uint16_t nbytes )
{
 230:	cf 92       	push	r12
 232:	df 92       	push	r13
 234:	ef 92       	push	r14
 236:	ff 92       	push	r15
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	6c 01       	movw	r12, r24
 242:	8b 01       	movw	r16, r22
 244:	7a 01       	movw	r14, r20
	uint16_t i = 0;
	while( i++ < nbytes )
 246:	c0 e0       	ldi	r28, 0x00	; 0
 248:	d0 e0       	ldi	r29, 0x00	; 0
 24a:	08 c0       	rjmp	.+16     	; 0x25c <uartTxDump_P+0x2c>
		uartTx(port, *buffer++);
	}
}

/** Writes nbytes of buffer to the UART */
void uartTxDump_P(AVR_USART_t* port, PGM_P buffer, uint16_t nbytes )
 24c:	f8 01       	movw	r30, r16
 24e:	ec 0f       	add	r30, r28
 250:	fd 1f       	adc	r31, r29
{
	uint16_t i = 0;
	while( i++ < nbytes )
	{
      uint8_t c;
      c = pgm_read_byte(buffer++);
 252:	64 91       	lpm	r22, Z
		uartTx(port, c);
 254:	c6 01       	movw	r24, r12
 256:	0e 94 d7 00 	call	0x1ae	; 0x1ae <uartTx>
 25a:	21 96       	adiw	r28, 0x01	; 1

/** Writes nbytes of buffer to the UART */
void uartTxDump_P(AVR_USART_t* port, PGM_P buffer, uint16_t nbytes )
{
	uint16_t i = 0;
	while( i++ < nbytes )
 25c:	ce 15       	cp	r28, r14
 25e:	df 05       	cpc	r29, r15
 260:	a9 f7       	brne	.-22     	; 0x24c <uartTxDump_P+0x1c>
	{
      uint8_t c;
      c = pgm_read_byte(buffer++);
		uartTx(port, c);
	}
}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	df 90       	pop	r13
 270:	cf 90       	pop	r12
 272:	08 95       	ret

00000274 <uartTxString>:
 * Outputs the passed string to the UART.Tx pin
 * The output is true ouput, not inverted, so a MAX232 or some sort of
 * TTL -> +/- 15V converter is required.
 */
void uartTxString(AVR_USART_t* port, uint8_t* outString)
{
 274:	0f 93       	push	r16
 276:	1f 93       	push	r17
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	8c 01       	movw	r16, r24
 27e:	eb 01       	movw	r28, r22
	while( *outString )
 280:	03 c0       	rjmp	.+6      	; 0x288 <uartTxString+0x14>
	{
		uartTx(port, *outString++);
 282:	c8 01       	movw	r24, r16
 284:	0e 94 d7 00 	call	0x1ae	; 0x1ae <uartTx>
 * The output is true ouput, not inverted, so a MAX232 or some sort of
 * TTL -> +/- 15V converter is required.
 */
void uartTxString(AVR_USART_t* port, uint8_t* outString)
{
	while( *outString )
 288:	69 91       	ld	r22, Y+
 28a:	66 23       	and	r22, r22
 28c:	d1 f7       	brne	.-12     	; 0x282 <uartTxString+0xe>
	{
		uartTx(port, *outString++);
   }
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	08 95       	ret

00000298 <uartTxString_P>:

/* Usage: uartTxString_P( PSTR("hello!") ); */
/* Send a string which resides in the program memory */
void uartTxString_P(AVR_USART_t* port, PGM_P outString_P)
{
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	8c 01       	movw	r16, r24
 2a2:	eb 01       	movw	r28, r22
   char c;
   while( (c = pgm_read_byte(outString_P++)) )
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <uartTxString_P+0x14>
   {
      uartTx(port, c);    
 2a6:	c8 01       	movw	r24, r16
 2a8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <uartTx>
/* Usage: uartTxString_P( PSTR("hello!") ); */
/* Send a string which resides in the program memory */
void uartTxString_P(AVR_USART_t* port, PGM_P outString_P)
{
   char c;
   while( (c = pgm_read_byte(outString_P++)) )
 2ac:	fe 01       	movw	r30, r28
 2ae:	21 96       	adiw	r28, 0x01	; 1
 2b0:	64 91       	lpm	r22, Z
 2b2:	66 23       	and	r22, r22
 2b4:	c1 f7       	brne	.-16     	; 0x2a6 <uartTxString_P+0xe>
   {
      uartTx(port, c);    
   }
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	08 95       	ret

000002c0 <uartNewLine>:

void uartNewLine(AVR_USART_t* port)
{
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	ec 01       	movw	r28, r24
   uartTx(port, '\r');
 2c6:	6d e0       	ldi	r22, 0x0D	; 13
 2c8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <uartTx>
   uartTx(port, '\n'); 
 2cc:	ce 01       	movw	r24, r28
 2ce:	6a e0       	ldi	r22, 0x0A	; 10
 2d0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <uartTx>
}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <ringbuffer_get>:
#include "ringbuffer.h"

/* Critical means disable interrupts on entry and restore interrupt 
 * state on exit */

int ringbuffer_get(RINGBUFFER_T *buffer) {
 2da:	fc 01       	movw	r30, r24


    //buffer not empty?
    if (buffer->read_pos != buffer->write_pos) {
 2dc:	26 81       	ldd	r18, Z+6	; 0x06
 2de:	37 81       	ldd	r19, Z+7	; 0x07
 2e0:	80 85       	ldd	r24, Z+8	; 0x08
 2e2:	91 85       	ldd	r25, Z+9	; 0x09
 2e4:	28 17       	cp	r18, r24
 2e6:	39 07       	cpc	r19, r25
 2e8:	b1 f0       	breq	.+44     	; 0x316 <ringbuffer_get+0x3c>
        //wrap around read position
        buffer->read_pos &= (buffer->size - 1);
 2ea:	26 81       	ldd	r18, Z+6	; 0x06
 2ec:	37 81       	ldd	r19, Z+7	; 0x07
 2ee:	82 81       	ldd	r24, Z+2	; 0x02
 2f0:	93 81       	ldd	r25, Z+3	; 0x03
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	82 23       	and	r24, r18
 2f6:	93 23       	and	r25, r19
 2f8:	97 83       	std	Z+7, r25	; 0x07
 2fa:	86 83       	std	Z+6, r24	; 0x06
        //get byte from buffer, update read position and return
        return buffer->memory[buffer->read_pos++];
 2fc:	26 81       	ldd	r18, Z+6	; 0x06
 2fe:	37 81       	ldd	r19, Z+7	; 0x07
 300:	a0 81       	ld	r26, Z
 302:	b1 81       	ldd	r27, Z+1	; 0x01
 304:	a2 0f       	add	r26, r18
 306:	b3 1f       	adc	r27, r19
 308:	8c 91       	ld	r24, X
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	2f 5f       	subi	r18, 0xFF	; 255
 30e:	3f 4f       	sbci	r19, 0xFF	; 255
 310:	37 83       	std	Z+7, r19	; 0x07
 312:	26 83       	std	Z+6, r18	; 0x06
 314:	08 95       	ret
    } else {
        return BUFFER_OVERFLOW; /* This is really trying to get a nonexistant byte */
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	9f ef       	ldi	r25, 0xFF	; 255
    }


}
 31a:	08 95       	ret

0000031c <ringbuffer_len>:
    } else {
        return BUFFER_OVERFLOW;
    }
}

unsigned int ringbuffer_len(RINGBUFFER_T *buffer) {
 31c:	fc 01       	movw	r30, r24
   
    if( buffer->read_pos > buffer->write_pos )
 31e:	26 81       	ldd	r18, Z+6	; 0x06
 320:	37 81       	ldd	r19, Z+7	; 0x07
 322:	80 85       	ldd	r24, Z+8	; 0x08
 324:	91 85       	ldd	r25, Z+9	; 0x09
 326:	82 17       	cp	r24, r18
 328:	93 07       	cpc	r25, r19
 32a:	58 f4       	brcc	.+22     	; 0x342 <ringbuffer_len+0x26>
    {
        return buffer->write_pos + buffer->size - buffer->read_pos;
 32c:	80 85       	ldd	r24, Z+8	; 0x08
 32e:	91 85       	ldd	r25, Z+9	; 0x09
 330:	26 81       	ldd	r18, Z+6	; 0x06
 332:	37 81       	ldd	r19, Z+7	; 0x07
 334:	42 81       	ldd	r20, Z+2	; 0x02
 336:	53 81       	ldd	r21, Z+3	; 0x03
 338:	84 0f       	add	r24, r20
 33a:	95 1f       	adc	r25, r21
 33c:	82 1b       	sub	r24, r18
 33e:	93 0b       	sbc	r25, r19
 340:	08 95       	ret
    }
    return buffer->write_pos - buffer->read_pos;
 342:	80 85       	ldd	r24, Z+8	; 0x08
 344:	91 85       	ldd	r25, Z+9	; 0x09
 346:	26 81       	ldd	r18, Z+6	; 0x06
 348:	37 81       	ldd	r19, Z+7	; 0x07
 34a:	82 1b       	sub	r24, r18
 34c:	93 0b       	sbc	r25, r19
}
 34e:	08 95       	ret

00000350 <ringbuffer_put>:


}


int ringbuffer_put(RINGBUFFER_T *buffer, char character) {
 350:	fc 01       	movw	r30, r24

    

    //is there space in the buffer?
    int bufferMask = (buffer->size - 1);
 352:	42 81       	ldd	r20, Z+2	; 0x02
 354:	53 81       	ldd	r21, Z+3	; 0x03
 356:	41 50       	subi	r20, 0x01	; 1
 358:	50 40       	sbci	r21, 0x00	; 0

    if ( ((buffer->write_pos + 1) & bufferMask) != (buffer->read_pos & bufferMask)) {
 35a:	80 85       	ldd	r24, Z+8	; 0x08
 35c:	91 85       	ldd	r25, Z+9	; 0x09
 35e:	26 81       	ldd	r18, Z+6	; 0x06
 360:	37 81       	ldd	r19, Z+7	; 0x07
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	82 27       	eor	r24, r18
 366:	93 27       	eor	r25, r19
 368:	84 23       	and	r24, r20
 36a:	95 23       	and	r25, r21
 36c:	00 97       	sbiw	r24, 0x00	; 0
 36e:	a9 f0       	breq	.+42     	; 0x39a <ringbuffer_put+0x4a>
        //wrap around write position
        buffer->write_pos &= bufferMask;
 370:	80 85       	ldd	r24, Z+8	; 0x08
 372:	91 85       	ldd	r25, Z+9	; 0x09
 374:	84 23       	and	r24, r20
 376:	95 23       	and	r25, r21
 378:	91 87       	std	Z+9, r25	; 0x09
 37a:	80 87       	std	Z+8, r24	; 0x08

        //write the character
        buffer->memory[buffer->write_pos++] = character;
 37c:	80 85       	ldd	r24, Z+8	; 0x08
 37e:	91 85       	ldd	r25, Z+9	; 0x09
 380:	a0 81       	ld	r26, Z
 382:	b1 81       	ldd	r27, Z+1	; 0x01
 384:	a8 0f       	add	r26, r24
 386:	b9 1f       	adc	r27, r25
 388:	6c 93       	st	X, r22
 38a:	01 96       	adiw	r24, 0x01	; 1
 38c:	91 87       	std	Z+9, r25	; 0x09
 38e:	80 87       	std	Z+8, r24	; 0x08
        //update size info

        return ringbuffer_len(buffer);
 390:	cf 01       	movw	r24, r30
 392:	0e 94 8e 01 	call	0x31c	; 0x31c <ringbuffer_len>
 396:	9c 01       	movw	r18, r24
 398:	02 c0       	rjmp	.+4      	; 0x39e <ringbuffer_put+0x4e>
    } else {
        return BUFFER_OVERFLOW;
 39a:	2f ef       	ldi	r18, 0xFF	; 255
 39c:	3f ef       	ldi	r19, 0xFF	; 255
    }
}
 39e:	c9 01       	movw	r24, r18
 3a0:	08 95       	ret

000003a2 <ringbuffer_isEmpty>:
        return buffer->write_pos + buffer->size - buffer->read_pos;
    }
    return buffer->write_pos - buffer->read_pos;
}

unsigned int ringbuffer_isEmpty(RINGBUFFER_T *buffer) {
 3a2:	fc 01       	movw	r30, r24
   return buffer->write_pos == buffer->read_pos;
 3a4:	20 85       	ldd	r18, Z+8	; 0x08
 3a6:	31 85       	ldd	r19, Z+9	; 0x09
 3a8:	46 81       	ldd	r20, Z+6	; 0x06
 3aa:	57 81       	ldd	r21, Z+7	; 0x07
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	24 17       	cp	r18, r20
 3b2:	35 07       	cpc	r19, r21
 3b4:	11 f0       	breq	.+4      	; 0x3ba <ringbuffer_isEmpty+0x18>
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
}
 3ba:	08 95       	ret

000003bc <ringbuffer_clear>:


void ringbuffer_clear(RINGBUFFER_T *buffer) {
 3bc:	fc 01       	movw	r30, r24
    buffer->read_pos = 0;
 3be:	17 82       	std	Z+7, r1	; 0x07
 3c0:	16 82       	std	Z+6, r1	; 0x06
    buffer->write_pos = 0;
 3c2:	11 86       	std	Z+9, r1	; 0x09
 3c4:	10 86       	std	Z+8, r1	; 0x08
}
 3c6:	08 95       	ret

000003c8 <MSX_SendPosition>:

uint8_t MSX_SendPosition(uint8_t xPos, uint8_t yPos)
{
    //MSX_ValidateInputs(&xPos, &yPos);

    MSX_WAIT_FOR_HIGH();
 3c8:	18 9b       	sbis	0x03, 0	; 3
 3ca:	fe cf       	rjmp	.-4      	; 0x3c8 <MSX_SendPosition>

    /* Wait for a High */
    if( (MSX_STROBE_PIN & MSX_STROBE) )
 3cc:	18 9b       	sbis	0x03, 0	; 3
 3ce:	33 c0       	rjmp	.+102    	; 0x436 <MSX_SendPosition+0x6e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d0:	92 e9       	ldi	r25, 0x92	; 146
 3d2:	9a 95       	dec	r25
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <MSX_SendPosition+0xa>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <MSX_SendPosition+0x10>
        uint8_t outNib = 0;
        xPos = (~xPos) + 1;

        /* Check for a sustained high */
        _delay_us(55);
        if( !(MSX_STROBE_PIN & MSX_STROBE) )
 3d8:	18 99       	sbic	0x03, 0	; 3
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <MSX_SendPosition+0x1e>
        {
            MSX_POS_PORT &= ~(MSX_POS_PINS);
 3dc:	8b b1       	in	r24, 0x0b	; 11
 3de:	8f 70       	andi	r24, 0x0F	; 15
 3e0:	8b b9       	out	0x0b, r24	; 11
            return 0;
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	08 95       	ret
    /* Wait for a High */
    if( (MSX_STROBE_PIN & MSX_STROBE) )
    {

        uint8_t outNib = 0;
        xPos = (~xPos) + 1;
 3e6:	81 95       	neg	r24
            return 0;
        }

        /* Transfer MSBs first */
        outNib = xPos;
        MSX_POS_PORT = (MSX_POS_PORT & ~(MSX_POS_PINS)) | (outNib & MSX_POS_PINS);
 3e8:	2b b1       	in	r18, 0x0b	; 11
 3ea:	98 2f       	mov	r25, r24
 3ec:	90 7f       	andi	r25, 0xF0	; 240
 3ee:	2f 70       	andi	r18, 0x0F	; 15
 3f0:	92 2b       	or	r25, r18
 3f2:	9b b9       	out	0x0b, r25	; 11

        /* Wait for a Low */
        MSX_WAIT_FOR_LOW();
 3f4:	18 99       	sbic	0x03, 0	; 3
 3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <MSX_SendPosition+0x2c>
        outNib = xPos << 4;
        MSX_POS_PORT = (MSX_POS_PORT & ~(MSX_POS_PINS)) | (outNib & MSX_POS_PINS);
 3f8:	9b b1       	in	r25, 0x0b	; 11
 3fa:	82 95       	swap	r24
 3fc:	80 7f       	andi	r24, 0xF0	; 240
 3fe:	9f 70       	andi	r25, 0x0F	; 15
 400:	89 2b       	or	r24, r25
 402:	8b b9       	out	0x0b, r24	; 11

        /* Wait for a High */
        MSX_WAIT_FOR_HIGH();
 404:	18 9b       	sbis	0x03, 0	; 3
 406:	fe cf       	rjmp	.-4      	; 0x404 <MSX_SendPosition+0x3c>
        outNib = yPos;
        MSX_POS_PORT = (MSX_POS_PORT & ~(MSX_POS_PINS)) | (outNib & MSX_POS_PINS);
 408:	9b b1       	in	r25, 0x0b	; 11
 40a:	86 2f       	mov	r24, r22
 40c:	80 7f       	andi	r24, 0xF0	; 240
 40e:	9f 70       	andi	r25, 0x0F	; 15
 410:	89 2b       	or	r24, r25
 412:	8b b9       	out	0x0b, r24	; 11

        /* Wait for Low */
        MSX_WAIT_FOR_LOW();
 414:	18 99       	sbic	0x03, 0	; 3
 416:	fe cf       	rjmp	.-4      	; 0x414 <MSX_SendPosition+0x4c>
        outNib = yPos << 4;
        MSX_POS_PORT = (MSX_POS_PORT & ~(MSX_POS_PINS)) | (outNib & MSX_POS_PINS);
 418:	8b b1       	in	r24, 0x0b	; 11
 41a:	62 95       	swap	r22
 41c:	60 7f       	andi	r22, 0xF0	; 240
 41e:	8f 70       	andi	r24, 0x0F	; 15
 420:	68 2b       	or	r22, r24
 422:	6b b9       	out	0x0b, r22	; 11
 424:	82 e9       	ldi	r24, 0x92	; 146
 426:	8a 95       	dec	r24
 428:	f1 f7       	brne	.-4      	; 0x426 <MSX_SendPosition+0x5e>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <MSX_SendPosition+0x64>
        
        _delay_us(55);
        MSX_POS_PORT &= ~(MSX_POS_PINS);
 42c:	8b b1       	in	r24, 0x0b	; 11
 42e:	8f 70       	andi	r24, 0x0F	; 15
 430:	8b b9       	out	0x0b, r24	; 11

        return 1;
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	08 95       	ret

    }

    return 0;
 436:	80 e0       	ldi	r24, 0x00	; 0
}
 438:	08 95       	ret

0000043a <MSX_SendButtons>:
uint8_t MSX_SendButtons(uint8_t buttonMap)
{
    
    uint8_t buttonCount = 0;

    if( buttonMap & MSX_LEFT_TRIGGER )
 43a:	28 2f       	mov	r18, r24
 43c:	80 ff       	sbrs	r24, 0
 43e:	03 c0       	rjmp	.+6      	; 0x446 <MSX_SendButtons+0xc>
    {
        MSX_TRIGGER_PORT &= ~MSX_LEFT_BUTTON_PIN;
 440:	29 98       	cbi	0x05, 1	; 5
        buttonCount++;
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	01 c0       	rjmp	.+2      	; 0x448 <MSX_SendButtons+0xe>


uint8_t MSX_SendButtons(uint8_t buttonMap)
{
    
    uint8_t buttonCount = 0;
 446:	80 e0       	ldi	r24, 0x00	; 0
    {
        MSX_TRIGGER_PORT &= ~MSX_LEFT_BUTTON_PIN;
        buttonCount++;
    }
    
    if( buttonMap & MSX_RIGHT_TRIGGER )
 448:	21 ff       	sbrs	r18, 1
 44a:	02 c0       	rjmp	.+4      	; 0x450 <MSX_SendButtons+0x16>
    {
        MSX_TRIGGER_PORT &= ~MSX_RIGHT_BUTTON_PIN;
 44c:	2a 98       	cbi	0x05, 2	; 5
        buttonCount++;
 44e:	8f 5f       	subi	r24, 0xFF	; 255
    }

    return buttonCount;


}
 450:	08 95       	ret

00000452 <MSX_ValidateInputs>:


void MSX_ValidateInputs(int8_t* xPos, int8_t* yPos)
{
 452:	fc 01       	movw	r30, r24
 454:	db 01       	movw	r26, r22
    if( *xPos > MSX_MAX_X_DATA )
 456:	80 81       	ld	r24, Z
 458:	81 35       	cpi	r24, 0x51	; 81
 45a:	14 f0       	brlt	.+4      	; 0x460 <MSX_ValidateInputs+0xe>
    {
        *xPos = MSX_MAX_X_DATA;
 45c:	80 e5       	ldi	r24, 0x50	; 80
 45e:	80 83       	st	Z, r24
    }
    
    if( *xPos < MSX_MIN_X_DATA )
 460:	80 81       	ld	r24, Z
 462:	80 3b       	cpi	r24, 0xB0	; 176
 464:	14 f4       	brge	.+4      	; 0x46a <MSX_ValidateInputs+0x18>
    {
        *xPos = MSX_MIN_X_DATA;
 466:	80 eb       	ldi	r24, 0xB0	; 176
 468:	80 83       	st	Z, r24
    }


    if( *yPos > MSX_MAX_Y_DATA )
 46a:	8c 91       	ld	r24, X
 46c:	81 35       	cpi	r24, 0x51	; 81
 46e:	14 f0       	brlt	.+4      	; 0x474 <MSX_ValidateInputs+0x22>
    {
        *yPos = MSX_MAX_Y_DATA;
 470:	80 e5       	ldi	r24, 0x50	; 80
 472:	8c 93       	st	X, r24
    }
    
    if( *yPos < MSX_MIN_Y_DATA )
 474:	8c 91       	ld	r24, X
 476:	80 3b       	cpi	r24, 0xB0	; 176
 478:	14 f4       	brge	.+4      	; 0x47e <MSX_ValidateInputs+0x2c>
    {
        *yPos = MSX_MIN_Y_DATA;
 47a:	80 eb       	ldi	r24, 0xB0	; 176
 47c:	8c 93       	st	X, r24
 47e:	08 95       	ret

00000480 <PS2_ValidateData>:
    return 0;
}


uint8_t PS2_ValidateData(PS2_Position_t* input)
{
 480:	fc 01       	movw	r30, r24
    //if( (input->buttonMap & PS2_MOUSE_X_OVF) || (input->buttonMap & PS2_MOUSE_Y_OVF) )
    {
    //    return 0;
    }

    if( (input->buttonMap & PS2_MOUSE_X_SIGN) && (input->xPos <= 127) )
 482:	82 81       	ldd	r24, Z+2	; 0x02
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	ac 01       	movw	r20, r24
 488:	40 71       	andi	r20, 0x10	; 16
 48a:	50 70       	andi	r21, 0x00	; 0
 48c:	84 ff       	sbrs	r24, 4
 48e:	03 c0       	rjmp	.+6      	; 0x496 <PS2_ValidateData+0x16>
 490:	20 81       	ld	r18, Z
 492:	27 ff       	sbrs	r18, 7
 494:	15 c0       	rjmp	.+42     	; 0x4c0 <PS2_ValidateData+0x40>
    {
        return 0;
    }

    if( (input->buttonMap & PS2_MOUSE_Y_SIGN) && (input->yPos <= 127) )
 496:	9c 01       	movw	r18, r24
 498:	20 72       	andi	r18, 0x20	; 32
 49a:	30 70       	andi	r19, 0x00	; 0
 49c:	85 ff       	sbrs	r24, 5
 49e:	03 c0       	rjmp	.+6      	; 0x4a6 <PS2_ValidateData+0x26>
 4a0:	81 81       	ldd	r24, Z+1	; 0x01
 4a2:	87 ff       	sbrs	r24, 7
 4a4:	0d c0       	rjmp	.+26     	; 0x4c0 <PS2_ValidateData+0x40>
    {
        return 0;
    }

    if( !(input->buttonMap & PS2_MOUSE_X_SIGN) && (input->xPos >= 127) )
 4a6:	41 15       	cp	r20, r1
 4a8:	51 05       	cpc	r21, r1
 4aa:	19 f4       	brne	.+6      	; 0x4b2 <PS2_ValidateData+0x32>
 4ac:	80 81       	ld	r24, Z
 4ae:	8f 37       	cpi	r24, 0x7F	; 127
 4b0:	38 f4       	brcc	.+14     	; 0x4c0 <PS2_ValidateData+0x40>
	dataCount = 0;
    return 0;
}


uint8_t PS2_ValidateData(PS2_Position_t* input)
 4b2:	81 e0       	ldi	r24, 0x01	; 1
    if( !(input->buttonMap & PS2_MOUSE_X_SIGN) && (input->xPos >= 127) )
    {
        return 0;
    }

    if( !(input->buttonMap & PS2_MOUSE_Y_SIGN) && (input->yPos >= 127) )
 4b4:	21 15       	cp	r18, r1
 4b6:	31 05       	cpc	r19, r1
 4b8:	29 f4       	brne	.+10     	; 0x4c4 <PS2_ValidateData+0x44>
	dataCount = 0;
    return 0;
}


uint8_t PS2_ValidateData(PS2_Position_t* input)
 4ba:	91 81       	ldd	r25, Z+1	; 0x01
 4bc:	9f 37       	cpi	r25, 0x7F	; 127
 4be:	10 f0       	brcs	.+4      	; 0x4c4 <PS2_ValidateData+0x44>
        return 0;
    }

    if( !(input->buttonMap & PS2_MOUSE_X_SIGN) && (input->xPos >= 127) )
    {
        return 0;
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	08 95       	ret
    {
        return 0;
    }

    return 1;
}
 4c4:	08 95       	ret

000004c6 <PS2_SendByte>:


void PS2_SendByte(uint8_t outByte)
{
    /* Send a RTS */
    PS2_OUT &= ~(PS2_CLK);
 4c6:	2e 98       	cbi	0x05, 6	; 5
    PS2_DIR |= (PS2_CLK);
 4c8:	26 9a       	sbi	0x04, 6	; 4
 4ca:	ef ee       	ldi	r30, 0xEF	; 239
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	31 97       	sbiw	r30, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <PS2_SendByte+0x8>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <PS2_SendByte+0xe>
 4d4:	00 00       	nop
    _delay_us(120);

    PS2_CLR_DATA();
 4d6:	2f 98       	cbi	0x05, 7	; 5
    PS2_DIR |= (PS2_DATA);
 4d8:	27 9a       	sbi	0x04, 7	; 4

    PS2_DIR &= ~(PS2_CLK);
 4da:	26 98       	cbi	0x04, 6	; 4
    PS2_OUT |= (PS2_CLK);
 4dc:	2e 9a       	sbi	0x05, 6	; 5
 4de:	28 e0       	ldi	r18, 0x08	; 8


    uint8_t i;
    uint8_t parity = 0;
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	fd e0       	ldi	r31, 0x0D	; 13
 4e4:	fa 95       	dec	r31
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <PS2_SendByte+0x1e>
 4e8:	00 00       	nop
    for( i = 0; i < 8; i++ )
    {
        _delay_us(5);
        PS2_WAIT_CLK_LOW();
 4ea:	1e 99       	sbic	0x03, 6	; 3
 4ec:	fe cf       	rjmp	.-4      	; 0x4ea <PS2_SendByte+0x24>
 4ee:	3d e0       	ldi	r19, 0x0D	; 13
 4f0:	3a 95       	dec	r19
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <PS2_SendByte+0x2a>
 4f4:	00 00       	nop
        _delay_us(5);

        PS2_CLR_DATA();
 4f6:	2f 98       	cbi	0x05, 7	; 5
        if( outByte & 0x01 )
 4f8:	80 ff       	sbrs	r24, 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <PS2_SendByte+0x3a>
        {
            parity++;
 4fc:	9f 5f       	subi	r25, 0xFF	; 255
            PS2_SET_DATA();
 4fe:	2f 9a       	sbi	0x05, 7	; 5
        }
        outByte = outByte >> 1;
 500:	86 95       	lsr	r24
        
        PS2_WAIT_CLK_HIGH();
 502:	1e 9b       	sbis	0x03, 6	; 3
 504:	fe cf       	rjmp	.-4      	; 0x502 <PS2_SendByte+0x3c>
 506:	21 50       	subi	r18, 0x01	; 1
    PS2_OUT |= (PS2_CLK);


    uint8_t i;
    uint8_t parity = 0;
    for( i = 0; i < 8; i++ )
 508:	61 f7       	brne	.-40     	; 0x4e2 <PS2_SendByte+0x1c>
        PS2_WAIT_CLK_HIGH();
        
    }

    /* Send Parity */
    PS2_WAIT_CLK_LOW();
 50a:	1e 99       	sbic	0x03, 6	; 3
 50c:	fe cf       	rjmp	.-4      	; 0x50a <PS2_SendByte+0x44>
    PS2_SET_DATA();
 50e:	2f 9a       	sbi	0x05, 7	; 5
    if( parity & 0x01 )
 510:	90 fd       	sbrc	r25, 0
    {
        PS2_CLR_DATA();
 512:	2f 98       	cbi	0x05, 7	; 5
    }
    PS2_WAIT_CLK_HIGH();
 514:	1e 9b       	sbis	0x03, 6	; 3
 516:	fe cf       	rjmp	.-4      	; 0x514 <PS2_SendByte+0x4e>
    
    PS2_WAIT_CLK_LOW();
 518:	1e 99       	sbic	0x03, 6	; 3
 51a:	fe cf       	rjmp	.-4      	; 0x518 <PS2_SendByte+0x52>
    /* Release Data line */
    PS2_SET_DATA();
 51c:	2f 9a       	sbi	0x05, 7	; 5
    PS2_DIR &= ~(PS2_DATA);
 51e:	27 98       	cbi	0x04, 7	; 4
    PS2_WAIT_CLK_HIGH();
 520:	1e 9b       	sbis	0x03, 6	; 3
 522:	fe cf       	rjmp	.-4      	; 0x520 <PS2_SendByte+0x5a>

    /* Wait until the line is ready */
    PS2_WAIT_DATA_LOW();
 524:	1f 9b       	sbis	0x03, 7	; 3
 526:	fe cf       	rjmp	.-4      	; 0x524 <PS2_SendByte+0x5e>
    PS2_WAIT_CLK_LOW();
 528:	1e 99       	sbic	0x03, 6	; 3
 52a:	fe cf       	rjmp	.-4      	; 0x528 <PS2_SendByte+0x62>

    PS2_WAIT_CLK_HIGH();
 52c:	1e 9b       	sbis	0x03, 6	; 3
 52e:	fe cf       	rjmp	.-4      	; 0x52c <PS2_SendByte+0x66>
    PS2_WAIT_DATA_HIGH();
 530:	1f 99       	sbic	0x03, 7	; 3
 532:	fe cf       	rjmp	.-4      	; 0x530 <PS2_SendByte+0x6a>

    //_delay_ms(10);


}
 534:	08 95       	ret

00000536 <PS2_GetByte>:
uint8_t PS2_GetByte(uint8_t* inByte)
{
    uint8_t dataIn = 0;
    uint8_t parity = 0;

    PS2_DIR &= ~(PS2_CLK | PS2_DATA);
 536:	24 b1       	in	r18, 0x04	; 4
 538:	2f 73       	andi	r18, 0x3F	; 63
 53a:	24 b9       	out	0x04, r18	; 4
    if( !(PS2_STARTBIT) )
 53c:	1e 99       	sbic	0x03, 6	; 3
 53e:	2e c0       	rjmp	.+92     	; 0x59c <PS2_GetByte+0x66>
 540:	1f 99       	sbic	0x03, 7	; 3
 542:	2e c0       	rjmp	.+92     	; 0x5a0 <PS2_GetByte+0x6a>
    {
        return PS2_NO_DATA;
    }

    /* Wait for High */
    PS2_WAIT_CLK_HIGH();
 544:	1e 9b       	sbis	0x03, 6	; 3
 546:	fe cf       	rjmp	.-4      	; 0x544 <PS2_GetByte+0xe>
 548:	28 e0       	ldi	r18, 0x08	; 8
 54a:	50 e0       	ldi	r21, 0x00	; 0
 54c:	40 e0       	ldi	r20, 0x00	; 0

    uint8_t i;
    for( i = 0; i < 8; i++ )
    {
        /* Wait for Low */
        PS2_WAIT_CLK_LOW();
 54e:	1e 99       	sbic	0x03, 6	; 3
 550:	fe cf       	rjmp	.-4      	; 0x54e <PS2_GetByte+0x18>
    
        dataIn = dataIn >> 1;
 552:	46 95       	lsr	r20

        if( PS2_DATABIT )
 554:	1f 9b       	sbis	0x03, 7	; 3
 556:	02 c0       	rjmp	.+4      	; 0x55c <PS2_GetByte+0x26>
        {
            parity++;
 558:	5f 5f       	subi	r21, 0xFF	; 255
            dataIn |= 0x80;
 55a:	40 68       	ori	r20, 0x80	; 128
        }
    
        /* Wait for High */
        PS2_WAIT_CLK_HIGH();
 55c:	1e 9b       	sbis	0x03, 6	; 3
 55e:	fe cf       	rjmp	.-4      	; 0x55c <PS2_GetByte+0x26>
 560:	21 50       	subi	r18, 0x01	; 1

    /* Wait for High */
    PS2_WAIT_CLK_HIGH();

    uint8_t i;
    for( i = 0; i < 8; i++ )
 562:	a9 f7       	brne	.-22     	; 0x54e <PS2_GetByte+0x18>
        /* Wait for High */
        PS2_WAIT_CLK_HIGH();
    }

    /* Wait for Low */
    PS2_WAIT_CLK_LOW();
 564:	1e 99       	sbic	0x03, 6	; 3
 566:	fe cf       	rjmp	.-4      	; 0x564 <PS2_GetByte+0x2e>
    if( !((parity + PS2_DATABIT) & 0x01) )
 568:	23 b1       	in	r18, 0x03	; 3
 56a:	33 27       	eor	r19, r19
 56c:	27 fd       	sbrc	r18, 7
 56e:	30 95       	com	r19
 570:	22 27       	eor	r18, r18
 572:	33 0f       	add	r19, r19
 574:	22 1f       	adc	r18, r18
 576:	33 27       	eor	r19, r19
 578:	25 0f       	add	r18, r21
 57a:	31 1d       	adc	r19, r1
 57c:	20 ff       	sbrs	r18, 0
 57e:	0c c0       	rjmp	.+24     	; 0x598 <PS2_GetByte+0x62>
    {
        /* Parity Bit failed! */
        return PS2_DATA_ERROR;
    }
    PS2_WAIT_CLK_HIGH();
 580:	1e 9b       	sbis	0x03, 6	; 3
 582:	fe cf       	rjmp	.-4      	; 0x580 <PS2_GetByte+0x4a>

    /* Wait for stop Low */
    PS2_WAIT_CLK_LOW();
 584:	1e 99       	sbic	0x03, 6	; 3
 586:	fe cf       	rjmp	.-4      	; 0x584 <PS2_GetByte+0x4e>
    if( !PS2_DATABIT )
 588:	1f 9b       	sbis	0x03, 7	; 3
 58a:	06 c0       	rjmp	.+12     	; 0x598 <PS2_GetByte+0x62>
    {
        /* Stop bit must be 0! */
        return PS2_DATA_ERROR;
    }

    PS2_WAIT_CLK_HIGH();
 58c:	1e 9b       	sbis	0x03, 6	; 3
 58e:	fe cf       	rjmp	.-4      	; 0x58c <PS2_GetByte+0x56>

    *inByte = dataIn;
 590:	fc 01       	movw	r30, r24
 592:	40 83       	st	Z, r20

    

    return PS2_DATA_READY;
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	08 95       	ret
    /* Wait for stop Low */
    PS2_WAIT_CLK_LOW();
    if( !PS2_DATABIT )
    {
        /* Stop bit must be 0! */
        return PS2_DATA_ERROR;
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	08 95       	ret
    uint8_t parity = 0;

    PS2_DIR &= ~(PS2_CLK | PS2_DATA);
    if( !(PS2_STARTBIT) )
    {
        return PS2_NO_DATA;
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	08 95       	ret
 5a0:	80 e0       	ldi	r24, 0x00	; 0
    *inByte = dataIn;

    

    return PS2_DATA_READY;
}
 5a2:	08 95       	ret

000005a4 <PS2_GetPositionPacket>:




uint8_t PS2_GetPositionPacket(PS2_Position_t* event)
{
 5a4:	ff 92       	push	r15
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	00 d0       	rcall	.+0      	; 0x5b0 <PS2_GetPositionPacket+0xc>
 5b0:	cd b7       	in	r28, 0x3d	; 61
 5b2:	de b7       	in	r29, 0x3e	; 62
 5b4:	8c 01       	movw	r16, r24
    uint8_t inByte;
	uint8_t dataIn = 0;
 5b6:	19 82       	std	Y+1, r1	; 0x01
	uint8_t status = PS2_DATA_ERROR;
	uint8_t i;
    static uint8_t dataCount = 0;

	if( dataCount == 0 )
 5b8:	80 91 46 01 	lds	r24, 0x0146
 5bc:	88 23       	and	r24, r24
 5be:	71 f4       	brne	.+28     	; 0x5dc <PS2_GetPositionPacket+0x38>
	{
		PS2_SendByte(0xEB);
 5c0:	8b ee       	ldi	r24, 0xEB	; 235
 5c2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <PS2_SendByte>
 5c6:	ea ef       	ldi	r30, 0xFA	; 250
 5c8:	fe 2e       	mov	r15, r30
		//Wait for ACK
		for(i =0; i < 250; i++)
		{
	        PS2_GetByte(&dataIn);
 5ca:	ce 01       	movw	r24, r28
 5cc:	01 96       	adiw	r24, 0x01	; 1
 5ce:	0e 94 9b 02 	call	0x536	; 0x536 <PS2_GetByte>
			if(dataIn == 0xFA)
 5d2:	89 81       	ldd	r24, Y+1	; 0x01
 5d4:	8a 3f       	cpi	r24, 0xFA	; 250
 5d6:	11 f0       	breq	.+4      	; 0x5dc <PS2_GetPositionPacket+0x38>
 5d8:	fa 94       	dec	r15

	if( dataCount == 0 )
	{
		PS2_SendByte(0xEB);
		//Wait for ACK
		for(i =0; i < 250; i++)
 5da:	b9 f7       	brne	.-18     	; 0x5ca <PS2_GetPositionPacket+0x26>
	uint8_t i;
    static uint8_t dataCount = 0;

	if( dataCount == 0 )
	{
		PS2_SendByte(0xEB);
 5dc:	7a ef       	ldi	r23, 0xFA	; 250
 5de:	f7 2e       	mov	r15, r23
        return 0;
    }*/

	for(i =0; i < 250; i++)
	{
    	status = PS2_GetByte(&inByte);
 5e0:	ce 01       	movw	r24, r28
 5e2:	02 96       	adiw	r24, 0x02	; 2
 5e4:	0e 94 9b 02 	call	0x536	; 0x536 <PS2_GetByte>

	    if( status == PS2_DATA_READY )
 5e8:	81 30       	cpi	r24, 0x01	; 1
 5ea:	29 f5       	brne	.+74     	; 0x636 <PS2_GetPositionPacket+0x92>
	    {
	        switch(dataCount)
 5ec:	80 91 46 01 	lds	r24, 0x0146
 5f0:	81 30       	cpi	r24, 0x01	; 1
 5f2:	59 f0       	breq	.+22     	; 0x60a <PS2_GetPositionPacket+0x66>
 5f4:	81 30       	cpi	r24, 0x01	; 1
 5f6:	18 f0       	brcs	.+6      	; 0x5fe <PS2_GetPositionPacket+0x5a>
 5f8:	82 30       	cpi	r24, 0x02	; 2
 5fa:	79 f4       	brne	.+30     	; 0x61a <PS2_GetPositionPacket+0x76>
 5fc:	0a c0       	rjmp	.+20     	; 0x612 <PS2_GetPositionPacket+0x6e>
	        {
	            case 0:
	                /* The firstByte must have 0x08 set */
	                if( !(inByte & 0x08) )
 5fe:	9a 81       	ldd	r25, Y+2	; 0x02
 600:	93 ff       	sbrs	r25, 3
 602:	1d c0       	rjmp	.+58     	; 0x63e <PS2_GetPositionPacket+0x9a>
	                {
	                    dataCount = 0;
	                    return 0;
	                }
	                event->buttonMap = inByte;
 604:	f8 01       	movw	r30, r16
 606:	92 83       	std	Z+2, r25	; 0x02

	                break;
 608:	13 c0       	rjmp	.+38     	; 0x630 <PS2_GetPositionPacket+0x8c>

	            case 1:
	                event->xPos = inByte;
 60a:	9a 81       	ldd	r25, Y+2	; 0x02
 60c:	f8 01       	movw	r30, r16
 60e:	90 83       	st	Z, r25
	                break;
 610:	0f c0       	rjmp	.+30     	; 0x630 <PS2_GetPositionPacket+0x8c>

	            case 2:
	                event->yPos = inByte;
 612:	8a 81       	ldd	r24, Y+2	; 0x02
 614:	f8 01       	movw	r30, r16
 616:	81 83       	std	Z+1, r24	; 0x01
 618:	02 c0       	rjmp	.+4      	; 0x61e <PS2_GetPositionPacket+0x7a>

	        }



	        if( dataCount >= 2 )
 61a:	82 30       	cpi	r24, 0x02	; 2
 61c:	48 f0       	brcs	.+18     	; 0x630 <PS2_GetPositionPacket+0x8c>
	        {
	            dataCount = 0;
 61e:	10 92 46 01 	sts	0x0146, r1
	            if( PS2_ValidateData(event) == 0 )
 622:	c8 01       	movw	r24, r16
 624:	0e 94 40 02 	call	0x480	; 0x480 <PS2_ValidateData>
	            case 0:
	                /* The firstByte must have 0x08 set */
	                if( !(inByte & 0x08) )
	                {
	                    dataCount = 0;
	                    return 0;
 628:	91 e0       	ldi	r25, 0x01	; 1
 62a:	88 23       	and	r24, r24
 62c:	49 f4       	brne	.+18     	; 0x640 <PS2_GetPositionPacket+0x9c>
 62e:	07 c0       	rjmp	.+14     	; 0x63e <PS2_GetPositionPacket+0x9a>
	            {
	                return 0;
	            }
	            return 1;
	        }
	        dataCount++;
 630:	8f 5f       	subi	r24, 0xFF	; 255
 632:	80 93 46 01 	sts	0x0146, r24
 636:	fa 94       	dec	r15
    {
        dataCount = 0;
        return 0;
    }*/

	for(i =0; i < 250; i++)
 638:	99 f6       	brne	.-90     	; 0x5e0 <PS2_GetPositionPacket+0x3c>
	        dataCount++;
	    }
	}


	dataCount = 0;
 63a:	10 92 46 01 	sts	0x0146, r1
	            case 0:
	                /* The firstByte must have 0x08 set */
	                if( !(inByte & 0x08) )
	                {
	                    dataCount = 0;
	                    return 0;
 63e:	90 e0       	ldi	r25, 0x00	; 0
	}


	dataCount = 0;
    return 0;
}
 640:	89 2f       	mov	r24, r25
 642:	0f 90       	pop	r0
 644:	0f 90       	pop	r0
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	1f 91       	pop	r17
 64c:	0f 91       	pop	r16
 64e:	ff 90       	pop	r15
 650:	08 95       	ret

00000652 <PS2_Init>:
#include <stdint.h>
#include "PS2_Mouse.h"


void PS2_Init(void)
{
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	0f 92       	push	r0
 658:	cd b7       	in	r28, 0x3d	; 61
 65a:	de b7       	in	r29, 0x3e	; 62
    uint8_t dataIn = 0;
 65c:	19 82       	std	Y+1, r1	; 0x01
    while( dataIn != 0xAA )
 65e:	04 c0       	rjmp	.+8      	; 0x668 <PS2_Init+0x16>
    {
        PS2_GetByte(&dataIn);
 660:	ce 01       	movw	r24, r28
 662:	01 96       	adiw	r24, 0x01	; 1
 664:	0e 94 9b 02 	call	0x536	; 0x536 <PS2_GetByte>


void PS2_Init(void)
{
    uint8_t dataIn = 0;
    while( dataIn != 0xAA )
 668:	89 81       	ldd	r24, Y+1	; 0x01
 66a:	8a 3a       	cpi	r24, 0xAA	; 170
 66c:	c9 f7       	brne	.-14     	; 0x660 <PS2_Init+0xe>
 66e:	04 c0       	rjmp	.+8      	; 0x678 <PS2_Init+0x26>
        PS2_GetByte(&dataIn);
    }

    while( dataIn != 0x00 )
    {
        PS2_GetByte(&dataIn);
 670:	ce 01       	movw	r24, r28
 672:	01 96       	adiw	r24, 0x01	; 1
 674:	0e 94 9b 02 	call	0x536	; 0x536 <PS2_GetByte>
    while( dataIn != 0xAA )
    {
        PS2_GetByte(&dataIn);
    }

    while( dataIn != 0x00 )
 678:	89 81       	ldd	r24, Y+1	; 0x01
 67a:	88 23       	and	r24, r24
 67c:	c9 f7       	brne	.-14     	; 0x670 <PS2_Init+0x1e>
    {
        PS2_GetByte(&dataIn);
    }

    dataIn = 0xFF;
 67e:	8f ef       	ldi	r24, 0xFF	; 255
 680:	89 83       	std	Y+1, r24	; 0x01
    PS2_SendByte(0xFF);
 682:	0e 94 63 02 	call	0x4c6	; 0x4c6 <PS2_SendByte>
    while( dataIn != 0x00 )
 686:	04 c0       	rjmp	.+8      	; 0x690 <PS2_Init+0x3e>
    {
        PS2_GetByte(&dataIn);
 688:	ce 01       	movw	r24, r28
 68a:	01 96       	adiw	r24, 0x01	; 1
 68c:	0e 94 9b 02 	call	0x536	; 0x536 <PS2_GetByte>
        PS2_GetByte(&dataIn);
    }

    dataIn = 0xFF;
    PS2_SendByte(0xFF);
    while( dataIn != 0x00 )
 690:	89 81       	ldd	r24, Y+1	; 0x01
 692:	88 23       	and	r24, r24
 694:	c9 f7       	brne	.-14     	; 0x688 <PS2_Init+0x36>
    {
        PS2_GetByte(&dataIn);
    }
    dataIn = 0xFF;
 696:	8f ef       	ldi	r24, 0xFF	; 255
 698:	89 83       	std	Y+1, r24	; 0x01



    /* Set Report Rate */
    /* Set sample rate to 20 */
    PS2_SendByte(0xF3);
 69a:	83 ef       	ldi	r24, 0xF3	; 243
 69c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <PS2_SendByte>

    while( dataIn != 0xFA )
 6a0:	04 c0       	rjmp	.+8      	; 0x6aa <PS2_Init+0x58>
    {
        PS2_GetByte(&dataIn);
 6a2:	ce 01       	movw	r24, r28
 6a4:	01 96       	adiw	r24, 0x01	; 1
 6a6:	0e 94 9b 02 	call	0x536	; 0x536 <PS2_GetByte>

    /* Set Report Rate */
    /* Set sample rate to 20 */
    PS2_SendByte(0xF3);

    while( dataIn != 0xFA )
 6aa:	89 81       	ldd	r24, Y+1	; 0x01
 6ac:	8a 3f       	cpi	r24, 0xFA	; 250
 6ae:	c9 f7       	brne	.-14     	; 0x6a2 <PS2_Init+0x50>
    {
        PS2_GetByte(&dataIn);
    }

    PS2_SendByte(80);
 6b0:	80 e5       	ldi	r24, 0x50	; 80
 6b2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <PS2_SendByte>
    while( dataIn != 0xFA )
 6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <PS2_Init+0x6e>
    {
        PS2_GetByte(&dataIn);
 6b8:	ce 01       	movw	r24, r28
 6ba:	01 96       	adiw	r24, 0x01	; 1
 6bc:	0e 94 9b 02 	call	0x536	; 0x536 <PS2_GetByte>
    {
        PS2_GetByte(&dataIn);
    }

    PS2_SendByte(80);
    while( dataIn != 0xFA )
 6c0:	89 81       	ldd	r24, Y+1	; 0x01
 6c2:	8a 3f       	cpi	r24, 0xFA	; 250
 6c4:	c9 f7       	brne	.-14     	; 0x6b8 <PS2_Init+0x66>
    {
        PS2_GetByte(&dataIn);
    }

	//Set poll mode
	PS2_SendByte(0xF0);
 6c6:	80 ef       	ldi	r24, 0xF0	; 240
 6c8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <PS2_SendByte>
    while( dataIn != 0xFA )
 6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <PS2_Init+0x84>
    {
        PS2_GetByte(&dataIn);
 6ce:	ce 01       	movw	r24, r28
 6d0:	01 96       	adiw	r24, 0x01	; 1
 6d2:	0e 94 9b 02 	call	0x536	; 0x536 <PS2_GetByte>
        PS2_GetByte(&dataIn);
    }

	//Set poll mode
	PS2_SendByte(0xF0);
    while( dataIn != 0xFA )
 6d6:	89 81       	ldd	r24, Y+1	; 0x01
 6d8:	8a 3f       	cpi	r24, 0xFA	; 250
 6da:	c9 f7       	brne	.-14     	; 0x6ce <PS2_Init+0x7c>
    {
        PS2_GetByte(&dataIn);
    }

	//Begin reporting steaming.
    PS2_SendByte(0xF4);
 6dc:	84 ef       	ldi	r24, 0xF4	; 244
 6de:	0e 94 63 02 	call	0x4c6	; 0x4c6 <PS2_SendByte>

}
 6e2:	0f 90       	pop	r0
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	08 95       	ret

000006ea <main>:
{

    uint8_t dataIn;
    uint8_t outputString[10];

    uartInit(&PrimaryUART, 0);
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	91 e0       	ldi	r25, 0x01	; 1
 6ee:	60 e0       	ldi	r22, 0x00	; 0
 6f0:	0e 94 ac 00 	call	0x158	; 0x158 <uartInit>
    uartSetBaud(&PrimaryUART, 0, BAUD(9600));
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	91 e0       	ldi	r25, 0x01	; 1
 6f8:	60 e0       	ldi	r22, 0x00	; 0
 6fa:	43 e3       	ldi	r20, 0x33	; 51
 6fc:	0e 94 c5 00 	call	0x18a	; 0x18a <uartSetBaud>

    PS2_Init();
 700:	0e 94 29 03 	call	0x652	; 0x652 <PS2_Init>

    sei();
 704:	78 94       	sei

    MSX_POS_DIR |= MSX_POS_PINS;
 706:	8a b1       	in	r24, 0x0a	; 10
 708:	80 6f       	ori	r24, 0xF0	; 240
 70a:	8a b9       	out	0x0a, r24	; 10
    MSX_TRIGGER_DIR |= (MSX_LEFT_BUTTON_PIN | MSX_RIGHT_BUTTON_PIN);
 70c:	84 b1       	in	r24, 0x04	; 4
 70e:	86 60       	ori	r24, 0x06	; 6
 710:	84 b9       	out	0x04, r24	; 4
    MSX_TRIGGER_PORT |= (MSX_LEFT_BUTTON_PIN | MSX_RIGHT_BUTTON_PIN);
 712:	85 b1       	in	r24, 0x05	; 5
 714:	86 60       	ori	r24, 0x06	; 6
 716:	85 b9       	out	0x05, r24	; 5

    uint8_t MSX_Ready = 1;
 718:	c1 e0       	ldi	r28, 0x01	; 1
        
    while(1)
    {
        dataReady = PS2_GetPositionPacket(&event);
 71a:	8a e4       	ldi	r24, 0x4A	; 74
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <PS2_GetPositionPacket>
 722:	80 93 4d 01 	sts	0x014D, r24
        if( dataReady )
 726:	80 91 4d 01 	lds	r24, 0x014D
 72a:	88 23       	and	r24, r24
 72c:	a9 f0       	breq	.+42     	; 0x758 <main+0x6e>
        {
            if( MSX_Ready == 1)
 72e:	c1 30       	cpi	r28, 0x01	; 1
 730:	61 f4       	brne	.+24     	; 0x74a <main+0x60>
            {
                readyData.xPos = event.xPos;
 732:	80 91 4a 01 	lds	r24, 0x014A
 736:	80 93 47 01 	sts	0x0147, r24
                readyData.yPos = event.yPos;
 73a:	80 91 4b 01 	lds	r24, 0x014B
 73e:	80 93 48 01 	sts	0x0148, r24
                readyData.buttonMap = event.buttonMap;
 742:	80 91 4c 01 	lds	r24, 0x014C
 746:	80 93 49 01 	sts	0x0149, r24

            uint8_t xPos = event.xPos;
            uint8_t yPos = event.yPos;
            uint8_t buttonMap = event.buttonMap;

			uartTx(&PrimaryUART, buttonMap);
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	91 e0       	ldi	r25, 0x01	; 1
 74e:	60 91 4c 01 	lds	r22, 0x014C
 752:	0e 94 d7 00 	call	0x1ae	; 0x1ae <uartTx>
 756:	02 c0       	rjmp	.+4      	; 0x75c <main+0x72>
            uartNewLine(&PrimaryUART);*/
            //MSX_SendPosition(event.xPos, event.yPos);         
        }


        if( MSX_Ready == 0 )
 758:	cc 23       	and	r28, r28
 75a:	f9 f6       	brne	.-66     	; 0x71a <main+0x30>
        {

            if( MSX_SendPosition(readyData.xPos, readyData.yPos) )
 75c:	80 91 47 01 	lds	r24, 0x0147
 760:	60 91 48 01 	lds	r22, 0x0148
 764:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <MSX_SendPosition>
            {   
                    MSX_Ready = 1;   
 768:	c1 e0       	ldi	r28, 0x01	; 1
 76a:	88 23       	and	r24, r24
 76c:	09 f4       	brne	.+2      	; 0x770 <main+0x86>
 76e:	c0 e0       	ldi	r28, 0x00	; 0
            }
        
            if( (readyData.buttonMap & MSX_LEFT_TRIGGER) || (readyData.buttonMap & MSX_RIGHT_TRIGGER ))
 770:	80 91 49 01 	lds	r24, 0x0149
 774:	80 fd       	sbrc	r24, 0
 776:	04 c0       	rjmp	.+8      	; 0x780 <main+0x96>
 778:	80 91 49 01 	lds	r24, 0x0149
 77c:	81 ff       	sbrs	r24, 1
 77e:	04 c0       	rjmp	.+8      	; 0x788 <main+0x9e>
            {
                MSX_SendButtons(readyData.buttonMap);
 780:	80 91 49 01 	lds	r24, 0x0149
 784:	0e 94 1d 02 	call	0x43a	; 0x43a <MSX_SendButtons>
            }

            if( !(readyData.buttonMap & MSX_LEFT_TRIGGER) )
 788:	80 91 49 01 	lds	r24, 0x0149
 78c:	80 ff       	sbrs	r24, 0
            {
                MSX_TRIGGER_PORT |= (MSX_LEFT_BUTTON_PIN);
 78e:	29 9a       	sbi	0x05, 1	; 5
            }

            if( !(readyData.buttonMap & MSX_RIGHT_TRIGGER) )
 790:	80 91 49 01 	lds	r24, 0x0149
 794:	81 fd       	sbrc	r24, 1
 796:	c1 cf       	rjmp	.-126    	; 0x71a <main+0x30>
            {
                MSX_TRIGGER_PORT |= (MSX_RIGHT_BUTTON_PIN);
 798:	2a 9a       	sbi	0x05, 2	; 5
 79a:	bf cf       	rjmp	.-130    	; 0x71a <main+0x30>

0000079c <_exit>:
 79c:	f8 94       	cli

0000079e <__stop_program>:
 79e:	ff cf       	rjmp	.-2      	; 0x79e <__stop_program>
